
Locker-v2-411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f78  08002f78  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f80  08002f80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000010  08002f98  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  08002f98  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c90f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fb5  00000000  00000000  0002c94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  0002e908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000235b  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a60f  00000000  00000000  00032523  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f3eb  00000000  00000000  0003cb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbf1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  000cbf98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f30 	.word	0x08002f30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002f30 	.word	0x08002f30

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <SCH_Update>:
 */
#include "main.h"
#include "app_scheduler.h"
#include "app_uart.h"

void SCH_Update(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
    uint8_t Index;
    // NOTE: calculations are in *TICKS* (not milliseconds)
    UART_DEBUG_Transmit(".");
 80004ee:	4827      	ldr	r0, [pc, #156]	; (800058c <SCH_Update+0xa4>)
 80004f0:	f000 fa2c 	bl	800094c <UART_DEBUG_Transmit>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	e041      	b.n	800057e <SCH_Update+0x96>
    // Check if there is a task at this location
        if (SCH_tasks_G[Index].pTask) {
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4a24      	ldr	r2, [pc, #144]	; (8000590 <SCH_Update+0xa8>)
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	4413      	add	r3, r2
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d037      	beq.n	8000578 <SCH_Update+0x90>
			if (SCH_tasks_G[Index].Delay == 0) {
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	4a21      	ldr	r2, [pc, #132]	; (8000590 <SCH_Update+0xa8>)
 800050c:	011b      	lsls	r3, r3, #4
 800050e:	4413      	add	r3, r2
 8000510:	3304      	adds	r3, #4
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d122      	bne.n	800055e <SCH_Update+0x76>
			// The task is due to run
				SCH_tasks_G[Index].RunMe += 1; // Inc. the 'RunMe' flag
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <SCH_Update+0xa8>)
 800051c:	011b      	lsls	r3, r3, #4
 800051e:	4413      	add	r3, r2
 8000520:	330c      	adds	r3, #12
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	3201      	adds	r2, #1
 8000528:	b2d1      	uxtb	r1, r2
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <SCH_Update+0xa8>)
 800052c:	011b      	lsls	r3, r3, #4
 800052e:	4413      	add	r3, r2
 8000530:	330c      	adds	r3, #12
 8000532:	460a      	mov	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4a15      	ldr	r2, [pc, #84]	; (8000590 <SCH_Update+0xa8>)
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	4413      	add	r3, r2
 800053e:	3308      	adds	r3, #8
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00b      	beq.n	800055e <SCH_Update+0x76>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000546:	79fa      	ldrb	r2, [r7, #7]
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4911      	ldr	r1, [pc, #68]	; (8000590 <SCH_Update+0xa8>)
 800054c:	0112      	lsls	r2, r2, #4
 800054e:	440a      	add	r2, r1
 8000550:	3208      	adds	r2, #8
 8000552:	6812      	ldr	r2, [r2, #0]
 8000554:	490e      	ldr	r1, [pc, #56]	; (8000590 <SCH_Update+0xa8>)
 8000556:	011b      	lsls	r3, r3, #4
 8000558:	440b      	add	r3, r1
 800055a:	3304      	adds	r3, #4
 800055c:	601a      	str	r2, [r3, #0]
				}
			}
			SCH_tasks_G[Index].Delay -= 1;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <SCH_Update+0xa8>)
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	4413      	add	r3, r2
 8000566:	3304      	adds	r3, #4
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	3a01      	subs	r2, #1
 800056e:	4908      	ldr	r1, [pc, #32]	; (8000590 <SCH_Update+0xa8>)
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	440b      	add	r3, r1
 8000574:	3304      	adds	r3, #4
 8000576:	601a      	str	r2, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	3301      	adds	r3, #1
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b31      	cmp	r3, #49	; 0x31
 8000582:	d9ba      	bls.n	80004fa <SCH_Update+0x12>
        }
    }
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	08002f48 	.word	0x08002f48
 8000590:	20000034 	.word	0x20000034

08000594 <SCH_Add_Task>:


uint8_t SCH_Add_Task(void (* pFunction)(), const uint32_t DELAY, const uint32_t PERIOD) {
 8000594:	b480      	push	{r7}
 8000596:	b087      	sub	sp, #28
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
    uint8_t Index = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	75fb      	strb	r3, [r7, #23]
    // First find a gap in the array (if there is one)
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80005a4:	e002      	b.n	80005ac <SCH_Add_Task+0x18>
        Index++;
 80005a6:	7dfb      	ldrb	r3, [r7, #23]
 80005a8:	3301      	adds	r3, #1
 80005aa:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <SCH_Add_Task+0x7c>)
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	4413      	add	r3, r2
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <SCH_Add_Task+0x2c>
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	2b31      	cmp	r3, #49	; 0x31
 80005be:	d9f2      	bls.n	80005a6 <SCH_Add_Task+0x12>
    }
    if (Index == SCH_MAX_TASKS) {// Have we reached the end of the list?
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	2b32      	cmp	r3, #50	; 0x32
 80005c4:	d101      	bne.n	80005ca <SCH_Add_Task+0x36>
        // Task list is full, Set the global error variable
        return SCH_MAX_TASKS; // Also return an error code
 80005c6:	2332      	movs	r3, #50	; 0x32
 80005c8:	e01b      	b.n	8000602 <SCH_Add_Task+0x6e>
   }
    // If we're here, there is a space in the task array
    SCH_tasks_G[Index].pTask = pFunction;
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <SCH_Add_Task+0x7c>)
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	4413      	add	r3, r2
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY;
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <SCH_Add_Task+0x7c>)
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	4413      	add	r3, r2
 80005de:	3304      	adds	r3, #4
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD;
 80005e4:	7dfb      	ldrb	r3, [r7, #23]
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <SCH_Add_Task+0x7c>)
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4413      	add	r3, r2
 80005ec:	3308      	adds	r3, #8
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <SCH_Add_Task+0x7c>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	330c      	adds	r3, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
    return Index; // return position of task (to allow later deletion)
 8000600:	7dfb      	ldrb	r3, [r7, #23]
}
 8000602:	4618      	mov	r0, r3
 8000604:	371c      	adds	r7, #28
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000034 	.word	0x20000034

08000614 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
    uint8_t Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e02b      	b.n	8000678 <SCH_Dispatch_Tasks+0x64>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <SCH_Dispatch_Tasks+0x74>)
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	330c      	adds	r3, #12
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d020      	beq.n	8000672 <SCH_Dispatch_Tasks+0x5e>
           (*SCH_tasks_G[Index].pTask)(); // Run the task
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <SCH_Dispatch_Tasks+0x74>)
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	4413      	add	r3, r2
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4798      	blx	r3
           SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <SCH_Dispatch_Tasks+0x74>)
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	4413      	add	r3, r2
 8000644:	330c      	adds	r3, #12
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	3a01      	subs	r2, #1
 800064c:	b2d1      	uxtb	r1, r2
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <SCH_Dispatch_Tasks+0x74>)
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	4413      	add	r3, r2
 8000654:	330c      	adds	r3, #12
 8000656:	460a      	mov	r2, r1
 8000658:	701a      	strb	r2, [r3, #0]
          // Periodic tasks will automatically run again
          // - if this is a 'one shot' task, remove it from the array
          if (SCH_tasks_G[Index].Period == 0) SCH_Delete_Task(Index);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <SCH_Dispatch_Tasks+0x74>)
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	4413      	add	r3, r2
 8000662:	3308      	adds	r3, #8
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d103      	bne.n	8000672 <SCH_Dispatch_Tasks+0x5e>
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f80d 	bl	800068c <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	3301      	adds	r3, #1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b31      	cmp	r3, #49	; 0x31
 800067c:	d9d0      	bls.n	8000620 <SCH_Dispatch_Tasks+0xc>
      }
   }
//   SCH_Report_Status(); // Report system status
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000034 	.word	0x20000034

0800068c <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint8_t taskIndex) {
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_code  = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]
	if(taskIndex < SCH_MAX_TASKS){
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b31      	cmp	r3, #49	; 0x31
 800069e:	d826      	bhi.n	80006ee <SCH_Delete_Task+0x62>
		if (SCH_tasks_G[taskIndex].pTask == 0) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <SCH_Delete_Task+0x70>)
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	4413      	add	r3, r2
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <SCH_Delete_Task+0x28>
			Return_code = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e001      	b.n	80006b8 <SCH_Delete_Task+0x2c>
		} else {
			Return_code = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
		}
		SCH_tasks_G[taskIndex].pTask = 0x0000;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <SCH_Delete_Task+0x70>)
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	4413      	add	r3, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskIndex].Delay = 0;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <SCH_Delete_Task+0x70>)
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	4413      	add	r3, r2
 80006cc:	3304      	adds	r3, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskIndex].Period = 0;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <SCH_Delete_Task+0x70>)
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	4413      	add	r3, r2
 80006da:	3308      	adds	r3, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskIndex].RunMe = 0;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <SCH_Delete_Task+0x70>)
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4413      	add	r3, r2
 80006e8:	330c      	adds	r3, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	}
	  return Return_code; // return status
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	20000034 	.word	0x20000034

08000700 <SystemClock_Config>:
 *      Author: thodo
 */
#include "app_system_clock_config.h"

void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fc06 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xb4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xb4>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xb4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <SystemClock_Config+0xb8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <SystemClock_Config+0xb8>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <SystemClock_Config+0xb8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fed1 	bl	8001518 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800077c:	f000 f9d8 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f92c 	bl	80019f8 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007a6:	f000 f9c3 	bl	8000b30 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <Timer_Init>:

/* Prescaler declaration */
uint32_t uwPrescalerValue = 0;


void Timer_Init(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <Timer_Init+0x68>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a18      	ldr	r2, [pc, #96]	; (8000828 <Timer_Init+0x6c>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	0b5b      	lsrs	r3, r3, #13
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <Timer_Init+0x70>)
 80007d0:	6013      	str	r3, [r2, #0]

	  /* Set TIMx instance */
	  htim3.Instance = TIM3;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <Timer_Init+0x74>)
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <Timer_Init+0x78>)
 80007d6:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = (SystemCoreClock/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  htim3.Init.Period            = 100 - 1;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <Timer_Init+0x74>)
 80007da:	2263      	movs	r2, #99	; 0x63
 80007dc:	60da      	str	r2, [r3, #12]
	  htim3.Init.Prescaler         = uwPrescalerValue;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <Timer_Init+0x70>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <Timer_Init+0x74>)
 80007e4:	6053      	str	r3, [r2, #4]
	  htim3.Init.ClockDivision     = 0;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <Timer_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
	  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <Timer_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
	  htim3.Init.RepetitionCounter = 0;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <Timer_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <Timer_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <Timer_Init+0x74>)
 8000800:	f001 fac6 	bl	8001d90 <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <Timer_Init+0x52>
	  {
	    /* Initialization Error */
	    Error_Handler();
 800080a:	f000 f991 	bl	8000b30 <Error_Handler>
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <Timer_Init+0x74>)
 8000810:	f001 fae9 	bl	8001de6 <HAL_TIM_Base_Start_IT>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <Timer_Init+0x62>
	  {
	    /* Starting Error */
	    Error_Handler();
 800081a:	f000 f989 	bl	8000b30 <Error_Handler>
	  }
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000004 	.word	0x20000004
 8000828:	d1b71759 	.word	0xd1b71759
 800082c:	2000002c 	.word	0x2000002c
 8000830:	20000354 	.word	0x20000354
 8000834:	40000400 	.word	0x40000400

08000838 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000840:	f7ff fe52 	bl	80004e8 <SCH_Update>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <UART_SIM7600_Init>:
__IO ITStatus UartTransmitReady = SET;
__IO ITStatus UartReceiveReady = RESET;


void UART_SIM7600_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <UART_SIM7600_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <UART_SIM7600_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <UART_SIM7600_Init+0x50>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <UART_SIM7600_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <UART_SIM7600_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <UART_SIM7600_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <UART_SIM7600_Init+0x50>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <UART_SIM7600_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <UART_SIM7600_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <UART_SIM7600_Init+0x50>)
 8000884:	f001 fc98 	bl	80021b8 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <UART_SIM7600_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f94f 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  Setup_Receive_IT();
 8000892:	f000 f87f 	bl	8000994 <Setup_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000594 	.word	0x20000594
 80008a0:	40011000 	.word	0x40011000

080008a4 <UART_485_Init>:
  * @param None
  * @retval None
  */

void UART_485_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart6.Instance = USART6;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <UART_485_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <UART_485_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <UART_485_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <UART_485_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <UART_485_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <UART_485_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <UART_485_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <UART_485_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <UART_485_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <UART_485_Init+0x4c>)
 80008dc:	f001 fc6c 	bl	80021b8 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <UART_485_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f923 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200006e0 	.word	0x200006e0
 80008f4:	40011400 	.word	0x40011400

080008f8 <UART_DEBUG_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void UART_DEBUG_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <UART_DEBUG_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <UART_DEBUG_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <UART_DEBUG_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <UART_DEBUG_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <UART_DEBUG_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <UART_DEBUG_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <UART_DEBUG_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <UART_DEBUG_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <UART_DEBUG_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <UART_DEBUG_Init+0x4c>)
 8000930:	f001 fc42 	bl	80021b8 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <UART_DEBUG_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f8f9 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000720 	.word	0x20000720
 8000948:	40004400 	.word	0x40004400

0800094c <UART_DEBUG_Transmit>:

void UART_DEBUG_Transmit(uint8_t *buffer){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	while(!UartTransmitReady);
 8000954:	bf00      	nop
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <UART_DEBUG_Transmit+0x40>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0fa      	beq.n	8000956 <UART_DEBUG_Transmit+0xa>
	if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)buffer, strlen(buffer))!= HAL_OK){
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fc39 	bl	80001d8 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29b      	uxth	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <UART_DEBUG_Transmit+0x44>)
 8000970:	f001 fc6f 	bl	8002252 <HAL_UART_Transmit_IT>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <UART_DEBUG_Transmit+0x32>
		Error_Handler();
 800097a:	f000 f8d9 	bl	8000b30 <Error_Handler>
	}
	UartTransmitReady = RESET;
 800097e:	4b03      	ldr	r3, [pc, #12]	; (800098c <UART_DEBUG_Transmit+0x40>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	20000720 	.word	0x20000720

08000994 <Setup_Receive_IT>:
	UartTransmitReady = RESET;
}



void Setup_Receive_IT(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&huart1, &temp, 1)!= HAL_OK){
 8000998:	2201      	movs	r2, #1
 800099a:	4905      	ldr	r1, [pc, #20]	; (80009b0 <Setup_Receive_IT+0x1c>)
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <Setup_Receive_IT+0x20>)
 800099e:	f001 fc9d 	bl	80022dc <HAL_UART_Receive_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <Setup_Receive_IT+0x18>
		Error_Handler();
 80009a8:	f000 f8c2 	bl	8000b30 <Error_Handler>
	}
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000493 	.word	0x20000493
 80009b4:	20000594 	.word	0x20000594

080009b8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_UART_RxCpltCallback+0x54>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d11c      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x4c>
		aUART_RxBuffer[receiveBufferIndexHead] = temp;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_UART_RxCpltCallback+0x58>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_UART_RxCpltCallback+0x5c>)
 80009d2:	7819      	ldrb	r1, [r3, #0]
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_UART_RxCpltCallback+0x60>)
 80009d6:	5499      	strb	r1, [r3, r2]
		receiveBufferIndexHead = (receiveBufferIndexHead + 1) % RXBUFFERSIZE;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_UART_RxCpltCallback+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_UART_RxCpltCallback+0x64>)
 80009e0:	fb83 1302 	smull	r1, r3, r3, r2
 80009e4:	4413      	add	r3, r2
 80009e6:	11d9      	asrs	r1, r3, #7
 80009e8:	17d3      	asrs	r3, r2, #31
 80009ea:	1ac9      	subs	r1, r1, r3
 80009ec:	460b      	mov	r3, r1
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	1ad1      	subs	r1, r2, r3
 80009f4:	b2ca      	uxtb	r2, r1
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_UART_RxCpltCallback+0x58>)
 80009f8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	4905      	ldr	r1, [pc, #20]	; (8000a14 <HAL_UART_RxCpltCallback+0x5c>)
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <HAL_UART_RxCpltCallback+0x68>)
 8000a00:	f001 fc6c 	bl	80022dc <HAL_UART_Receive_IT>
	}
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	20000030 	.word	0x20000030
 8000a14:	20000493 	.word	0x20000493
 8000a18:	20000494 	.word	0x20000494
 8000a1c:	80808081 	.word	0x80808081
 8000a20:	20000594 	.word	0x20000594

08000a24 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <HAL_UART_TxCpltCallback+0x1c>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000000 	.word	0x20000000

08000a44 <Led_Control>:
void Led_Init();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Led_Control(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	UART_DEBUG_Transmit("In Led Control\r\n");
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <Led_Control+0x18>)
 8000a4a:	f7ff ff7f 	bl	800094c <UART_DEBUG_Transmit>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <Led_Control+0x1c>)
 8000a52:	f000 fd45 	bl	80014e0 <HAL_GPIO_TogglePin>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	08002f4c 	.word	0x08002f4c
 8000a60:	40020000 	.word	0x40020000

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fa12 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f7ff fe48 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f812 	bl	8000a98 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  UART_DEBUG_Init();
 8000a74:	f7ff ff40 	bl	80008f8 <UART_DEBUG_Init>
  UART_SIM7600_Init();
 8000a78:	f7ff fee8 	bl	800084c <UART_SIM7600_Init>
  UART_485_Init();
 8000a7c:	f7ff ff12 	bl	80008a4 <UART_485_Init>
  Timer_Init();
 8000a80:	f7ff fe9c 	bl	80007bc <Timer_Init>
  SCH_Add_Task(Led_Control, 0, 100);
 8000a84:	2264      	movs	r2, #100	; 0x64
 8000a86:	2100      	movs	r1, #0
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <main+0x30>)
 8000a8a:	f7ff fd83 	bl	8000594 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8000a8e:	f7ff fdc1 	bl	8000614 <SCH_Dispatch_Tasks>
 8000a92:	e7fc      	b.n	8000a8e <main+0x2a>
 8000a94:	08000a45 	.word	0x08000a45

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_GPIO_Init+0x90>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b02:	2320      	movs	r3, #32
 8000b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0x94>)
 8000b1a:	f000 fb5f 	bl	80011dc <HAL_GPIO_Init>

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <Error_Handler+0x6>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_TIM_Base_MspInit+0x48>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d115      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	201d      	movs	r0, #29
 8000bbc:	f000 fab5 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bc0:	201d      	movs	r0, #29
 8000bc2:	f000 face 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40000400 	.word	0x40000400
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a57      	ldr	r2, [pc, #348]	; (8000d54 <HAL_UART_MspInit+0x17c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d135      	bne.n	8000c66 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a55      	ldr	r2, [pc, #340]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a4e      	ldr	r2, [pc, #312]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c44:	2307      	movs	r3, #7
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4843      	ldr	r0, [pc, #268]	; (8000d5c <HAL_UART_MspInit+0x184>)
 8000c50:	f000 fac4 	bl	80011dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2025      	movs	r0, #37	; 0x25
 8000c5a:	f000 fa66 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c5e:	2025      	movs	r0, #37	; 0x25
 8000c60:	f000 fa7f 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c64:	e072      	b.n	8000d4c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <HAL_UART_MspInit+0x188>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d134      	bne.n	8000cda <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a37      	ldr	r2, [pc, #220]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a30      	ldr	r2, [pc, #192]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4826      	ldr	r0, [pc, #152]	; (8000d5c <HAL_UART_MspInit+0x184>)
 8000cc4:	f000 fa8a 	bl	80011dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2026      	movs	r0, #38	; 0x26
 8000cce:	f000 fa2c 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cd2:	2026      	movs	r0, #38	; 0x26
 8000cd4:	f000 fa45 	bl	8001162 <HAL_NVIC_EnableIRQ>
}
 8000cd8:	e038      	b.n	8000d4c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d133      	bne.n	8000d4c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cec:	4a1a      	ldr	r2, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1c:	23c0      	movs	r3, #192	; 0xc0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000d38:	f000 fa50 	bl	80011dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2047      	movs	r0, #71	; 0x47
 8000d42:	f000 f9f2 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d46:	2047      	movs	r0, #71	; 0x47
 8000d48:	f000 fa0b 	bl	8001162 <HAL_NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3738      	adds	r7, #56	; 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40011000 	.word	0x40011000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40011400 	.word	0x40011400
 8000d68:	40020800 	.word	0x40020800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8bc 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM3_IRQHandler+0x10>)
 8000dc6:	f001 f832 	bl	8001e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000354 	.word	0x20000354

08000dd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <USART1_IRQHandler+0x10>)
 8000dda:	f001 fad5 	bl	8002388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000594 	.word	0x20000594

08000de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART2_IRQHandler+0x10>)
 8000dee:	f001 facb 	bl	8002388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000720 	.word	0x20000720

08000dfc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USART6_IRQHandler+0x10>)
 8000e02:	f001 fac1 	bl	8002388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200006e0 	.word	0x200006e0

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SystemInit+0x28>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <SystemInit+0x28>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SystemInit+0x28>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
  ldr  r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e66:	f7ff ffd3 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f002 f835 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fdf9 	bl	8000a64 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e78:	08002f88 	.word	0x08002f88
  ldr  r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e80:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e84:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e88:	20000764 	.word	0x20000764

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f92b 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fe38 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f943 	bl	800117e <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f90b 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	2000000c 	.word	0x2000000c
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000760 	.word	0x20000760

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000760 	.word	0x20000760

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d004      	beq.n	80011b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e00c      	b.n	80011ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2205      	movs	r2, #5
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e159      	b.n	80014ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8148 	bne.w	80014a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d00b      	beq.n	8001236 <HAL_GPIO_Init+0x5a>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122a:	2b11      	cmp	r3, #17
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b12      	cmp	r3, #18
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0xfc>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b12      	cmp	r3, #18
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a2 	beq.w	80014a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <HAL_GPIO_Init+0x2e4>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a55      	ldr	r2, [pc, #340]	; (80014c0 <HAL_GPIO_Init+0x2e4>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b53      	ldr	r3, [pc, #332]	; (80014c0 <HAL_GPIO_Init+0x2e4>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a48      	ldr	r2, [pc, #288]	; (80014c8 <HAL_GPIO_Init+0x2ec>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d019      	beq.n	80013de <HAL_GPIO_Init+0x202>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1fe>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <HAL_GPIO_Init+0x2f4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <HAL_GPIO_Init+0x2f8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1f6>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <HAL_GPIO_Init+0x2fc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1f2>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013de:	2300      	movs	r3, #0
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f0:	4934      	ldr	r1, [pc, #208]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001422:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_GPIO_Init+0x300>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144c:	4a23      	ldr	r2, [pc, #140]	; (80014dc <HAL_GPIO_Init+0x300>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_GPIO_Init+0x300>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_GPIO_Init+0x300>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	f67f aea2 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	3724      	adds	r7, #36	; 0x24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	401a      	ands	r2, r3
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d104      	bne.n	8001504 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001502:	e002      	b.n	800150a <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e25b      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	4ba3      	ldr	r3, [pc, #652]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b9d      	ldr	r3, [pc, #628]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e236      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x74>
 800157e:	4b91      	ldr	r3, [pc, #580]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a90      	ldr	r2, [pc, #576]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a8a      	ldr	r2, [pc, #552]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a87      	ldr	r2, [pc, #540]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 80015b0:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a83      	ldr	r2, [pc, #524]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a80      	ldr	r2, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fcc4 	bl	8000f5c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fcc0 	bl	8000f5c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1fb      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fcb0 	bl	8000f5c <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fcac 	bl	8000f5c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1e7      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b6c      	ldr	r3, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1bb      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4952      	ldr	r1, [pc, #328]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_OscConfig+0x2b0>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fc65 	bl	8000f5c <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fc61 	bl	8000f5c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e19c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4940      	ldr	r1, [pc, #256]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_RCC_OscConfig+0x2b0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc44 	bl	8000f5c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc40 	bl	8000f5c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e17b      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d030      	beq.n	8001764 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_RCC_OscConfig+0x2b4>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fc24 	bl	8000f5c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fc20 	bl	8000f5c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e15b      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x200>
 8001736:	e015      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x2b4>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fc0d 	bl	8000f5c <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fc09 	bl	8000f5c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e144      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80a0 	beq.w	80018b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x2b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d121      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_RCC_OscConfig+0x2b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_RCC_OscConfig+0x2b8>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fbcf 	bl	8000f5c <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	e011      	b.n	80017e6 <HAL_RCC_OscConfig+0x2ce>
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	42470000 	.word	0x42470000
 80017cc:	42470e80 	.word	0x42470e80
 80017d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d4:	f7ff fbc2 	bl	8000f5c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0fd      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x4d4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x2f0>
 80017fa:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	4a7c      	ldr	r2, [pc, #496]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	; 0x70
 8001806:	e01c      	b.n	8001842 <HAL_RCC_OscConfig+0x32a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x312>
 8001810:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a76      	ldr	r2, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a73      	ldr	r2, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x32a>
 800182a:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a70      	ldr	r2, [pc, #448]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a6d      	ldr	r2, [pc, #436]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d015      	beq.n	8001876 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fb87 	bl	8000f5c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fb83 	bl	8000f5c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0bc      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ee      	beq.n	8001852 <HAL_RCC_OscConfig+0x33a>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff fb71 	bl	8000f5c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fb6d 	bl	8000f5c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0a6      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b52      	ldr	r3, [pc, #328]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8092 	beq.w	80019e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d05c      	beq.n	8001982 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d141      	bne.n	8001954 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_RCC_OscConfig+0x4dc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb41 	bl	8000f5c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fb3d 	bl	8000f5c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e078      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	019b      	lsls	r3, r3, #6
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	061b      	lsls	r3, r3, #24
 8001920:	4933      	ldr	r1, [pc, #204]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x4dc>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fb16 	bl	8000f5c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fb12 	bl	8000f5c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e04d      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x41c>
 8001952:	e045      	b.n	80019e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x4dc>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff faff 	bl	8000f5c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fafb 	bl	8000f5c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e036      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x44a>
 8001980:	e02e      	b.n	80019e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e029      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11c      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d115      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019bc:	4293      	cmp	r3, r2
 80019be:	d10d      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40007000 	.word	0x40007000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470060 	.word	0x42470060

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cc      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d90c      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d044      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e067      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fa38 	bl	8000f5c <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa34 	bl	8000f5c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20c      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4601      	mov	r1, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	fa21 f303 	lsr.w	r3, r1, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f998 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08002f60 	.word	0x08002f60
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bda:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d007      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d008      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x38>
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 808d 	bne.w	8001d0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001bf2:	60bb      	str	r3, [r7, #8]
       break;
 8001bf4:	e08c      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bf8:	60bb      	str	r3, [r7, #8]
      break;
 8001bfa:	e089      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d023      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	f04f 0400 	mov.w	r4, #0
 8001c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	ea03 0501 	and.w	r5, r3, r1
 8001c28:	ea04 0602 	and.w	r6, r4, r2
 8001c2c:	4a3d      	ldr	r2, [pc, #244]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c2e:	fb02 f106 	mul.w	r1, r2, r6
 8001c32:	2200      	movs	r2, #0
 8001c34:	fb02 f205 	mul.w	r2, r2, r5
 8001c38:	440a      	add	r2, r1
 8001c3a:	493a      	ldr	r1, [pc, #232]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c3c:	fba5 0101 	umull	r0, r1, r5, r1
 8001c40:	1853      	adds	r3, r2, r1
 8001c42:	4619      	mov	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f04f 0400 	mov.w	r4, #0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	f7fe facb 	bl	80001e8 <__aeabi_uldivmod>
 8001c52:	4603      	mov	r3, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e049      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	099b      	lsrs	r3, r3, #6
 8001c60:	f04f 0400 	mov.w	r4, #0
 8001c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	ea03 0501 	and.w	r5, r3, r1
 8001c70:	ea04 0602 	and.w	r6, r4, r2
 8001c74:	4629      	mov	r1, r5
 8001c76:	4632      	mov	r2, r6
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	f04f 0400 	mov.w	r4, #0
 8001c80:	0154      	lsls	r4, r2, #5
 8001c82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c86:	014b      	lsls	r3, r1, #5
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	1b49      	subs	r1, r1, r5
 8001c8e:	eb62 0206 	sbc.w	r2, r2, r6
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	f04f 0400 	mov.w	r4, #0
 8001c9a:	0194      	lsls	r4, r2, #6
 8001c9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ca0:	018b      	lsls	r3, r1, #6
 8001ca2:	1a5b      	subs	r3, r3, r1
 8001ca4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	00e2      	lsls	r2, r4, #3
 8001cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cb6:	00d9      	lsls	r1, r3, #3
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4614      	mov	r4, r2
 8001cbc:	195b      	adds	r3, r3, r5
 8001cbe:	eb44 0406 	adc.w	r4, r4, r6
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	02a2      	lsls	r2, r4, #10
 8001ccc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cd0:	0299      	lsls	r1, r3, #10
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4621      	mov	r1, r4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f04f 0400 	mov.w	r4, #0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	f7fe fa80 	bl	80001e8 <__aeabi_uldivmod>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	460c      	mov	r4, r1
 8001cec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	60bb      	str	r3, [r7, #8]
      break;
 8001d08:	e002      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d0c:	60bb      	str	r3, [r7, #8]
      break;
 8001d0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d10:	68bb      	ldr	r3, [r7, #8]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	00f42400 	.word	0x00f42400
 8001d24:	017d7840 	.word	0x017d7840

08001d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d44:	f7ff fff0 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d48:	4601      	mov	r1, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0a9b      	lsrs	r3, r3, #10
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	08002f70 	.word	0x08002f70

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d6c:	f7ff ffdc 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d70:	4601      	mov	r1, r0
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0b5b      	lsrs	r3, r3, #13
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08002f70 	.word	0x08002f70

08001d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e01d      	b.n	8001dde <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fee6 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f000 f95e 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b06      	cmp	r3, #6
 8001e0e:	d007      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d122      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d11b      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f06f 0202 	mvn.w	r2, #2
 8001e5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f8ee 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001e76:	e005      	b.n	8001e84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8e0 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8f1 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d122      	bne.n	8001ede <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d11b      	bne.n	8001ede <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0204 	mvn.w	r2, #4
 8001eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8c4 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001eca:	e005      	b.n	8001ed8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8b6 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8c7 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d122      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11b      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f06f 0208 	mvn.w	r2, #8
 8001f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2204      	movs	r2, #4
 8001f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f89a 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001f1e:	e005      	b.n	8001f2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f88c 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f89d 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d122      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d11b      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0210 	mvn.w	r2, #16
 8001f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f870 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001f72:	e005      	b.n	8001f80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f862 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f873 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10e      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0201 	mvn.w	r2, #1
 8001faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fc43 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d10e      	bne.n	8001fde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d107      	bne.n	8001fde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8e3 	bl	80021a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d10e      	bne.n	800200a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d107      	bne.n	800200a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f838 	bl	800207a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b20      	cmp	r3, #32
 8002016:	d10e      	bne.n	8002036 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b20      	cmp	r3, #32
 8002024:	d107      	bne.n	8002036 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0220 	mvn.w	r2, #32
 800202e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8ad 	bl	8002190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a34      	ldr	r2, [pc, #208]	; (8002174 <TIM_Base_SetConfig+0xe4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00f      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d00b      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a31      	ldr	r2, [pc, #196]	; (8002178 <TIM_Base_SetConfig+0xe8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a30      	ldr	r2, [pc, #192]	; (800217c <TIM_Base_SetConfig+0xec>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d003      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <TIM_Base_SetConfig+0xf0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <TIM_Base_SetConfig+0xe4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01b      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d017      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <TIM_Base_SetConfig+0xe8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a21      	ldr	r2, [pc, #132]	; (800217c <TIM_Base_SetConfig+0xec>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00f      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a20      	ldr	r2, [pc, #128]	; (8002180 <TIM_Base_SetConfig+0xf0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00b      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <TIM_Base_SetConfig+0xf4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <TIM_Base_SetConfig+0xf8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d003      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <TIM_Base_SetConfig+0xfc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d108      	bne.n	800212c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <TIM_Base_SetConfig+0xe4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d103      	bne.n	8002160 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	615a      	str	r2, [r3, #20]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40014000 	.word	0x40014000
 8002188:	40014400 	.word	0x40014400
 800218c:	40014800 	.word	0x40014800

08002190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e03f      	b.n	800224a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fcfa 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 faef 	bl	80027e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	4613      	mov	r3, r2
 800225e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b20      	cmp	r3, #32
 800226a:	d130      	bne.n	80022ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_UART_Transmit_IT+0x26>
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e029      	b.n	80022d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_UART_Transmit_IT+0x38>
 8002286:	2302      	movs	r3, #2
 8002288:	e022      	b.n	80022d0 <HAL_UART_Transmit_IT+0x7e>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	88fa      	ldrh	r2, [r7, #6]
 80022a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2221      	movs	r2, #33	; 0x21
 80022ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d140      	bne.n	8002378 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_UART_Receive_IT+0x26>
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e039      	b.n	800237a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_UART_Receive_IT+0x38>
 8002310:	2302      	movs	r3, #2
 8002312:	e032      	b.n	800237a <HAL_UART_Receive_IT+0x9e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	88fa      	ldrh	r2, [r7, #6]
 800232c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2222      	movs	r2, #34	; 0x22
 8002338:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002352:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0220 	orr.w	r2, r2, #32
 8002372:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_UART_IRQHandler+0x52>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f982 	bl	80026dc <UART_Receive_IT>
      return;
 80023d8:	e0d1      	b.n	800257e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80b0 	beq.w	8002542 <HAL_UART_IRQHandler+0x1ba>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_UART_IRQHandler+0x70>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80a5 	beq.w	8002542 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_UART_IRQHandler+0x90>
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_UART_IRQHandler+0xb0>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	f043 0202 	orr.w	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_UART_IRQHandler+0xd0>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00f      	beq.n	8002482 <HAL_UART_IRQHandler+0xfa>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <HAL_UART_IRQHandler+0xee>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	f043 0208 	orr.w	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d078      	beq.n	800257c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_UART_IRQHandler+0x11c>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f91c 	bl	80026dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_UART_IRQHandler+0x144>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d031      	beq.n	8002530 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f865 	bl	800259c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d123      	bne.n	8002528 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_UART_IRQHandler+0x1fc>)
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fe46 	bl	8001196 <HAL_DMA_Abort_IT>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800251a:	4610      	mov	r0, r2
 800251c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251e:	e00e      	b.n	800253e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f831 	bl	8002588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002526:	e00a      	b.n	800253e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f82d 	bl	8002588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252e:	e006      	b.n	800253e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f829 	bl	8002588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800253c:	e01e      	b.n	800257c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253e:	bf00      	nop
    return;
 8002540:	e01c      	b.n	800257c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_UART_IRQHandler+0x1d6>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f852 	bl	8002600 <UART_Transmit_IT>
    return;
 800255c:	e00f      	b.n	800257e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_UART_IRQHandler+0x1f6>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f89a 	bl	80026ac <UART_EndTransmit_IT>
    return;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <HAL_UART_IRQHandler+0x1f6>
    return;
 800257c:	bf00      	nop
  }
}
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	080025d9 	.word	0x080025d9

08002588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff ffc8 	bl	8002588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b21      	cmp	r3, #33	; 0x21
 8002612:	d144      	bne.n	800269e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261c:	d11a      	bne.n	8002654 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002632:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	1c9a      	adds	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]
 8002646:	e00e      	b.n	8002666 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]
 8002652:	e008      	b.n	8002666 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	1c59      	adds	r1, r3, #1
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6211      	str	r1, [r2, #32]
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4619      	mov	r1, r3
 8002674:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002688:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002698:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7fe f9a9 	bl	8000a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b22      	cmp	r3, #34	; 0x22
 80026ee:	d171      	bne.n	80027d4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f8:	d123      	bne.n	8002742 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10e      	bne.n	8002726 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	1c9a      	adds	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
 8002724:	e029      	b.n	800277a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	b29b      	uxth	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
 8002740:	e01b      	b.n	800277a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6858      	ldr	r0, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6291      	str	r1, [r2, #40]	; 0x28
 800275a:	b2c2      	uxtb	r2, r0
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e00c      	b.n	800277a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	1c58      	adds	r0, r3, #1
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	6288      	str	r0, [r1, #40]	; 0x28
 8002772:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29b      	uxth	r3, r3
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4619      	mov	r1, r3
 8002788:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800278a:	2b00      	cmp	r3, #0
 800278c:	d120      	bne.n	80027d0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0220 	bic.w	r2, r2, #32
 800279c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe f8f6 	bl	80009b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e002      	b.n	80027d6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002822:	f023 030c 	bic.w	r3, r3, #12
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	68f9      	ldr	r1, [r7, #12]
 800282c:	430b      	orrs	r3, r1
 800282e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284e:	f040 818b 	bne.w	8002b68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4ac1      	ldr	r2, [pc, #772]	; (8002b5c <UART_SetConfig+0x37c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d005      	beq.n	8002868 <UART_SetConfig+0x88>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4abf      	ldr	r2, [pc, #764]	; (8002b60 <UART_SetConfig+0x380>)
 8002862:	4293      	cmp	r3, r2
 8002864:	f040 80bd 	bne.w	80029e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002868:	f7ff fa7e 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 800286c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	461d      	mov	r5, r3
 8002872:	f04f 0600 	mov.w	r6, #0
 8002876:	46a8      	mov	r8, r5
 8002878:	46b1      	mov	r9, r6
 800287a:	eb18 0308 	adds.w	r3, r8, r8
 800287e:	eb49 0409 	adc.w	r4, r9, r9
 8002882:	4698      	mov	r8, r3
 8002884:	46a1      	mov	r9, r4
 8002886:	eb18 0805 	adds.w	r8, r8, r5
 800288a:	eb49 0906 	adc.w	r9, r9, r6
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800289a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800289e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028a2:	4688      	mov	r8, r1
 80028a4:	4691      	mov	r9, r2
 80028a6:	eb18 0005 	adds.w	r0, r8, r5
 80028aa:	eb49 0106 	adc.w	r1, r9, r6
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	461d      	mov	r5, r3
 80028b4:	f04f 0600 	mov.w	r6, #0
 80028b8:	196b      	adds	r3, r5, r5
 80028ba:	eb46 0406 	adc.w	r4, r6, r6
 80028be:	461a      	mov	r2, r3
 80028c0:	4623      	mov	r3, r4
 80028c2:	f7fd fc91 	bl	80001e8 <__aeabi_uldivmod>
 80028c6:	4603      	mov	r3, r0
 80028c8:	460c      	mov	r4, r1
 80028ca:	461a      	mov	r2, r3
 80028cc:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <UART_SetConfig+0x384>)
 80028ce:	fba3 2302 	umull	r2, r3, r3, r2
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	461d      	mov	r5, r3
 80028dc:	f04f 0600 	mov.w	r6, #0
 80028e0:	46a9      	mov	r9, r5
 80028e2:	46b2      	mov	sl, r6
 80028e4:	eb19 0309 	adds.w	r3, r9, r9
 80028e8:	eb4a 040a 	adc.w	r4, sl, sl
 80028ec:	4699      	mov	r9, r3
 80028ee:	46a2      	mov	sl, r4
 80028f0:	eb19 0905 	adds.w	r9, r9, r5
 80028f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800290c:	4689      	mov	r9, r1
 800290e:	4692      	mov	sl, r2
 8002910:	eb19 0005 	adds.w	r0, r9, r5
 8002914:	eb4a 0106 	adc.w	r1, sl, r6
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	461d      	mov	r5, r3
 800291e:	f04f 0600 	mov.w	r6, #0
 8002922:	196b      	adds	r3, r5, r5
 8002924:	eb46 0406 	adc.w	r4, r6, r6
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	f7fd fc5c 	bl	80001e8 <__aeabi_uldivmod>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	461a      	mov	r2, r3
 8002936:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <UART_SetConfig+0x384>)
 8002938:	fba3 1302 	umull	r1, r3, r3, r2
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	2164      	movs	r1, #100	; 0x64
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	3332      	adds	r3, #50	; 0x32
 800294a:	4a86      	ldr	r2, [pc, #536]	; (8002b64 <UART_SetConfig+0x384>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002958:	4498      	add	r8, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	461d      	mov	r5, r3
 800295e:	f04f 0600 	mov.w	r6, #0
 8002962:	46a9      	mov	r9, r5
 8002964:	46b2      	mov	sl, r6
 8002966:	eb19 0309 	adds.w	r3, r9, r9
 800296a:	eb4a 040a 	adc.w	r4, sl, sl
 800296e:	4699      	mov	r9, r3
 8002970:	46a2      	mov	sl, r4
 8002972:	eb19 0905 	adds.w	r9, r9, r5
 8002976:	eb4a 0a06 	adc.w	sl, sl, r6
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800298a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800298e:	4689      	mov	r9, r1
 8002990:	4692      	mov	sl, r2
 8002992:	eb19 0005 	adds.w	r0, r9, r5
 8002996:	eb4a 0106 	adc.w	r1, sl, r6
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	461d      	mov	r5, r3
 80029a0:	f04f 0600 	mov.w	r6, #0
 80029a4:	196b      	adds	r3, r5, r5
 80029a6:	eb46 0406 	adc.w	r4, r6, r6
 80029aa:	461a      	mov	r2, r3
 80029ac:	4623      	mov	r3, r4
 80029ae:	f7fd fc1b 	bl	80001e8 <__aeabi_uldivmod>
 80029b2:	4603      	mov	r3, r0
 80029b4:	460c      	mov	r4, r1
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <UART_SetConfig+0x384>)
 80029ba:	fba3 1302 	umull	r1, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2164      	movs	r1, #100	; 0x64
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	3332      	adds	r3, #50	; 0x32
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <UART_SetConfig+0x384>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	f003 0207 	and.w	r2, r3, #7
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4442      	add	r2, r8
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e26f      	b.n	8002ec2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7ff f9ad 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 80029e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	461d      	mov	r5, r3
 80029ec:	f04f 0600 	mov.w	r6, #0
 80029f0:	46a8      	mov	r8, r5
 80029f2:	46b1      	mov	r9, r6
 80029f4:	eb18 0308 	adds.w	r3, r8, r8
 80029f8:	eb49 0409 	adc.w	r4, r9, r9
 80029fc:	4698      	mov	r8, r3
 80029fe:	46a1      	mov	r9, r4
 8002a00:	eb18 0805 	adds.w	r8, r8, r5
 8002a04:	eb49 0906 	adc.w	r9, r9, r6
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a1c:	4688      	mov	r8, r1
 8002a1e:	4691      	mov	r9, r2
 8002a20:	eb18 0005 	adds.w	r0, r8, r5
 8002a24:	eb49 0106 	adc.w	r1, r9, r6
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	461d      	mov	r5, r3
 8002a2e:	f04f 0600 	mov.w	r6, #0
 8002a32:	196b      	adds	r3, r5, r5
 8002a34:	eb46 0406 	adc.w	r4, r6, r6
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	f7fd fbd4 	bl	80001e8 <__aeabi_uldivmod>
 8002a40:	4603      	mov	r3, r0
 8002a42:	460c      	mov	r4, r1
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <UART_SetConfig+0x384>)
 8002a48:	fba3 2302 	umull	r2, r3, r3, r2
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	461d      	mov	r5, r3
 8002a56:	f04f 0600 	mov.w	r6, #0
 8002a5a:	46a9      	mov	r9, r5
 8002a5c:	46b2      	mov	sl, r6
 8002a5e:	eb19 0309 	adds.w	r3, r9, r9
 8002a62:	eb4a 040a 	adc.w	r4, sl, sl
 8002a66:	4699      	mov	r9, r3
 8002a68:	46a2      	mov	sl, r4
 8002a6a:	eb19 0905 	adds.w	r9, r9, r5
 8002a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a86:	4689      	mov	r9, r1
 8002a88:	4692      	mov	sl, r2
 8002a8a:	eb19 0005 	adds.w	r0, r9, r5
 8002a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	461d      	mov	r5, r3
 8002a98:	f04f 0600 	mov.w	r6, #0
 8002a9c:	196b      	adds	r3, r5, r5
 8002a9e:	eb46 0406 	adc.w	r4, r6, r6
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	f7fd fb9f 	bl	80001e8 <__aeabi_uldivmod>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	460c      	mov	r4, r1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <UART_SetConfig+0x384>)
 8002ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2164      	movs	r1, #100	; 0x64
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <UART_SetConfig+0x384>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ad2:	4498      	add	r8, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	f04f 0600 	mov.w	r6, #0
 8002adc:	46a9      	mov	r9, r5
 8002ade:	46b2      	mov	sl, r6
 8002ae0:	eb19 0309 	adds.w	r3, r9, r9
 8002ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ae8:	4699      	mov	r9, r3
 8002aea:	46a2      	mov	sl, r4
 8002aec:	eb19 0905 	adds.w	r9, r9, r5
 8002af0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b08:	4689      	mov	r9, r1
 8002b0a:	4692      	mov	sl, r2
 8002b0c:	eb19 0005 	adds.w	r0, r9, r5
 8002b10:	eb4a 0106 	adc.w	r1, sl, r6
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	461d      	mov	r5, r3
 8002b1a:	f04f 0600 	mov.w	r6, #0
 8002b1e:	196b      	adds	r3, r5, r5
 8002b20:	eb46 0406 	adc.w	r4, r6, r6
 8002b24:	461a      	mov	r2, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	f7fd fb5e 	bl	80001e8 <__aeabi_uldivmod>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <UART_SetConfig+0x384>)
 8002b34:	fba3 1302 	umull	r1, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	2164      	movs	r1, #100	; 0x64
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	3332      	adds	r3, #50	; 0x32
 8002b46:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <UART_SetConfig+0x384>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	f003 0207 	and.w	r2, r3, #7
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4442      	add	r2, r8
 8002b58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b5a:	e1b2      	b.n	8002ec2 <UART_SetConfig+0x6e2>
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4ad7      	ldr	r2, [pc, #860]	; (8002ecc <UART_SetConfig+0x6ec>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d005      	beq.n	8002b7e <UART_SetConfig+0x39e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4ad6      	ldr	r2, [pc, #856]	; (8002ed0 <UART_SetConfig+0x6f0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f040 80d1 	bne.w	8002d20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b7e:	f7ff f8f3 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8002b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	469a      	mov	sl, r3
 8002b88:	f04f 0b00 	mov.w	fp, #0
 8002b8c:	46d0      	mov	r8, sl
 8002b8e:	46d9      	mov	r9, fp
 8002b90:	eb18 0308 	adds.w	r3, r8, r8
 8002b94:	eb49 0409 	adc.w	r4, r9, r9
 8002b98:	4698      	mov	r8, r3
 8002b9a:	46a1      	mov	r9, r4
 8002b9c:	eb18 080a 	adds.w	r8, r8, sl
 8002ba0:	eb49 090b 	adc.w	r9, r9, fp
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bb8:	4688      	mov	r8, r1
 8002bba:	4691      	mov	r9, r2
 8002bbc:	eb1a 0508 	adds.w	r5, sl, r8
 8002bc0:	eb4b 0609 	adc.w	r6, fp, r9
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0094      	lsls	r4, r2, #2
 8002bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bdc:	008b      	lsls	r3, r1, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	4628      	mov	r0, r5
 8002be4:	4631      	mov	r1, r6
 8002be6:	f7fd faff 	bl	80001e8 <__aeabi_uldivmod>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4bb8      	ldr	r3, [pc, #736]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	469b      	mov	fp, r3
 8002c00:	f04f 0c00 	mov.w	ip, #0
 8002c04:	46d9      	mov	r9, fp
 8002c06:	46e2      	mov	sl, ip
 8002c08:	eb19 0309 	adds.w	r3, r9, r9
 8002c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c10:	4699      	mov	r9, r3
 8002c12:	46a2      	mov	sl, r4
 8002c14:	eb19 090b 	adds.w	r9, r9, fp
 8002c18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c30:	4689      	mov	r9, r1
 8002c32:	4692      	mov	sl, r2
 8002c34:	eb1b 0509 	adds.w	r5, fp, r9
 8002c38:	eb4c 060a 	adc.w	r6, ip, sl
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	f04f 0400 	mov.w	r4, #0
 8002c4e:	0094      	lsls	r4, r2, #2
 8002c50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c54:	008b      	lsls	r3, r1, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	4623      	mov	r3, r4
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	4631      	mov	r1, r6
 8002c5e:	f7fd fac3 	bl	80001e8 <__aeabi_uldivmod>
 8002c62:	4603      	mov	r3, r0
 8002c64:	460c      	mov	r4, r1
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b9a      	ldr	r3, [pc, #616]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	3332      	adds	r3, #50	; 0x32
 8002c7c:	4a95      	ldr	r2, [pc, #596]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c88:	4498      	add	r8, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	469b      	mov	fp, r3
 8002c8e:	f04f 0c00 	mov.w	ip, #0
 8002c92:	46d9      	mov	r9, fp
 8002c94:	46e2      	mov	sl, ip
 8002c96:	eb19 0309 	adds.w	r3, r9, r9
 8002c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	46a2      	mov	sl, r4
 8002ca2:	eb19 090b 	adds.w	r9, r9, fp
 8002ca6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cbe:	4689      	mov	r9, r1
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	eb1b 0509 	adds.w	r5, fp, r9
 8002cc6:	eb4c 060a 	adc.w	r6, ip, sl
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	f04f 0400 	mov.w	r4, #0
 8002cdc:	0094      	lsls	r4, r2, #2
 8002cde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ce2:	008b      	lsls	r3, r1, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	4628      	mov	r0, r5
 8002cea:	4631      	mov	r1, r6
 8002cec:	f7fd fa7c 	bl	80001e8 <__aeabi_uldivmod>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2164      	movs	r1, #100	; 0x64
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	3332      	adds	r3, #50	; 0x32
 8002d0a:	4a72      	ldr	r2, [pc, #456]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4442      	add	r2, r8
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	e0d0      	b.n	8002ec2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d20:	f7ff f80e 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002d24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	469a      	mov	sl, r3
 8002d2a:	f04f 0b00 	mov.w	fp, #0
 8002d2e:	46d0      	mov	r8, sl
 8002d30:	46d9      	mov	r9, fp
 8002d32:	eb18 0308 	adds.w	r3, r8, r8
 8002d36:	eb49 0409 	adc.w	r4, r9, r9
 8002d3a:	4698      	mov	r8, r3
 8002d3c:	46a1      	mov	r9, r4
 8002d3e:	eb18 080a 	adds.w	r8, r8, sl
 8002d42:	eb49 090b 	adc.w	r9, r9, fp
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d5a:	4688      	mov	r8, r1
 8002d5c:	4691      	mov	r9, r2
 8002d5e:	eb1a 0508 	adds.w	r5, sl, r8
 8002d62:	eb4b 0609 	adc.w	r6, fp, r9
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0094      	lsls	r4, r2, #2
 8002d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	4631      	mov	r1, r6
 8002d88:	f7fd fa2e 	bl	80001e8 <__aeabi_uldivmod>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002d94:	fba3 2302 	umull	r2, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	469b      	mov	fp, r3
 8002da2:	f04f 0c00 	mov.w	ip, #0
 8002da6:	46d9      	mov	r9, fp
 8002da8:	46e2      	mov	sl, ip
 8002daa:	eb19 0309 	adds.w	r3, r9, r9
 8002dae:	eb4a 040a 	adc.w	r4, sl, sl
 8002db2:	4699      	mov	r9, r3
 8002db4:	46a2      	mov	sl, r4
 8002db6:	eb19 090b 	adds.w	r9, r9, fp
 8002dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dd2:	4689      	mov	r9, r1
 8002dd4:	4692      	mov	sl, r2
 8002dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8002dda:	eb4c 060a 	adc.w	r6, ip, sl
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4619      	mov	r1, r3
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	0094      	lsls	r4, r2, #2
 8002df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002df6:	008b      	lsls	r3, r1, #2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	4631      	mov	r1, r6
 8002e00:	f7fd f9f2 	bl	80001e8 <__aeabi_uldivmod>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	2164      	movs	r1, #100	; 0x64
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	3332      	adds	r3, #50	; 0x32
 8002e1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2a:	4498      	add	r8, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	469b      	mov	fp, r3
 8002e30:	f04f 0c00 	mov.w	ip, #0
 8002e34:	46d9      	mov	r9, fp
 8002e36:	46e2      	mov	sl, ip
 8002e38:	eb19 0309 	adds.w	r3, r9, r9
 8002e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e40:	4699      	mov	r9, r3
 8002e42:	46a2      	mov	sl, r4
 8002e44:	eb19 090b 	adds.w	r9, r9, fp
 8002e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e60:	4689      	mov	r9, r1
 8002e62:	4692      	mov	sl, r2
 8002e64:	eb1b 0509 	adds.w	r5, fp, r9
 8002e68:	eb4c 060a 	adc.w	r6, ip, sl
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f04f 0400 	mov.w	r4, #0
 8002e7e:	0094      	lsls	r4, r2, #2
 8002e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e84:	008b      	lsls	r3, r1, #2
 8002e86:	461a      	mov	r2, r3
 8002e88:	4623      	mov	r3, r4
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	4631      	mov	r1, r6
 8002e8e:	f7fd f9ab 	bl	80001e8 <__aeabi_uldivmod>
 8002e92:	4603      	mov	r3, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2164      	movs	r1, #100	; 0x64
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	3332      	adds	r3, #50	; 0x32
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4442      	add	r2, r8
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	e7ff      	b.n	8002ec2 <UART_SetConfig+0x6e2>
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ecc:	40011000 	.word	0x40011000
 8002ed0:	40011400 	.word	0x40011400
 8002ed4:	51eb851f 	.word	0x51eb851f

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	4e0d      	ldr	r6, [pc, #52]	; (8002f10 <__libc_init_array+0x38>)
 8002edc:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ede:	1ba4      	subs	r4, r4, r6
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	42a5      	cmp	r5, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	4e0b      	ldr	r6, [pc, #44]	; (8002f18 <__libc_init_array+0x40>)
 8002eea:	4c0c      	ldr	r4, [pc, #48]	; (8002f1c <__libc_init_array+0x44>)
 8002eec:	f000 f820 	bl	8002f30 <_init>
 8002ef0:	1ba4      	subs	r4, r4, r6
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	42a5      	cmp	r5, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f00:	4798      	blx	r3
 8002f02:	3501      	adds	r5, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f0a:	4798      	blx	r3
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08002f80 	.word	0x08002f80
 8002f14:	08002f80 	.word	0x08002f80
 8002f18:	08002f80 	.word	0x08002f80
 8002f1c:	08002f84 	.word	0x08002f84

08002f20 <memset>:
 8002f20:	4402      	add	r2, r0
 8002f22:	4603      	mov	r3, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr
