
Locker-v2-411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000502c  08014f18  08014f18  00024f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f44  08019f44  00030690  2**0
                  CONTENTS
  4 .ARM          00000008  08019f44  08019f44  00029f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f4c  08019f4c  00030690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f4c  08019f4c  00029f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f50  08019f50  00029f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000690  20000000  08019f54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee0  20000690  0801a5e4  00030690  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002570  0801a5e4  00032570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030690  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203e4  00000000  00000000  000306c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e05  00000000  00000000  00050aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  000558b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001358  00000000  00000000  00056e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b1b5  00000000  00000000  00058158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001624e  00000000  00000000  0007330d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094212  00000000  00000000  0008955b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d76d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005970  00000000  00000000  0011d7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00123158  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0012317c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000690 	.word	0x20000690
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014efc 	.word	0x08014efc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000694 	.word	0x20000694
 80001dc:	08014efc 	.word	0x08014efc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MQTT_Start>:
//		{MQTT_UNSUBCRIBE			, 		MQTT_UnSubcribe			}
//};

// Default config for MQTT Client

void MQTT_Start(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	Clear_Reiceive_Buffer();
 8000594:	f000 fd44 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit("AT+CMQTTSTART\r\n");
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <MQTT_Start+0x18>)
 800059a:	f000 fbf5 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 800059e:	f000 fd61 	bl	8001064 <Wait_For_Respone>
	return;
 80005a2:	bf00      	nop
}
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	08014f18 	.word	0x08014f18

080005ac <MQTT_Accquire_Client>:
	UART_SIM7600_Transmit("AT+CMQTTSTOP\r\n");
	Wait_For_Respone();
	return;
}

void MQTT_Accquire_Client(MQTTClient_TypeDef* _mqtt_client){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	sprintf(atcommand,"AT+CMQTTACCQ=%d,%s\r\n",_mqtt_client->client_index,_mqtt_client->clientid);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	4907      	ldr	r1, [pc, #28]	; (80005dc <MQTT_Accquire_Client+0x30>)
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <MQTT_Accquire_Client+0x34>)
 80005c2:	f014 f915 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 80005c6:	f000 fd2b 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(atcommand);
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MQTT_Accquire_Client+0x34>)
 80005cc:	f000 fbdc 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 80005d0:	f000 fd48 	bl	8001064 <Wait_For_Respone>
	return;
 80005d4:	bf00      	nop
}
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	08014f38 	.word	0x08014f38
 80005e0:	20000784 	.word	0x20000784

080005e4 <MQTT_Set_Ssl>:
	UART_SIM7600_Transmit(atcommand);
	Wait_For_Respone();
	return;
}

void MQTT_Set_Ssl(MQTTClient_TypeDef* _mqtt_client,SSL_Typedef *ssl){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	sprintf(atcommand,"AT+CMQTTSSLCFG=%d,%d\r\n",0,ssl->ssl_ctx_index);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <MQTT_Set_Ssl+0x30>)
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <MQTT_Set_Ssl+0x34>)
 80005f8:	f014 f8fa 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 80005fc:	f000 fd10 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(atcommand);
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MQTT_Set_Ssl+0x34>)
 8000602:	f000 fbc1 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 8000606:	f000 fd2d 	bl	8001064 <Wait_For_Respone>
	return;
 800060a:	bf00      	nop
}
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08014f64 	.word	0x08014f64
 8000618:	20000784 	.word	0x20000784

0800061c <MQTT_Connect>:
			break;
	}
	return;
}

void MQTT_Connect(MQTTClient_TypeDef *mqtt_client){
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
	sprintf(atcommand,"AT+CMQTTCONNECT=%d,%s,%d,%d,%s,%s\r\n",mqtt_client->client_index,mqtt_client->server_address,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461d      	mov	r5, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6899      	ldr	r1, [r3, #8]
			mqtt_client->keepAlive,mqtt_client->clean_session,mqtt_client->user,mqtt_client->pass);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7d5b      	ldrb	r3, [r3, #21]
	sprintf(atcommand,"AT+CMQTTCONNECT=%d,%s,%d,%d,%s,%s\r\n",mqtt_client->client_index,mqtt_client->server_address,
 8000632:	4618      	mov	r0, r3
			mqtt_client->keepAlive,mqtt_client->clean_session,mqtt_client->user,mqtt_client->pass);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	7d1b      	ldrb	r3, [r3, #20]
	sprintf(atcommand,"AT+CMQTTCONNECT=%d,%s,%d,%d,%s,%s\r\n",mqtt_client->client_index,mqtt_client->server_address,
 8000638:	461c      	mov	r4, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6912      	ldr	r2, [r2, #16]
 8000642:	9203      	str	r2, [sp, #12]
 8000644:	9302      	str	r3, [sp, #8]
 8000646:	9401      	str	r4, [sp, #4]
 8000648:	9000      	str	r0, [sp, #0]
 800064a:	460b      	mov	r3, r1
 800064c:	462a      	mov	r2, r5
 800064e:	4907      	ldr	r1, [pc, #28]	; (800066c <MQTT_Connect+0x50>)
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <MQTT_Connect+0x54>)
 8000652:	f014 f8cd 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000656:	f000 fce3 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(atcommand);
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MQTT_Connect+0x54>)
 800065c:	f000 fb94 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 8000660:	f000 fd00 	bl	8001064 <Wait_For_Respone>
	return;
 8000664:	bf00      	nop
}
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	08014fb4 	.word	0x08014fb4
 8000670:	20000784 	.word	0x20000784

08000674 <MQTT_Topic>:
	UART_SIM7600_Transmit(atcommand);
	Wait_For_Respone();
	return;
}

void MQTT_Topic(MQTTClient_TypeDef *mqtt_client,  char * topic){
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	sprintf(atcommand,"AT+CMQTTTOPIC=%d,%d\r\n",mqtt_client->client_index,strlen(topic));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461c      	mov	r4, r3
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff fdab 	bl	80001e0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	4622      	mov	r2, r4
 800068e:	4910      	ldr	r1, [pc, #64]	; (80006d0 <MQTT_Topic+0x5c>)
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <MQTT_Topic+0x60>)
 8000692:	f014 f8ad 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000696:	f000 fcc3 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(atcommand);
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <MQTT_Topic+0x60>)
 800069c:	f000 fb74 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 80006a0:	f000 fce0 	bl	8001064 <Wait_For_Respone>
	switch (Get_AT_Result().at_result) {
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fd2b 	bl	8001104 <Get_AT_Result>
 80006ae:	7b3b      	ldrb	r3, [r7, #12]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d000      	beq.n	80006b6 <MQTT_Topic+0x42>
			Clear_Reiceive_Buffer();
			UART_SIM7600_Transmit(topic);
			Wait_For_Respone();
			break;
		default:
			break;
 80006b4:	e007      	b.n	80006c6 <MQTT_Topic+0x52>
			Clear_Reiceive_Buffer();
 80006b6:	f000 fcb3 	bl	8001020 <Clear_Reiceive_Buffer>
			UART_SIM7600_Transmit(topic);
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	f000 fb64 	bl	8000d88 <UART_SIM7600_Transmit>
			Wait_For_Respone();
 80006c0:	f000 fcd0 	bl	8001064 <Wait_For_Respone>
			break;
 80006c4:	bf00      	nop
	}
	return;
 80006c6:	bf00      	nop
}
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08014ff0 	.word	0x08014ff0
 80006d4:	20000784 	.word	0x20000784

080006d8 <MQTT_Payload>:

void MQTT_Payload(MQTTClient_TypeDef *mqtt_client , char * payload){
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	sprintf(atcommand,"AT+CMQTTPAYLOAD=%d,%d\r\n",mqtt_client->client_index,strlen(payload));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461c      	mov	r4, r3
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f7ff fd79 	bl	80001e0 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4622      	mov	r2, r4
 80006f2:	490f      	ldr	r1, [pc, #60]	; (8000730 <MQTT_Payload+0x58>)
 80006f4:	480f      	ldr	r0, [pc, #60]	; (8000734 <MQTT_Payload+0x5c>)
 80006f6:	f014 f87b 	bl	80147f0 <siprintf>
	UART_SIM7600_Transmit(atcommand);
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <MQTT_Payload+0x5c>)
 80006fc:	f000 fb44 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 8000700:	f000 fcb0 	bl	8001064 <Wait_For_Respone>
	switch (Get_AT_Result().at_result) {
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fcfb 	bl	8001104 <Get_AT_Result>
 800070e:	7b3b      	ldrb	r3, [r7, #12]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d000      	beq.n	8000716 <MQTT_Payload+0x3e>
			Clear_Reiceive_Buffer();
			UART_SIM7600_Transmit(payload);
			Wait_For_Respone();
			break;
		default:
			break;
 8000714:	e007      	b.n	8000726 <MQTT_Payload+0x4e>
			Clear_Reiceive_Buffer();
 8000716:	f000 fc83 	bl	8001020 <Clear_Reiceive_Buffer>
			UART_SIM7600_Transmit(payload);
 800071a:	6838      	ldr	r0, [r7, #0]
 800071c:	f000 fb34 	bl	8000d88 <UART_SIM7600_Transmit>
			Wait_For_Respone();
 8000720:	f000 fca0 	bl	8001064 <Wait_For_Respone>
			break;
 8000724:	bf00      	nop
	}
	return;
 8000726:	bf00      	nop
}
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	bf00      	nop
 8000730:	08015008 	.word	0x08015008
 8000734:	20000784 	.word	0x20000784

08000738 <MQTT_Publish>:

void MQTT_Publish(MQTTClient_TypeDef *mqtt_client , MESSAGE_TypeDef *message ){
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b087      	sub	sp, #28
 800073c:	af04      	add	r7, sp, #16
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

	MQTT_Topic(mqtt_client, message->topic);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff93 	bl	8000674 <MQTT_Topic>
	MQTT_Payload(mqtt_client, message->payload);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4619      	mov	r1, r3
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ffbf 	bl	80006d8 <MQTT_Payload>
	sprintf(atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client->client_index,message->qos,
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	7a1b      	ldrb	r3, [r3, #8]
 8000764:	461c      	mov	r4, r3
				message->pub_timeout, message->retain, message->dup);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client->client_index,message->qos,
 800076a:	461a      	mov	r2, r3
				message->pub_timeout, message->retain, message->dup);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client->client_index,message->qos,
 8000770:	4619      	mov	r1, r3
				message->pub_timeout, message->retain, message->dup);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	7adb      	ldrb	r3, [r3, #11]
	sprintf(atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client->client_index,message->qos,
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	4623      	mov	r3, r4
 800077e:	4602      	mov	r2, r0
 8000780:	4907      	ldr	r1, [pc, #28]	; (80007a0 <MQTT_Publish+0x68>)
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MQTT_Publish+0x6c>)
 8000784:	f014 f834 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000788:	f000 fc4a 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(atcommand);
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MQTT_Publish+0x6c>)
 800078e:	f000 fafb 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 8000792:	f000 fc67 	bl	8001064 <Wait_For_Respone>
	return;
 8000796:	bf00      	nop
}
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	bf00      	nop
 80007a0:	08015020 	.word	0x08015020
 80007a4:	20000784 	.word	0x20000784

080007a8 <SSL_Init>:
		.ca_file ="\"ca_file.pem\"",
		.clientcert_file="\"clientcert_file.pem\"",
		.clientkey_file="\"clientkey_file.pem\""
};

void SSL_Init(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
	char test[10];
	MX_MBEDTLS_Init();
 80007ae:	f002 fd93 	bl	80032d8 <MX_MBEDTLS_Init>
	SSL_Cert_List();
 80007b2:	f000 f8d7 	bl	8000964 <SSL_Cert_List>
	SSL_Cert_Down("\"ca_file.pem\"", cacert);
 80007b6:	4909      	ldr	r1, [pc, #36]	; (80007dc <SSL_Init+0x34>)
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <SSL_Init+0x38>)
 80007ba:	f000 f8a5 	bl	8000908 <SSL_Cert_Down>
	SSL_Cert_Down("\"clientcert_file.pem\"", clientcert);
 80007be:	4909      	ldr	r1, [pc, #36]	; (80007e4 <SSL_Init+0x3c>)
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <SSL_Init+0x40>)
 80007c2:	f000 f8a1 	bl	8000908 <SSL_Cert_Down>
	SSL_Cert_Down("\"clientkey_file.pem\"", clientkey);
 80007c6:	4909      	ldr	r1, [pc, #36]	; (80007ec <SSL_Init+0x44>)
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <SSL_Init+0x48>)
 80007ca:	f000 f89d 	bl	8000908 <SSL_Cert_Down>
	SSL_Configure_Ctx(&ssl_config);
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <SSL_Init+0x4c>)
 80007d0:	f000 f812 	bl	80007f8 <SSL_Configure_Ctx>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	080150b0 	.word	0x080150b0
 80007e4:	200002b0 	.word	0x200002b0
 80007e8:	080150c0 	.word	0x080150c0
 80007ec:	200004f8 	.word	0x200004f8
 80007f0:	080150d8 	.word	0x080150d8
 80007f4:	200005e4 	.word	0x200005e4

080007f8 <SSL_Configure_Ctx>:

void SSL_Configure_Ctx(SSL_Typedef *ssl){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	sprintf(ssl_at_command,"AT+CSSLCFG=\"sslversion\",%d,%d\r\n",ssl->ssl_ctx_index,(uint8_t)ssl->sslversion);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	4937      	ldr	r1, [pc, #220]	; (80008e8 <SSL_Configure_Ctx+0xf0>)
 800080c:	4837      	ldr	r0, [pc, #220]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 800080e:	f013 ffef 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000812:	f000 fc05 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 8000816:	4835      	ldr	r0, [pc, #212]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 8000818:	f000 fab6 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 800081c:	f000 fc22 	bl	8001064 <Wait_For_Respone>

	sprintf(ssl_at_command,"AT+CSSLCFG=\"authmode\",%d,%d\r\n",ssl->ssl_ctx_index,(uint8_t)ssl->authmode);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	4931      	ldr	r1, [pc, #196]	; (80008f0 <SSL_Configure_Ctx+0xf8>)
 800082c:	482f      	ldr	r0, [pc, #188]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 800082e:	f013 ffdf 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000832:	f000 fbf5 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 8000836:	482d      	ldr	r0, [pc, #180]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 8000838:	f000 faa6 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 800083c:	f000 fc12 	bl	8001064 <Wait_For_Respone>

	sprintf(ssl_at_command,"AT+CSSLCFG=\"ignorelocaltime\",%d,%d\r\n",ssl->ssl_ctx_index,(uint8_t)ssl->ignorelocaltime);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	78db      	ldrb	r3, [r3, #3]
 800084a:	492a      	ldr	r1, [pc, #168]	; (80008f4 <SSL_Configure_Ctx+0xfc>)
 800084c:	4827      	ldr	r0, [pc, #156]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 800084e:	f013 ffcf 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000852:	f000 fbe5 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 8000858:	f000 fa96 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 800085c:	f000 fc02 	bl	8001064 <Wait_For_Respone>

	sprintf(ssl_at_command,"AT+CSSLCFG=\"negotiatetime\",%d,%d\r\n",ssl->ssl_ctx_index,(uint8_t)ssl->negotiatetime);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	4923      	ldr	r1, [pc, #140]	; (80008f8 <SSL_Configure_Ctx+0x100>)
 800086c:	481f      	ldr	r0, [pc, #124]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 800086e:	f013 ffbf 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000872:	f000 fbd5 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 8000876:	481d      	ldr	r0, [pc, #116]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 8000878:	f000 fa86 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 800087c:	f000 fbf2 	bl	8001064 <Wait_For_Respone>

	sprintf(ssl_at_command,"AT+CSSLCFG=\"cacert\",%d,%s\r\n",ssl->ssl_ctx_index,ssl->ca_file);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	491c      	ldr	r1, [pc, #112]	; (80008fc <SSL_Configure_Ctx+0x104>)
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 800088e:	f013 ffaf 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000892:	f000 fbc5 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 8000896:	4815      	ldr	r0, [pc, #84]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 8000898:	f000 fa76 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 800089c:	f000 fbe2 	bl	8001064 <Wait_For_Respone>

	sprintf(ssl_at_command,"AT+CSSLCFG=\"clientcert\",%d,%s\r\n",ssl->ssl_ctx_index,ssl->clientcert_file);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	4915      	ldr	r1, [pc, #84]	; (8000900 <SSL_Configure_Ctx+0x108>)
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 80008ae:	f013 ff9f 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 80008b2:	f000 fbb5 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 80008b8:	f000 fa66 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 80008bc:	f000 fbd2 	bl	8001064 <Wait_For_Respone>

	sprintf(ssl_at_command,"AT+CSSLCFG=\"clientkey\",%d,%s\r\n",ssl->ssl_ctx_index,ssl->clientkey_file);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	490e      	ldr	r1, [pc, #56]	; (8000904 <SSL_Configure_Ctx+0x10c>)
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 80008ce:	f013 ff8f 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 80008d2:	f000 fba5 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <SSL_Configure_Ctx+0xf4>)
 80008d8:	f000 fa56 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 80008dc:	f000 fbc2 	bl	8001064 <Wait_For_Respone>
	return;
 80008e0:	bf00      	nop
}
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	080150f0 	.word	0x080150f0
 80008ec:	20000a04 	.word	0x20000a04
 80008f0:	08015110 	.word	0x08015110
 80008f4:	08015130 	.word	0x08015130
 80008f8:	08015158 	.word	0x08015158
 80008fc:	0801517c 	.word	0x0801517c
 8000900:	08015198 	.word	0x08015198
 8000904:	080151b8 	.word	0x080151b8

08000908 <SSL_Cert_Down>:

void SSL_Cert_Down(char *filename , char *certificate_data ){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	sprintf(ssl_at_command,"AT+CCERTDOWN=%s,%d\r\n",filename,strlen(certificate_data));
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f7ff fc64 	bl	80001e0 <strlen>
 8000918:	4603      	mov	r3, r0
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	490f      	ldr	r1, [pc, #60]	; (800095c <SSL_Cert_Down+0x54>)
 800091e:	4810      	ldr	r0, [pc, #64]	; (8000960 <SSL_Cert_Down+0x58>)
 8000920:	f013 ff66 	bl	80147f0 <siprintf>
	Clear_Reiceive_Buffer();
 8000924:	f000 fb7c 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit(ssl_at_command);
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <SSL_Cert_Down+0x58>)
 800092a:	f000 fa2d 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 800092e:	f000 fb99 	bl	8001064 <Wait_For_Respone>
	switch (Get_AT_Result().at_result) {
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fbe4 	bl	8001104 <Get_AT_Result>
 800093c:	7b3b      	ldrb	r3, [r7, #12]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d000      	beq.n	8000944 <SSL_Cert_Down+0x3c>
			Clear_Reiceive_Buffer();
			UART_SIM7600_Transmit(certificate_data);
			Wait_For_Respone();
			break;
		default:
			break;
 8000942:	e007      	b.n	8000954 <SSL_Cert_Down+0x4c>
			Clear_Reiceive_Buffer();
 8000944:	f000 fb6c 	bl	8001020 <Clear_Reiceive_Buffer>
			UART_SIM7600_Transmit(certificate_data);
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f000 fa1d 	bl	8000d88 <UART_SIM7600_Transmit>
			Wait_For_Respone();
 800094e:	f000 fb89 	bl	8001064 <Wait_For_Respone>
			break;
 8000952:	bf00      	nop
	}
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	080151d8 	.word	0x080151d8
 8000960:	20000a04 	.word	0x20000a04

08000964 <SSL_Cert_List>:

void SSL_Cert_List(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	Clear_Reiceive_Buffer();
 8000968:	f000 fb5a 	bl	8001020 <Clear_Reiceive_Buffer>
	UART_SIM7600_Transmit("AT+CCERTLIST\r\n");
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <SSL_Cert_List+0x18>)
 800096e:	f000 fa0b 	bl	8000d88 <UART_SIM7600_Transmit>
	Wait_For_Respone();
 8000972:	f000 fb77 	bl	8001064 <Wait_For_Respone>
	return;
 8000976:	bf00      	nop

}
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	080151f0 	.word	0x080151f0

08000980 <Get_Ssl_Config>:
	UART_SIM7600_Transmit(ssl_at_command);
	Wait_For_Respone();
	return;
}

SSL_Typedef Get_Ssl_Config(){
 8000980:	b4b0      	push	{r4, r5, r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	return ssl_config;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <Get_Ssl_Config+0x24>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	6023      	str	r3, [r4, #0]
}
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bcb0      	pop	{r4, r5, r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200005e4 	.word	0x200005e4

080009a8 <mbedtlsError>:

static char* mbedtlsError(int errnum) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    static char buffer[200];
    mbedtls_strerror(errnum, buffer, sizeof(buffer));
 80009b0:	22c8      	movs	r2, #200	; 0xc8
 80009b2:	4904      	ldr	r1, [pc, #16]	; (80009c4 <mbedtlsError+0x1c>)
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f00e f8cf 	bl	800eb58 <mbedtls_strerror>
    return buffer;
 80009ba:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <mbedtlsError+0x1c>)
} // mbedtlsError
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200006ac 	.word	0x200006ac

080009c8 <createGCPJWT>:


char* createGCPJWT(const char* projectId, uint32_t iat ,uint32_t exp ) {
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	f5ad 5dea 	sub.w	sp, sp, #7488	; 0x1d40
 80009ce:	b086      	sub	sp, #24
 80009d0:	af04      	add	r7, sp, #16
 80009d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d6:	3b1c      	subs	r3, #28
 80009d8:	6018      	str	r0, [r3, #0]
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	6019      	str	r1, [r3, #0]
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	3b04      	subs	r3, #4
 80009e6:	601a      	str	r2, [r3, #0]
	char _rc[100];
    char base64Header[100];
    const char header[] = "{\"alg\":\"RS256\",\"typ\":\"JWT\"}";
 80009e8:	4bc5      	ldr	r3, [pc, #788]	; (8000d00 <createGCPJWT+0x338>)
 80009ea:	f507 54e2 	add.w	r4, r7, #7232	; 0x1c40
 80009ee:	f104 041c 	add.w	r4, r4, #28
 80009f2:	461d      	mov	r5, r3
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    base64url_encode(
 8000a00:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000a04:	f103 031c 	add.w	r3, r3, #28
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fbe9 	bl	80001e0 <strlen>
 8000a0e:	4601      	mov	r1, r0
 8000a10:	f507 52e3 	add.w	r2, r7, #7264	; 0x1c60
 8000a14:	f102 0218 	add.w	r2, r2, #24
 8000a18:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000a1c:	f103 031c 	add.w	r3, r3, #28
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fc61 	bl	80032e8 <base64url_encode>
        (unsigned char *)header,   // Data to encode.
        strlen(header),            // Length of data to encode.
        base64Header);             // Base64 encoded data.

    char payload[100];
    sprintf(payload, "{\"iat\":%d,\"exp\":%d,\"aud\":\"%s\"}", iat, exp, projectId);
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	f107 0108 	add.w	r1, r7, #8
 8000a30:	f507 50df 	add.w	r0, r7, #7136	; 0x1be0
 8000a34:	f100 0018 	add.w	r0, r0, #24
 8000a38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a3c:	3a1c      	subs	r2, #28
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	9200      	str	r2, [sp, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	680a      	ldr	r2, [r1, #0]
 8000a46:	49af      	ldr	r1, [pc, #700]	; (8000d04 <createGCPJWT+0x33c>)
 8000a48:	f013 fed2 	bl	80147f0 <siprintf>

    char base64Payload[100];
    base64url_encode(
 8000a4c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8000a50:	f103 0318 	add.w	r3, r3, #24
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fbc3 	bl	80001e0 <strlen>
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 8000a60:	f102 0214 	add.w	r2, r2, #20
 8000a64:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8000a68:	f103 0318 	add.w	r3, r3, #24
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fc3b 	bl	80032e8 <base64url_encode>
        (unsigned char *)payload,  // Data to encode.
        strlen(payload),           // Length of data to encode.
        base64Payload);            // Base64 encoded data.

    uint8_t headerAndPayload[800];
    sprintf((char*)headerAndPayload, "%s.%s", base64Header, base64Payload);
 8000a72:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8000a76:	f103 0314 	add.w	r3, r3, #20
 8000a7a:	f507 52e3 	add.w	r2, r7, #7264	; 0x1c60
 8000a7e:	f102 0218 	add.w	r2, r2, #24
 8000a82:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8000a86:	f100 0014 	add.w	r0, r0, #20
 8000a8a:	499f      	ldr	r1, [pc, #636]	; (8000d08 <createGCPJWT+0x340>)
 8000a8c:	f013 feb0 	bl	80147f0 <siprintf>

    // At this point we have created the header and payload parts, converted both to base64 and concatenated them
    // together as a single string.  Now we need to sign them using RSASSA

    mbedtls_pk_context pk_context;
    mbedtls_pk_init(&pk_context);
 8000a90:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8000a94:	f103 030c 	add.w	r3, r3, #12
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00f f8fd 	bl	800fc98 <mbedtls_pk_init>
    int rc = mbedtls_pk_parse_key(&pk_context, clientkey, sizeof(clientkey), NULL, 0);
 8000a9e:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8000aa2:	f100 000c 	add.w	r0, r0, #12
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	22e9      	movs	r2, #233	; 0xe9
 8000aae:	4997      	ldr	r1, [pc, #604]	; (8000d0c <createGCPJWT+0x344>)
 8000ab0:	f00f fdf2 	bl	8010698 <mbedtls_pk_parse_key>
 8000ab4:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000ab8:	f103 0304 	add.w	r3, r3, #4
 8000abc:	6018      	str	r0, [r3, #0]
//    int rc = mbedtls_pk_parse_public_key(&pk_context, clientkey, strlen(clientkey));
    if (rc != 0) {
 8000abe:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000ac2:	f103 0304 	add.w	r3, r3, #4
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d024      	beq.n	8000b16 <createGCPJWT+0x14e>
        sprintf(_rc,"Failed to mbedtls_pk_parse_key: %d (-0x%x): %s\n", rc, -rc, mbedtlsError(rc));
 8000acc:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000ad0:	f103 0304 	add.w	r3, r3, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	425c      	negs	r4, r3
 8000ad8:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000adc:	f103 0304 	add.w	r3, r3, #4
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f7ff ff61 	bl	80009a8 <mbedtlsError>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f507 50e6 	add.w	r0, r7, #7360	; 0x1cc0
 8000aec:	f100 001c 	add.w	r0, r0, #28
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	4623      	mov	r3, r4
 8000af4:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8000af8:	f102 0204 	add.w	r2, r2, #4
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	4984      	ldr	r1, [pc, #528]	; (8000d10 <createGCPJWT+0x348>)
 8000b00:	f013 fe76 	bl	80147f0 <siprintf>
        UART_DEBUG_Transmit(_rc);
 8000b04:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000b08:	f103 031c 	add.w	r3, r3, #28
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fa09 	bl	8000f24 <UART_DEBUG_Transmit>
        return NULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e0ed      	b.n	8000cf2 <createGCPJWT+0x32a>
    }
    uint8_t oBuf[5000];
    mbedtls_entropy_context entropy;
    mbedtls_ctr_drbg_context ctr_drbg;
    mbedtls_ctr_drbg_init(&ctr_drbg);
 8000b16:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000b1a:	3b18      	subs	r3, #24
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 ff72 	bl	8008a06 <mbedtls_ctr_drbg_init>
    mbedtls_entropy_init(&entropy);
 8000b22:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8000b26:	3b18      	subs	r3, #24
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f00d fe4d 	bl	800e7c8 <mbedtls_entropy_init>

    const char* pers="MyEntropy";
 8000b2e:	4b79      	ldr	r3, [pc, #484]	; (8000d14 <createGCPJWT+0x34c>)
 8000b30:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8000b34:	6013      	str	r3, [r2, #0]

    mbedtls_ctr_drbg_seed(
 8000b36:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	f7ff fb50 	bl	80001e0 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8000b46:	3a18      	subs	r2, #24
 8000b48:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8000b4c:	3818      	subs	r0, #24
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4970      	ldr	r1, [pc, #448]	; (8000d18 <createGCPJWT+0x350>)
 8000b58:	f007 ffa4 	bl	8008aa4 <mbedtls_ctr_drbg_seed>
        (const unsigned char*)pers,
        strlen(pers));


    uint8_t digest[32];
    rc = mbedtls_md(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), headerAndPayload, strlen((char*)headerAndPayload), digest);
 8000b5c:	2006      	movs	r0, #6
 8000b5e:	f00e fd6f 	bl	800f640 <mbedtls_md_info_from_type>
 8000b62:	4604      	mov	r4, r0
 8000b64:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8000b68:	f103 0314 	add.w	r3, r3, #20
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fb37 	bl	80001e0 <strlen>
 8000b72:	4602      	mov	r2, r0
 8000b74:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000b78:	3b18      	subs	r3, #24
 8000b7a:	f507 51c3 	add.w	r1, r7, #6240	; 0x1860
 8000b7e:	f101 0114 	add.w	r1, r1, #20
 8000b82:	4620      	mov	r0, r4
 8000b84:	f00e fd88 	bl	800f698 <mbedtls_md>
 8000b88:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000b8c:	f103 0304 	add.w	r3, r3, #4
 8000b90:	6018      	str	r0, [r3, #0]
    if (rc != 0) {
 8000b92:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000b96:	f103 0304 	add.w	r3, r3, #4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d024      	beq.n	8000bea <createGCPJWT+0x222>
    	sprintf(_rc,"Failed to mbedtls_md: %d (-0x%x): %s\n", rc, -rc, mbedtlsError(rc));
 8000ba0:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000ba4:	f103 0304 	add.w	r3, r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	425c      	negs	r4, r3
 8000bac:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000bb0:	f103 0304 	add.w	r3, r3, #4
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	f7ff fef7 	bl	80009a8 <mbedtlsError>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f507 50e6 	add.w	r0, r7, #7360	; 0x1cc0
 8000bc0:	f100 001c 	add.w	r0, r0, #28
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	4623      	mov	r3, r4
 8000bc8:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8000bcc:	f102 0204 	add.w	r2, r2, #4
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	4952      	ldr	r1, [pc, #328]	; (8000d1c <createGCPJWT+0x354>)
 8000bd4:	f013 fe0c 	bl	80147f0 <siprintf>
    	UART_DEBUG_Transmit(_rc);
 8000bd8:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000bdc:	f103 031c 	add.w	r3, r3, #28
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f99f 	bl	8000f24 <UART_DEBUG_Transmit>
        return NULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e083      	b.n	8000cf2 <createGCPJWT+0x32a>
    }

    size_t retSize;
    rc = mbedtls_pk_sign(&pk_context, MBEDTLS_MD_SHA256, digest, sizeof(digest), oBuf, &retSize, mbedtls_ctr_drbg_random, &ctr_drbg);
 8000bea:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8000bee:	3a18      	subs	r2, #24
 8000bf0:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8000bf4:	f100 000c 	add.w	r0, r0, #12
 8000bf8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000bfc:	3b18      	subs	r3, #24
 8000bfe:	9303      	str	r3, [sp, #12]
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <createGCPJWT+0x358>)
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000c08:	3b1c      	subs	r3, #28
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000c10:	3b04      	subs	r3, #4
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2320      	movs	r3, #32
 8000c16:	2106      	movs	r1, #6
 8000c18:	f00f f90e 	bl	800fe38 <mbedtls_pk_sign>
 8000c1c:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000c20:	f103 0304 	add.w	r3, r3, #4
 8000c24:	6018      	str	r0, [r3, #0]
    if (rc != 0) {
 8000c26:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000c2a:	f103 0304 	add.w	r3, r3, #4
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d024      	beq.n	8000c7e <createGCPJWT+0x2b6>
    	sprintf(_rc,"Failed to mbedtls_sign: %d (-0x%x): %s\n", rc, -rc, mbedtlsError(rc));
 8000c34:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000c38:	f103 0304 	add.w	r3, r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	425c      	negs	r4, r3
 8000c40:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8000c44:	f103 0304 	add.w	r3, r3, #4
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	f7ff fead 	bl	80009a8 <mbedtlsError>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f507 50e6 	add.w	r0, r7, #7360	; 0x1cc0
 8000c54:	f100 001c 	add.w	r0, r0, #28
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8000c60:	f102 0204 	add.w	r2, r2, #4
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	492f      	ldr	r1, [pc, #188]	; (8000d24 <createGCPJWT+0x35c>)
 8000c68:	f013 fdc2 	bl	80147f0 <siprintf>
    	UART_DEBUG_Transmit(_rc);
 8000c6c:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 8000c70:	f103 031c 	add.w	r3, r3, #28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f955 	bl	8000f24 <UART_DEBUG_Transmit>
        return NULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e039      	b.n	8000cf2 <createGCPJWT+0x32a>
    }

    char base64Signature[600];
    base64url_encode((unsigned char *)oBuf, retSize, base64Signature);
 8000c7e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000c82:	3b1c      	subs	r3, #28
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c8a:	3a14      	subs	r2, #20
 8000c8c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000c90:	3b04      	subs	r3, #4
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fb28 	bl	80032e8 <base64url_encode>


    output = (char*)malloc(strlen((char*)headerAndPayload) + 1 + strlen((char*)base64Signature) + 1);
 8000c98:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8000c9c:	f103 0314 	add.w	r3, r3, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fa9d 	bl	80001e0 <strlen>
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cac:	3b14      	subs	r3, #20
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fa96 	bl	80001e0 <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4423      	add	r3, r4
 8000cb8:	3302      	adds	r3, #2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f013 fc52 	bl	8014564 <malloc>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <createGCPJWT+0x360>)
 8000cc6:	601a      	str	r2, [r3, #0]

    sprintf(output, "\"%s.%s\"", headerAndPayload, base64Signature);
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <createGCPJWT+0x360>)
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd0:	3b14      	subs	r3, #20
 8000cd2:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8000cd6:	f102 0214 	add.w	r2, r2, #20
 8000cda:	4914      	ldr	r1, [pc, #80]	; (8000d2c <createGCPJWT+0x364>)
 8000cdc:	f013 fd88 	bl	80147f0 <siprintf>

    mbedtls_pk_free(&pk_context);
 8000ce0:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8000ce4:	f103 030c 	add.w	r3, r3, #12
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00e ffe5 	bl	800fcb8 <mbedtls_pk_free>
    return output;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <createGCPJWT+0x360>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f507 57ea 	add.w	r7, r7, #7488	; 0x1d40
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	080152d0 	.word	0x080152d0
 8000d04:	08015214 	.word	0x08015214
 8000d08:	08015234 	.word	0x08015234
 8000d0c:	200004f8 	.word	0x200004f8
 8000d10:	0801523c 	.word	0x0801523c
 8000d14:	0801526c 	.word	0x0801526c
 8000d18:	0800e9e1 	.word	0x0800e9e1
 8000d1c:	08015278 	.word	0x08015278
 8000d20:	08009179 	.word	0x08009179
 8000d24:	080152a0 	.word	0x080152a0
 8000d28:	2000088c 	.word	0x2000088c
 8000d2c:	080152c8 	.word	0x080152c8

08000d30 <UART_SIM7600_Init>:
__IO ITStatus UartTransmitReady = SET;
__IO ITStatus UartReceiveReady = RESET;


void UART_SIM7600_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d36:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <UART_SIM7600_Init+0x54>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <UART_SIM7600_Init+0x50>)
 8000d68:	f001 fc26 	bl	80025b8 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <UART_SIM7600_Init+0x46>
  {
    Error_Handler();
 8000d72:	f000 fb09 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  Setup_Receive_IT();
 8000d76:	f000 f8f9 	bl	8000f6c <Setup_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20002184 	.word	0x20002184
 8000d84:	40011000 	.word	0x40011000

08000d88 <UART_SIM7600_Transmit>:
void UART_SIM7600_Transmit(uint8_t *buffer){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if(strlen(buffer) == 0) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d022      	beq.n	8000dde <UART_SIM7600_Transmit+0x56>
		return;
	} else {
		if (DEBUG){
			while(!UartTransmitReady);
 8000d98:	bf00      	nop
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <UART_SIM7600_Transmit+0x60>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0fa      	beq.n	8000d9a <UART_SIM7600_Transmit+0x12>
			UART_DEBUG_Transmit(buffer);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f8bd 	bl	8000f24 <UART_DEBUG_Transmit>
		}
		while(!UartTransmitReady);
 8000daa:	bf00      	nop
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <UART_SIM7600_Transmit+0x60>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0fa      	beq.n	8000dac <UART_SIM7600_Transmit+0x24>
		if(HAL_UART_Transmit_IT(&huart1, (uint8_t*)buffer, strlen(buffer))!= HAL_OK){
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fa12 	bl	80001e0 <strlen>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <UART_SIM7600_Transmit+0x64>)
 8000dc6:	f001 fc44 	bl	8002652 <HAL_UART_Transmit_IT>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <UART_SIM7600_Transmit+0x4c>
			Error_Handler();
 8000dd0:	f000 fada 	bl	8001388 <Error_Handler>
		}
		UartTransmitReady = RESET;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <UART_SIM7600_Transmit+0x60>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
	}
	return;
 8000dda:	bf00      	nop
 8000ddc:	e000      	b.n	8000de0 <UART_SIM7600_Transmit+0x58>
		return;
 8000dde:	bf00      	nop
}
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200005f8 	.word	0x200005f8
 8000dec:	20002184 	.word	0x20002184

08000df0 <UART_SIM7600_Received_Buffer_Available>:
		UartTransmitReady = RESET;
	}
	return;
}

uint8_t UART_SIM7600_Received_Buffer_Available(void){
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail != receiveBufferIndexHead){
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <UART_SIM7600_Received_Buffer_Available+0x20>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <UART_SIM7600_Received_Buffer_Available+0x24>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d001      	beq.n	8000e04 <UART_SIM7600_Received_Buffer_Available+0x14>
		return 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <UART_SIM7600_Received_Buffer_Available+0x16>
	} else {
		return 0;
 8000e04:	2300      	movs	r3, #0
	}
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20000775 	.word	0x20000775
 8000e14:	20000774 	.word	0x20000774

08000e18 <UART_SIM7600_Read_Received_Buffer>:

uint8_t UART_SIM7600_Read_Received_Buffer(void){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail == receiveBufferIndexHead) return 0xff;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <UART_SIM7600_Read_Received_Buffer+0x54>)
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <UART_SIM7600_Read_Received_Buffer+0x58>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d101      	bne.n	8000e2e <UART_SIM7600_Read_Received_Buffer+0x16>
 8000e2a:	23ff      	movs	r3, #255	; 0xff
 8000e2c:	e017      	b.n	8000e5e <UART_SIM7600_Read_Received_Buffer+0x46>
	uint8_t ch = aUART_RxBuffer[receiveBufferIndexTail];
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <UART_SIM7600_Read_Received_Buffer+0x54>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <UART_SIM7600_Read_Received_Buffer+0x5c>)
 8000e36:	5c9b      	ldrb	r3, [r3, r2]
 8000e38:	71fb      	strb	r3, [r7, #7]
	receiveBufferIndexTail = (receiveBufferIndexTail + 1) % RXBUFFERSIZE;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <UART_SIM7600_Read_Received_Buffer+0x54>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <UART_SIM7600_Read_Received_Buffer+0x60>)
 8000e42:	fb83 1302 	smull	r1, r3, r3, r2
 8000e46:	4413      	add	r3, r2
 8000e48:	11d9      	asrs	r1, r3, #7
 8000e4a:	17d3      	asrs	r3, r2, #31
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	1a5b      	subs	r3, r3, r1
 8000e54:	1ad1      	subs	r1, r2, r3
 8000e56:	b2ca      	uxtb	r2, r1
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <UART_SIM7600_Read_Received_Buffer+0x54>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	return ch;
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000775 	.word	0x20000775
 8000e70:	20000774 	.word	0x20000774
 8000e74:	20002084 	.word	0x20002084
 8000e78:	80808081 	.word	0x80808081

08000e7c <UART_485_Init>:
  * @param None
  * @retval None
  */

void UART_485_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart6.Instance = USART6;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <UART_485_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <UART_485_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <UART_485_Init+0x4c>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <UART_485_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <UART_485_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <UART_485_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <UART_485_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <UART_485_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <UART_485_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <UART_485_Init+0x4c>)
 8000eb4:	f001 fb80 	bl	80025b8 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <UART_485_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f000 fa63 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200022d0 	.word	0x200022d0
 8000ecc:	40011400 	.word	0x40011400

08000ed0 <UART_DEBUG_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void UART_DEBUG_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <UART_DEBUG_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <UART_DEBUG_Init+0x4c>)
 8000f08:	f001 fb56 	bl	80025b8 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <UART_DEBUG_Init+0x46>
  {
    Error_Handler();
 8000f12:	f000 fa39 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20002310 	.word	0x20002310
 8000f20:	40004400 	.word	0x40004400

08000f24 <UART_DEBUG_Transmit>:

void UART_DEBUG_Transmit(uint8_t *buffer){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	while(!UartTransmitReady);
 8000f2c:	bf00      	nop
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <UART_DEBUG_Transmit+0x40>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0fa      	beq.n	8000f2e <UART_DEBUG_Transmit+0xa>
	if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)buffer, strlen(buffer))!= HAL_OK){
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f951 	bl	80001e0 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <UART_DEBUG_Transmit+0x44>)
 8000f48:	f001 fb83 	bl	8002652 <HAL_UART_Transmit_IT>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <UART_DEBUG_Transmit+0x32>
		Error_Handler();
 8000f52:	f000 fa19 	bl	8001388 <Error_Handler>
	}
	UartTransmitReady = RESET;
 8000f56:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <UART_DEBUG_Transmit+0x40>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200005f8 	.word	0x200005f8
 8000f68:	20002310 	.word	0x20002310

08000f6c <Setup_Receive_IT>:
	UartTransmitReady = RESET;
}



void Setup_Receive_IT(void){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&huart1, &temp, 1)!= HAL_OK){
 8000f70:	2201      	movs	r2, #1
 8000f72:	4906      	ldr	r1, [pc, #24]	; (8000f8c <Setup_Receive_IT+0x20>)
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <Setup_Receive_IT+0x24>)
 8000f76:	f001 fbb1 	bl	80026dc <HAL_UART_Receive_IT>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <Setup_Receive_IT+0x1a>
		Error_Handler();
 8000f80:	f000 fa02 	bl	8001388 <Error_Handler>
		return HAL_ERROR;
 8000f84:	e000      	b.n	8000f88 <Setup_Receive_IT+0x1c>
	}
	return HAL_OK;
 8000f86:	bf00      	nop
}
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20002083 	.word	0x20002083
 8000f90:	20002184 	.word	0x20002184

08000f94 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_UART_RxCpltCallback+0x54>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11c      	bne.n	8000fe0 <HAL_UART_RxCpltCallback+0x4c>
		aUART_RxBuffer[receiveBufferIndexHead] = temp;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_RxCpltCallback+0x58>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fae:	7819      	ldrb	r1, [r3, #0]
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_UART_RxCpltCallback+0x60>)
 8000fb2:	5499      	strb	r1, [r3, r2]
		receiveBufferIndexHead = (receiveBufferIndexHead + 1) % RXBUFFERSIZE;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_UART_RxCpltCallback+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_UART_RxCpltCallback+0x64>)
 8000fbc:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	11d9      	asrs	r1, r3, #7
 8000fc4:	17d3      	asrs	r3, r2, #31
 8000fc6:	1ac9      	subs	r1, r1, r3
 8000fc8:	460b      	mov	r3, r1
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	1a5b      	subs	r3, r3, r1
 8000fce:	1ad1      	subs	r1, r2, r3
 8000fd0:	b2ca      	uxtb	r2, r1
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_UART_RxCpltCallback+0x58>)
 8000fd4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4905      	ldr	r1, [pc, #20]	; (8000ff0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <HAL_UART_RxCpltCallback+0x68>)
 8000fdc:	f001 fb7e 	bl	80026dc <HAL_UART_Receive_IT>
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	20000774 	.word	0x20000774
 8000ff0:	20002083 	.word	0x20002083
 8000ff4:	20002084 	.word	0x20002084
 8000ff8:	80808081 	.word	0x80808081
 8000ffc:	20002184 	.word	0x20002184

08001000 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_UART_TxCpltCallback+0x1c>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200005f8 	.word	0x200005f8

08001020 <Clear_Reiceive_Buffer>:

void Clear_Reiceive_Buffer(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	memset(aUART_RxBuffer,0,RXBUFFERSIZE);
 8001024:	22ff      	movs	r2, #255	; 0xff
 8001026:	2100      	movs	r1, #0
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <Clear_Reiceive_Buffer+0x20>)
 800102a:	f013 fade 	bl	80145ea <memset>
	receiveBufferIndexHead = 0;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <Clear_Reiceive_Buffer+0x24>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
	receiveBufferIndexTail = 0;
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <Clear_Reiceive_Buffer+0x28>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20002084 	.word	0x20002084
 8001044:	20000774 	.word	0x20000774
 8001048:	20000775 	.word	0x20000775

0800104c <Clear_Temp_Buffer>:

void Clear_Temp_Buffer(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	memset(temp_array,0,RXBUFFERSIZE);
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	2100      	movs	r1, #0
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <Clear_Temp_Buffer+0x14>)
 8001056:	f013 fac8 	bl	80145ea <memset>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20001f84 	.word	0x20001f84

08001064 <Wait_For_Respone>:

void Wait_For_Respone(){
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
	int index = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
	Clear_Temp_Buffer();
 800106e:	f7ff ffed 	bl	800104c <Clear_Temp_Buffer>
	while(1){
		if(UART_SIM7600_Received_Buffer_Available()){
 8001072:	f7ff febd 	bl	8000df0 <UART_SIM7600_Received_Buffer_Available>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0fa      	beq.n	8001072 <Wait_For_Respone+0xe>
			temp_array[index++]=UART_SIM7600_Read_Received_Buffer();
 800107c:	687c      	ldr	r4, [r7, #4]
 800107e:	1c63      	adds	r3, r4, #1
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	f7ff fec9 	bl	8000e18 <UART_SIM7600_Read_Received_Buffer>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <Wait_For_Respone+0x84>)
 800108c:	551a      	strb	r2, [r3, r4]
//			UART_DEBUG_Transmit_Size(temp_array+index, 1);
			if(strstr(temp_array,"OK\r\n")!=NULL){
 800108e:	4917      	ldr	r1, [pc, #92]	; (80010ec <Wait_For_Respone+0x88>)
 8001090:	4815      	ldr	r0, [pc, #84]	; (80010e8 <Wait_For_Respone+0x84>)
 8001092:	f013 fbda 	bl	801484a <strstr>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <Wait_For_Respone+0x46>
				UART_DEBUG_Transmit("\r\nOK\r\n");
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <Wait_For_Respone+0x8c>)
 800109e:	f7ff ff41 	bl	8000f24 <UART_DEBUG_Transmit>
				_result.at_result = AT_OK;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <Wait_For_Respone+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	711a      	strb	r2, [r3, #4]
				break;
 80010a8:	e01a      	b.n	80010e0 <Wait_For_Respone+0x7c>
			}
			if(strstr(temp_array,"ERROR\r\n")!=NULL){
 80010aa:	4913      	ldr	r1, [pc, #76]	; (80010f8 <Wait_For_Respone+0x94>)
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <Wait_For_Respone+0x84>)
 80010ae:	f013 fbcc 	bl	801484a <strstr>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <Wait_For_Respone+0x62>
				UART_DEBUG_Transmit("\r\nERROR\r\n");
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <Wait_For_Respone+0x98>)
 80010ba:	f7ff ff33 	bl	8000f24 <UART_DEBUG_Transmit>
				_result.at_result = AT_ERROR;
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <Wait_For_Respone+0x90>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	711a      	strb	r2, [r3, #4]
				break;
 80010c4:	e00c      	b.n	80010e0 <Wait_For_Respone+0x7c>
			}
			if(strstr(temp_array,">")!=NULL){
 80010c6:	213e      	movs	r1, #62	; 0x3e
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <Wait_For_Respone+0x84>)
 80010ca:	f013 fbb1 	bl	8014830 <strchr>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0ce      	beq.n	8001072 <Wait_For_Respone+0xe>
				UART_DEBUG_Transmit("\r\nINPUT\r\n");
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <Wait_For_Respone+0x9c>)
 80010d6:	f7ff ff25 	bl	8000f24 <UART_DEBUG_Transmit>
				_result.at_result = AT_INPUT;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <Wait_For_Respone+0x90>)
 80010dc:	2202      	movs	r2, #2
 80010de:	711a      	strb	r2, [r3, #4]
				break;
			}
		}
	}
//	UART_DEBUG_Transmit_Size(aUART_RxBuffer, RXBUFFERSIZE);
	return;
 80010e0:	bf00      	nop
}
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	20001f84 	.word	0x20001f84
 80010ec:	080152ec 	.word	0x080152ec
 80010f0:	080152f4 	.word	0x080152f4
 80010f4:	200022c4 	.word	0x200022c4
 80010f8:	080152fc 	.word	0x080152fc
 80010fc:	08015304 	.word	0x08015304
 8001100:	08015310 	.word	0x08015310

08001104 <Get_AT_Result>:
		}
	}
}


Result_TypeDef Get_AT_Result(){
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	return _result;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <Get_AT_Result+0x20>)
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	200022c4 	.word	0x200022c4

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 fadf 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f8a3 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f000 f8ff 	bl	8001338 <MX_GPIO_Init>
  UART_485_Init();
 800113a:	f7ff fe9f 	bl	8000e7c <UART_485_Init>
  UART_DEBUG_Init();
 800113e:	f7ff fec7 	bl	8000ed0 <UART_DEBUG_Init>
  UART_SIM7600_Init();
 8001142:	f7ff fdf5 	bl	8000d30 <UART_SIM7600_Init>
  SSL_Init();
 8001146:	f7ff fb2f 	bl	80007a8 <SSL_Init>
//  createJWT("hw-smartlocker", time(NULL), time(NULL)+3600);
//  char * resultt = createGCPJWT("hw-smartlocker", time(NULL), time(NULL)+3600);
//  UART_DEBUG_Transmit(resultt);
  /* USER CODE BEGIN 2 */
	sprintf(clientid,"\"projects/%s/locations/%s/registries/%s/devices/%s\"",projectId,region,registryId,deviceId);
 800114a:	4b39      	ldr	r3, [pc, #228]	; (8001230 <main+0x108>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <main+0x10c>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <main+0x110>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a39      	ldr	r2, [pc, #228]	; (800123c <main+0x114>)
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	4937      	ldr	r1, [pc, #220]	; (8001240 <main+0x118>)
 8001164:	4837      	ldr	r0, [pc, #220]	; (8001244 <main+0x11c>)
 8001166:	f013 fb43 	bl	80147f0 <siprintf>
	mqtt_client.client_index=client_index;
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <main+0x120>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <main+0x124>)
 8001170:	701a      	strb	r2, [r3, #0]
	mqtt_client.clientid=clientid;
 8001172:	4b36      	ldr	r3, [pc, #216]	; (800124c <main+0x124>)
 8001174:	4a33      	ldr	r2, [pc, #204]	; (8001244 <main+0x11c>)
 8001176:	605a      	str	r2, [r3, #4]
	mqtt_client.server_address=server_address;
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <main+0x128>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a33      	ldr	r2, [pc, #204]	; (800124c <main+0x124>)
 800117e:	6093      	str	r3, [r2, #8]
	mqtt_client.clean_session=clean_session;
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <main+0x12c>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <main+0x124>)
 8001186:	751a      	strb	r2, [r3, #20]
	mqtt_client.keepAlive=keepAlive;
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <main+0x130>)
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <main+0x124>)
 800118e:	755a      	strb	r2, [r3, #21]
	mqtt_client.user=user;
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <main+0x134>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <main+0x124>)
 8001196:	60d3      	str	r3, [r2, #12]
	mqtt_client.pass=createGCPJWT("hw-smartlocker", time(NULL), time(NULL)+3600);
 8001198:	2000      	movs	r0, #0
 800119a:	f013 fb71 	bl	8014880 <time>
 800119e:	4603      	mov	r3, r0
 80011a0:	461c      	mov	r4, r3
 80011a2:	2000      	movs	r0, #0
 80011a4:	f013 fb6c 	bl	8014880 <time>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80011ae:	461a      	mov	r2, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	482b      	ldr	r0, [pc, #172]	; (8001260 <main+0x138>)
 80011b4:	f7ff fc08 	bl	80009c8 <createGCPJWT>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <main+0x124>)
 80011bc:	611a      	str	r2, [r3, #16]
	sprintf(log,"iat: %d\r\n", time(NULL));
 80011be:	2000      	movs	r0, #0
 80011c0:	f013 fb5e 	bl	8014880 <time>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4926      	ldr	r1, [pc, #152]	; (8001264 <main+0x13c>)
 80011ca:	4827      	ldr	r0, [pc, #156]	; (8001268 <main+0x140>)
 80011cc:	f013 fb10 	bl	80147f0 <siprintf>
	UART_DEBUG_Transmit(log);
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <main+0x140>)
 80011d2:	f7ff fea7 	bl	8000f24 <UART_DEBUG_Transmit>
	sprintf(topic,"\"/devices/%s/states\"");
 80011d6:	4925      	ldr	r1, [pc, #148]	; (800126c <main+0x144>)
 80011d8:	4825      	ldr	r0, [pc, #148]	; (8001270 <main+0x148>)
 80011da:	f013 fb09 	bl	80147f0 <siprintf>
	message.topic=topic;
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <main+0x14c>)
 80011e0:	4a23      	ldr	r2, [pc, #140]	; (8001270 <main+0x148>)
 80011e2:	601a      	str	r2, [r3, #0]
	message.payload="\"ok\"";
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <main+0x14c>)
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <main+0x150>)
 80011e8:	605a      	str	r2, [r3, #4]
	message.qos = 1;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <main+0x14c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	721a      	strb	r2, [r3, #8]
	message.retain = 0;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <main+0x14c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	729a      	strb	r2, [r3, #10]
	message.pub_timeout = 120;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <main+0x14c>)
 80011f8:	2278      	movs	r2, #120	; 0x78
 80011fa:	725a      	strb	r2, [r3, #9]
	message.dup = 0;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <main+0x14c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	72da      	strb	r2, [r3, #11]

  MQTT_Start();
 8001202:	f7ff f9c5 	bl	8000590 <MQTT_Start>

  MQTT_Accquire_Client(&mqtt_client);
 8001206:	4811      	ldr	r0, [pc, #68]	; (800124c <main+0x124>)
 8001208:	f7ff f9d0 	bl	80005ac <MQTT_Accquire_Client>
//
  SSL_Typedef ssl = Get_Ssl_Config();
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fbb6 	bl	8000980 <Get_Ssl_Config>
  MQTT_Set_Ssl(&mqtt_client, &ssl);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <main+0x124>)
 800121a:	f7ff f9e3 	bl	80005e4 <MQTT_Set_Ssl>
//
  MQTT_Connect(&mqtt_client);
 800121e:	480b      	ldr	r0, [pc, #44]	; (800124c <main+0x124>)
 8001220:	f7ff f9fc 	bl	800061c <MQTT_Connect>
  MQTT_Publish(&mqtt_client, &message);
 8001224:	4913      	ldr	r1, [pc, #76]	; (8001274 <main+0x14c>)
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <main+0x124>)
 8001228:	f7ff fa86 	bl	8000738 <MQTT_Publish>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800122c:	e7fe      	b.n	800122c <main+0x104>
 800122e:	bf00      	nop
 8001230:	200005fc 	.word	0x200005fc
 8001234:	20000600 	.word	0x20000600
 8001238:	20000604 	.word	0x20000604
 800123c:	20000608 	.word	0x20000608
 8001240:	080153b0 	.word	0x080153b0
 8001244:	20002418 	.word	0x20002418
 8001248:	20000776 	.word	0x20000776
 800124c:	200024e0 	.word	0x200024e0
 8001250:	20000610 	.word	0x20000610
 8001254:	20000777 	.word	0x20000777
 8001258:	2000060c 	.word	0x2000060c
 800125c:	20000614 	.word	0x20000614
 8001260:	0801533c 	.word	0x0801533c
 8001264:	080153e4 	.word	0x080153e4
 8001268:	20002350 	.word	0x20002350
 800126c:	080153f0 	.word	0x080153f0
 8001270:	20002504 	.word	0x20002504
 8001274:	200024f8 	.word	0x200024f8
 8001278:	08015408 	.word	0x08015408

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f013 f9ad 	bl	80145ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <SystemClock_Config+0xb4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <SystemClock_Config+0xb4>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <SystemClock_Config+0xb4>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <SystemClock_Config+0xb8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <SystemClock_Config+0xb8>)
 80012c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <SystemClock_Config+0xb8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fd27 	bl	8001d40 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012f8:	f000 f846 	bl	8001388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f000 ff82 	bl	8002220 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001322:	f000 f831 	bl	8001388 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3750      	adds	r7, #80	; 0x50
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_GPIO_Init+0x4c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <MX_GPIO_Init+0x4c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <MX_GPIO_Init+0x4c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_GPIO_Init+0x4c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <MX_GPIO_Init+0x4c>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_GPIO_Init+0x4c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138e:	e7fe      	b.n	800138e <Error_Handler+0x6>

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_MspInit+0x4c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_MspInit+0x4c>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x4c>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_UART_MspInit+0x17c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d135      	bne.n	800146e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_UART_MspInit+0x180>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a55      	ldr	r2, [pc, #340]	; (8001560 <HAL_UART_MspInit+0x180>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_UART_MspInit+0x180>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <HAL_UART_MspInit+0x180>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <HAL_UART_MspInit+0x180>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <HAL_UART_MspInit+0x180>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144c:	2307      	movs	r3, #7
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	4843      	ldr	r0, [pc, #268]	; (8001564 <HAL_UART_MspInit+0x184>)
 8001458:	f000 faf0 	bl	8001a3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2025      	movs	r0, #37	; 0x25
 8001462:	f000 fa92 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001466:	2025      	movs	r0, #37	; 0x25
 8001468:	f000 faab 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800146c:	e072      	b.n	8001554 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a3d      	ldr	r2, [pc, #244]	; (8001568 <HAL_UART_MspInit+0x188>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d134      	bne.n	80014e2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_UART_MspInit+0x180>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a37      	ldr	r2, [pc, #220]	; (8001560 <HAL_UART_MspInit+0x180>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_UART_MspInit+0x180>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_UART_MspInit+0x180>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a30      	ldr	r2, [pc, #192]	; (8001560 <HAL_UART_MspInit+0x180>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_UART_MspInit+0x180>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b0:	230c      	movs	r3, #12
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c0:	2307      	movs	r3, #7
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4826      	ldr	r0, [pc, #152]	; (8001564 <HAL_UART_MspInit+0x184>)
 80014cc:	f000 fab6 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2026      	movs	r0, #38	; 0x26
 80014d6:	f000 fa58 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014da:	2026      	movs	r0, #38	; 0x26
 80014dc:	f000 fa71 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 80014e0:	e038      	b.n	8001554 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a21      	ldr	r2, [pc, #132]	; (800156c <HAL_UART_MspInit+0x18c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d133      	bne.n	8001554 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_UART_MspInit+0x180>)
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_UART_MspInit+0x180>)
 80014f6:	f043 0320 	orr.w	r3, r3, #32
 80014fa:	6453      	str	r3, [r2, #68]	; 0x44
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_UART_MspInit+0x180>)
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_UART_MspInit+0x180>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_UART_MspInit+0x180>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_UART_MspInit+0x180>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001534:	2308      	movs	r3, #8
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	480c      	ldr	r0, [pc, #48]	; (8001570 <HAL_UART_MspInit+0x190>)
 8001540:	f000 fa7c 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2047      	movs	r0, #71	; 0x47
 800154a:	f000 fa1e 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800154e:	2047      	movs	r0, #71	; 0x47
 8001550:	f000 fa37 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40011000 	.word	0x40011000
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000
 8001568:	40004400 	.word	0x40004400
 800156c:	40011400 	.word	0x40011400
 8001570:	40020800 	.word	0x40020800

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f8e8 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <USART1_IRQHandler+0x10>)
 80015ce:	f001 f8db 	bl	8002788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20002184 	.word	0x20002184

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART2_IRQHandler+0x10>)
 80015e2:	f001 f8d1 	bl	8002788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20002310 	.word	0x20002310

080015f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <USART6_IRQHandler+0x10>)
 80015f6:	f001 f8c7 	bl	8002788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200022d0 	.word	0x200022d0

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f012 ff6c 	bl	8014510 <__errno>
 8001638:	4602      	mov	r2, r0
 800163a:	230c      	movs	r3, #12
 800163c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20020000 	.word	0x20020000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000778 	.word	0x20000778
 800166c:	20002570 	.word	0x20002570

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <SystemInit+0x28>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <SystemInit+0x28>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SystemInit+0x28>)
 8001686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168a:	609a      	str	r2, [r3, #8]
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016a2:	e003      	b.n	80016ac <LoopCopyDataInit>

080016a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016aa:	3104      	adds	r1, #4

080016ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016b4:	d3f6      	bcc.n	80016a4 <CopyDataInit>
  ldr  r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016b8:	e002      	b.n	80016c0 <LoopFillZerobss>

080016ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016bc:	f842 3b04 	str.w	r3, [r2], #4

080016c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016c4:	d3f9      	bcc.n	80016ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ffd3 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f012 ff27 	bl	801451c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fd2b 	bl	8001128 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016d8:	08019f54 	.word	0x08019f54
  ldr  r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016e0:	20000690 	.word	0x20000690
  ldr  r2, =_sbss
 80016e4:	20000690 	.word	0x20000690
  ldr  r3, = _ebss
 80016e8:	20002570 	.word	0x20002570

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f92b 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fe34 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f943 	bl	80019de <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f90b 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000618 	.word	0x20000618
 800178c:	20000620 	.word	0x20000620
 8001790:	2000061c 	.word	0x2000061c

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000620 	.word	0x20000620
 80017b8:	20002568 	.word	0x20002568

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20002568 	.word	0x20002568

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d004      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e00c      	b.n	8001a2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2205      	movs	r2, #5
 8001a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e159      	b.n	8001d0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8148 	bne.w	8001d06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d00b      	beq.n	8001a96 <HAL_GPIO_Init+0x5a>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a8a:	2b11      	cmp	r3, #17
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d130      	bne.n	8001af8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 0201 	and.w	r2, r3, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0xfc>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b12      	cmp	r3, #18
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a2 	beq.w	8001d06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x2e4>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a55      	ldr	r2, [pc, #340]	; (8001d20 <HAL_GPIO_Init+0x2e4>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_GPIO_Init+0x2e4>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a51      	ldr	r2, [pc, #324]	; (8001d24 <HAL_GPIO_Init+0x2e8>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2ec>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x202>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a47      	ldr	r2, [pc, #284]	; (8001d2c <HAL_GPIO_Init+0x2f0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x1fe>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_GPIO_Init+0x2f4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x1fa>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a45      	ldr	r2, [pc, #276]	; (8001d34 <HAL_GPIO_Init+0x2f8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x1f6>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a44      	ldr	r2, [pc, #272]	; (8001d38 <HAL_GPIO_Init+0x2fc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x1f2>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c50:	4934      	ldr	r1, [pc, #208]	; (8001d24 <HAL_GPIO_Init+0x2e8>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c82:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	f67f aea2 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	3724      	adds	r7, #36	; 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e25b      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d075      	beq.n	8001e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5e:	4ba3      	ldr	r3, [pc, #652]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d00c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4ba0      	ldr	r3, [pc, #640]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b9d      	ldr	r3, [pc, #628]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b99      	ldr	r3, [pc, #612]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05b      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d157      	bne.n	8001e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e236      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x74>
 8001da6:	4b91      	ldr	r3, [pc, #580]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a90      	ldr	r2, [pc, #576]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x98>
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a87      	ldr	r2, [pc, #540]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001dd8:	4b84      	ldr	r3, [pc, #528]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a83      	ldr	r2, [pc, #524]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fce0 	bl	80017bc <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fcdc 	bl	80017bc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1fb      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xc0>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fccc 	bl	80017bc <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fcc8 	bl	80017bc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1e7      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0xe8>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e62:	4b62      	ldr	r3, [pc, #392]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x152>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e1bb      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4952      	ldr	r1, [pc, #328]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <HAL_RCC_OscConfig+0x2b0>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fc81 	bl	80017bc <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fc7d 	bl	80017bc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e19c      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b43      	ldr	r3, [pc, #268]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4940      	ldr	r1, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_OscConfig+0x2b0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fc60 	bl	80017bc <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fc5c 	bl	80017bc <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e17b      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d030      	beq.n	8001f8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCC_OscConfig+0x2b4>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff fc40 	bl	80017bc <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff fc3c 	bl	80017bc <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e15b      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x200>
 8001f5e:	e015      	b.n	8001f8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_OscConfig+0x2b4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7ff fc29 	bl	80017bc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fc25 	bl	80017bc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e144      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a0 	beq.w	80020da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d121      	bne.n	800201a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fbeb 	bl	80017bc <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	e011      	b.n	800200e <HAL_RCC_OscConfig+0x2ce>
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	42470000 	.word	0x42470000
 8001ff4:	42470e80 	.word	0x42470e80
 8001ff8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7ff fbde 	bl	80017bc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0fd      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b81      	ldr	r3, [pc, #516]	; (8002214 <HAL_RCC_OscConfig+0x4d4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x2f0>
 8002022:	4b7d      	ldr	r3, [pc, #500]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a7c      	ldr	r2, [pc, #496]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e01c      	b.n	800206a <HAL_RCC_OscConfig+0x32a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x312>
 8002038:	4b77      	ldr	r3, [pc, #476]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a76      	ldr	r2, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	4b74      	ldr	r3, [pc, #464]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a73      	ldr	r2, [pc, #460]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x32a>
 8002052:	4b71      	ldr	r3, [pc, #452]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a70      	ldr	r2, [pc, #448]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	4b6e      	ldr	r3, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a6d      	ldr	r2, [pc, #436]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff fba3 	bl	80017bc <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fb9f 	bl	80017bc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0bc      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ee      	beq.n	800207a <HAL_RCC_OscConfig+0x33a>
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fb8d 	bl	80017bc <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff fb89 	bl	80017bc <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0a6      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a51      	ldr	r2, [pc, #324]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8092 	beq.w	8002208 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d05c      	beq.n	80021aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d141      	bne.n	800217c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <HAL_RCC_OscConfig+0x4dc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff fb5d 	bl	80017bc <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff fb59 	bl	80017bc <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e078      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002118:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	019b      	lsls	r3, r3, #6
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	3b01      	subs	r3, #1
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	061b      	lsls	r3, r3, #24
 8002148:	4933      	ldr	r1, [pc, #204]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <HAL_RCC_OscConfig+0x4dc>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fb32 	bl	80017bc <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fb2e 	bl	80017bc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04d      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x41c>
 800217a:	e045      	b.n	8002208 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x4dc>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fb1b 	bl	80017bc <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff fb17 	bl	80017bc <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e036      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x44a>
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e029      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d115      	bne.n	8002204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d10d      	bne.n	8002204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40007000 	.word	0x40007000
 8002218:	40023800 	.word	0x40023800
 800221c:	42470060 	.word	0x42470060

08002220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0cc      	b.n	80023ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b68      	ldr	r3, [pc, #416]	; (80023d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d90c      	bls.n	800225c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b65      	ldr	r3, [pc, #404]	; (80023d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b63      	ldr	r3, [pc, #396]	; (80023d8 <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0b8      	b.n	80023ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d020      	beq.n	80022aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800227e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a52      	ldr	r2, [pc, #328]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	494d      	ldr	r1, [pc, #308]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d044      	beq.n	8002340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d119      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e07f      	b.n	80023ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d003      	beq.n	80022de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06f      	b.n	80023ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e067      	b.n	80023ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b37      	ldr	r3, [pc, #220]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4934      	ldr	r1, [pc, #208]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7ff fa54 	bl	80017bc <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff fa50 	bl	80017bc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e04f      	b.n	80023ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d20c      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e032      	b.n	80023ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4916      	ldr	r1, [pc, #88]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	490e      	ldr	r1, [pc, #56]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023a6:	f000 f821 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80023aa:	4601      	mov	r1, r0
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	fa21 f303 	lsr.w	r3, r1, r3
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f9b4 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023c00 	.word	0x40023c00
 80023dc:	40023800 	.word	0x40023800
 80023e0:	08017524 	.word	0x08017524
 80023e4:	20000618 	.word	0x20000618
 80023e8:	2000061c 	.word	0x2000061c

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002402:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_GetSysClockFreq+0x158>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d007      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x32>
 800240e:	2b08      	cmp	r3, #8
 8002410:	d008      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x38>
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 808d 	bne.w	8002532 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <HAL_RCC_GetSysClockFreq+0x15c>)
 800241a:	60bb      	str	r3, [r7, #8]
       break;
 800241c:	e08c      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800241e:	4b4b      	ldr	r3, [pc, #300]	; (800254c <HAL_RCC_GetSysClockFreq+0x160>)
 8002420:	60bb      	str	r3, [r7, #8]
      break;
 8002422:	e089      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002424:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_GetSysClockFreq+0x158>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242e:	4b45      	ldr	r3, [pc, #276]	; (8002544 <HAL_RCC_GetSysClockFreq+0x158>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d023      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCC_GetSysClockFreq+0x158>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	f04f 0400 	mov.w	r4, #0
 8002444:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	ea03 0501 	and.w	r5, r3, r1
 8002450:	ea04 0602 	and.w	r6, r4, r2
 8002454:	4a3d      	ldr	r2, [pc, #244]	; (800254c <HAL_RCC_GetSysClockFreq+0x160>)
 8002456:	fb02 f106 	mul.w	r1, r2, r6
 800245a:	2200      	movs	r2, #0
 800245c:	fb02 f205 	mul.w	r2, r2, r5
 8002460:	440a      	add	r2, r1
 8002462:	493a      	ldr	r1, [pc, #232]	; (800254c <HAL_RCC_GetSysClockFreq+0x160>)
 8002464:	fba5 0101 	umull	r0, r1, r5, r1
 8002468:	1853      	adds	r3, r2, r1
 800246a:	4619      	mov	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f04f 0400 	mov.w	r4, #0
 8002472:	461a      	mov	r2, r3
 8002474:	4623      	mov	r3, r4
 8002476:	f7fd ff0b 	bl	8000290 <__aeabi_uldivmod>
 800247a:	4603      	mov	r3, r0
 800247c:	460c      	mov	r4, r1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e049      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_GetSysClockFreq+0x158>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	f04f 0400 	mov.w	r4, #0
 800248c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	ea03 0501 	and.w	r5, r3, r1
 8002498:	ea04 0602 	and.w	r6, r4, r2
 800249c:	4629      	mov	r1, r5
 800249e:	4632      	mov	r2, r6
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	f04f 0400 	mov.w	r4, #0
 80024a8:	0154      	lsls	r4, r2, #5
 80024aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ae:	014b      	lsls	r3, r1, #5
 80024b0:	4619      	mov	r1, r3
 80024b2:	4622      	mov	r2, r4
 80024b4:	1b49      	subs	r1, r1, r5
 80024b6:	eb62 0206 	sbc.w	r2, r2, r6
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	f04f 0400 	mov.w	r4, #0
 80024c2:	0194      	lsls	r4, r2, #6
 80024c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024c8:	018b      	lsls	r3, r1, #6
 80024ca:	1a5b      	subs	r3, r3, r1
 80024cc:	eb64 0402 	sbc.w	r4, r4, r2
 80024d0:	f04f 0100 	mov.w	r1, #0
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	00e2      	lsls	r2, r4, #3
 80024da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024de:	00d9      	lsls	r1, r3, #3
 80024e0:	460b      	mov	r3, r1
 80024e2:	4614      	mov	r4, r2
 80024e4:	195b      	adds	r3, r3, r5
 80024e6:	eb44 0406 	adc.w	r4, r4, r6
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	02a2      	lsls	r2, r4, #10
 80024f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024f8:	0299      	lsls	r1, r3, #10
 80024fa:	460b      	mov	r3, r1
 80024fc:	4614      	mov	r4, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	4621      	mov	r1, r4
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f04f 0400 	mov.w	r4, #0
 8002508:	461a      	mov	r2, r3
 800250a:	4623      	mov	r3, r4
 800250c:	f7fd fec0 	bl	8000290 <__aeabi_uldivmod>
 8002510:	4603      	mov	r3, r0
 8002512:	460c      	mov	r4, r1
 8002514:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_GetSysClockFreq+0x158>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	3301      	adds	r3, #1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	60bb      	str	r3, [r7, #8]
      break;
 8002530:	e002      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002534:	60bb      	str	r3, [r7, #8]
      break;
 8002536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002538:	68bb      	ldr	r3, [r7, #8]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	017d7840 	.word	0x017d7840

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000618 	.word	0x20000618

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4601      	mov	r1, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	08017534 	.word	0x08017534

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffdc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002598:	4601      	mov	r1, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0b5b      	lsrs	r3, r3, #13
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	08017534 	.word	0x08017534

080025b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e03f      	b.n	800264a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fefe 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 faef 	bl	8002be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	4613      	mov	r3, r2
 800265e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b20      	cmp	r3, #32
 800266a:	d130      	bne.n	80026ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_UART_Transmit_IT+0x26>
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e029      	b.n	80026d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_UART_Transmit_IT+0x38>
 8002686:	2302      	movs	r3, #2
 8002688:	e022      	b.n	80026d0 <HAL_UART_Transmit_IT+0x7e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2221      	movs	r2, #33	; 0x21
 80026ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d140      	bne.n	8002778 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_UART_Receive_IT+0x26>
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e039      	b.n	800277a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_UART_Receive_IT+0x38>
 8002710:	2302      	movs	r3, #2
 8002712:	e032      	b.n	800277a <HAL_UART_Receive_IT+0x9e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2222      	movs	r2, #34	; 0x22
 8002738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_UART_IRQHandler+0x52>
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f982 	bl	8002adc <UART_Receive_IT>
      return;
 80027d8:	e0d1      	b.n	800297e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80b0 	beq.w	8002942 <HAL_UART_IRQHandler+0x1ba>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_UART_IRQHandler+0x70>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80a5 	beq.w	8002942 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_UART_IRQHandler+0x90>
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_UART_IRQHandler+0xb0>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	f043 0202 	orr.w	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_UART_IRQHandler+0xd0>
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00f      	beq.n	8002882 <HAL_UART_IRQHandler+0xfa>
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d104      	bne.n	8002876 <HAL_UART_IRQHandler+0xee>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	f043 0208 	orr.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d078      	beq.n	800297c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_UART_IRQHandler+0x11c>
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f91c 	bl	8002adc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	bf0c      	ite	eq
 80028b2:	2301      	moveq	r3, #1
 80028b4:	2300      	movne	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <HAL_UART_IRQHandler+0x144>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d031      	beq.n	8002930 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f865 	bl	800299c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d123      	bne.n	8002928 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	4a21      	ldr	r2, [pc, #132]	; (8002984 <HAL_UART_IRQHandler+0x1fc>)
 80028fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f876 	bl	80019f6 <HAL_DMA_Abort_IT>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d016      	beq.n	800293e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800291a:	4610      	mov	r0, r2
 800291c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291e:	e00e      	b.n	800293e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f831 	bl	8002988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002926:	e00a      	b.n	800293e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f82d 	bl	8002988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292e:	e006      	b.n	800293e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f829 	bl	8002988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800293c:	e01e      	b.n	800297c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293e:	bf00      	nop
    return;
 8002940:	e01c      	b.n	800297c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_UART_IRQHandler+0x1d6>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f852 	bl	8002a00 <UART_Transmit_IT>
    return;
 800295c:	e00f      	b.n	800297e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_UART_IRQHandler+0x1f6>
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f89a 	bl	8002aac <UART_EndTransmit_IT>
    return;
 8002978:	bf00      	nop
 800297a:	e000      	b.n	800297e <HAL_UART_IRQHandler+0x1f6>
    return;
 800297c:	bf00      	nop
  }
}
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	080029d9 	.word	0x080029d9

08002988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ffc8 	bl	8002988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b21      	cmp	r3, #33	; 0x21
 8002a12:	d144      	bne.n	8002a9e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d11a      	bne.n	8002a54 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a32:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	1c9a      	adds	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	621a      	str	r2, [r3, #32]
 8002a46:	e00e      	b.n	8002a66 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]
 8002a52:	e008      	b.n	8002a66 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	1c59      	adds	r1, r3, #1
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6211      	str	r1, [r2, #32]
 8002a5e:	781a      	ldrb	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4619      	mov	r1, r3
 8002a74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fe fa97 	bl	8001000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b22      	cmp	r3, #34	; 0x22
 8002aee:	d171      	bne.n	8002bd4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	d123      	bne.n	8002b42 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10e      	bne.n	8002b26 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	1c9a      	adds	r2, r3, #2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
 8002b24:	e029      	b.n	8002b7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b40:	e01b      	b.n	8002b7a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6858      	ldr	r0, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	1c59      	adds	r1, r3, #1
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6291      	str	r1, [r2, #40]	; 0x28
 8002b5a:	b2c2      	uxtb	r2, r0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e00c      	b.n	8002b7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	1c58      	adds	r0, r3, #1
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	6288      	str	r0, [r1, #40]	; 0x28
 8002b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4619      	mov	r1, r3
 8002b88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d120      	bne.n	8002bd0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0220 	bic.w	r2, r2, #32
 8002b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe f9e4 	bl	8000f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e002      	b.n	8002bd6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c22:	f023 030c 	bic.w	r3, r3, #12
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4e:	f040 818b 	bne.w	8002f68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4ac1      	ldr	r2, [pc, #772]	; (8002f5c <UART_SetConfig+0x37c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d005      	beq.n	8002c68 <UART_SetConfig+0x88>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4abf      	ldr	r2, [pc, #764]	; (8002f60 <UART_SetConfig+0x380>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	f040 80bd 	bne.w	8002de2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7ff fc92 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	461d      	mov	r5, r3
 8002c72:	f04f 0600 	mov.w	r6, #0
 8002c76:	46a8      	mov	r8, r5
 8002c78:	46b1      	mov	r9, r6
 8002c7a:	eb18 0308 	adds.w	r3, r8, r8
 8002c7e:	eb49 0409 	adc.w	r4, r9, r9
 8002c82:	4698      	mov	r8, r3
 8002c84:	46a1      	mov	r9, r4
 8002c86:	eb18 0805 	adds.w	r8, r8, r5
 8002c8a:	eb49 0906 	adc.w	r9, r9, r6
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ca2:	4688      	mov	r8, r1
 8002ca4:	4691      	mov	r9, r2
 8002ca6:	eb18 0005 	adds.w	r0, r8, r5
 8002caa:	eb49 0106 	adc.w	r1, r9, r6
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	461d      	mov	r5, r3
 8002cb4:	f04f 0600 	mov.w	r6, #0
 8002cb8:	196b      	adds	r3, r5, r5
 8002cba:	eb46 0406 	adc.w	r4, r6, r6
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4623      	mov	r3, r4
 8002cc2:	f7fd fae5 	bl	8000290 <__aeabi_uldivmod>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4ba5      	ldr	r3, [pc, #660]	; (8002f64 <UART_SetConfig+0x384>)
 8002cce:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	461d      	mov	r5, r3
 8002cdc:	f04f 0600 	mov.w	r6, #0
 8002ce0:	46a9      	mov	r9, r5
 8002ce2:	46b2      	mov	sl, r6
 8002ce4:	eb19 0309 	adds.w	r3, r9, r9
 8002ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cec:	4699      	mov	r9, r3
 8002cee:	46a2      	mov	sl, r4
 8002cf0:	eb19 0905 	adds.w	r9, r9, r5
 8002cf4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d0c:	4689      	mov	r9, r1
 8002d0e:	4692      	mov	sl, r2
 8002d10:	eb19 0005 	adds.w	r0, r9, r5
 8002d14:	eb4a 0106 	adc.w	r1, sl, r6
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	f04f 0600 	mov.w	r6, #0
 8002d22:	196b      	adds	r3, r5, r5
 8002d24:	eb46 0406 	adc.w	r4, r6, r6
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f7fd fab0 	bl	8000290 <__aeabi_uldivmod>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <UART_SetConfig+0x384>)
 8002d38:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	2164      	movs	r1, #100	; 0x64
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	3332      	adds	r3, #50	; 0x32
 8002d4a:	4a86      	ldr	r2, [pc, #536]	; (8002f64 <UART_SetConfig+0x384>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d58:	4498      	add	r8, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	461d      	mov	r5, r3
 8002d5e:	f04f 0600 	mov.w	r6, #0
 8002d62:	46a9      	mov	r9, r5
 8002d64:	46b2      	mov	sl, r6
 8002d66:	eb19 0309 	adds.w	r3, r9, r9
 8002d6a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d6e:	4699      	mov	r9, r3
 8002d70:	46a2      	mov	sl, r4
 8002d72:	eb19 0905 	adds.w	r9, r9, r5
 8002d76:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d8e:	4689      	mov	r9, r1
 8002d90:	4692      	mov	sl, r2
 8002d92:	eb19 0005 	adds.w	r0, r9, r5
 8002d96:	eb4a 0106 	adc.w	r1, sl, r6
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	461d      	mov	r5, r3
 8002da0:	f04f 0600 	mov.w	r6, #0
 8002da4:	196b      	adds	r3, r5, r5
 8002da6:	eb46 0406 	adc.w	r4, r6, r6
 8002daa:	461a      	mov	r2, r3
 8002dac:	4623      	mov	r3, r4
 8002dae:	f7fd fa6f 	bl	8000290 <__aeabi_uldivmod>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <UART_SetConfig+0x384>)
 8002dba:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2164      	movs	r1, #100	; 0x64
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	3332      	adds	r3, #50	; 0x32
 8002dcc:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <UART_SetConfig+0x384>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 0207 	and.w	r2, r3, #7
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4442      	add	r2, r8
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e26f      	b.n	80032c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de2:	f7ff fbc1 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8002de6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	461d      	mov	r5, r3
 8002dec:	f04f 0600 	mov.w	r6, #0
 8002df0:	46a8      	mov	r8, r5
 8002df2:	46b1      	mov	r9, r6
 8002df4:	eb18 0308 	adds.w	r3, r8, r8
 8002df8:	eb49 0409 	adc.w	r4, r9, r9
 8002dfc:	4698      	mov	r8, r3
 8002dfe:	46a1      	mov	r9, r4
 8002e00:	eb18 0805 	adds.w	r8, r8, r5
 8002e04:	eb49 0906 	adc.w	r9, r9, r6
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e1c:	4688      	mov	r8, r1
 8002e1e:	4691      	mov	r9, r2
 8002e20:	eb18 0005 	adds.w	r0, r8, r5
 8002e24:	eb49 0106 	adc.w	r1, r9, r6
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	f04f 0600 	mov.w	r6, #0
 8002e32:	196b      	adds	r3, r5, r5
 8002e34:	eb46 0406 	adc.w	r4, r6, r6
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	f7fd fa28 	bl	8000290 <__aeabi_uldivmod>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <UART_SetConfig+0x384>)
 8002e48:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	461d      	mov	r5, r3
 8002e56:	f04f 0600 	mov.w	r6, #0
 8002e5a:	46a9      	mov	r9, r5
 8002e5c:	46b2      	mov	sl, r6
 8002e5e:	eb19 0309 	adds.w	r3, r9, r9
 8002e62:	eb4a 040a 	adc.w	r4, sl, sl
 8002e66:	4699      	mov	r9, r3
 8002e68:	46a2      	mov	sl, r4
 8002e6a:	eb19 0905 	adds.w	r9, r9, r5
 8002e6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e86:	4689      	mov	r9, r1
 8002e88:	4692      	mov	sl, r2
 8002e8a:	eb19 0005 	adds.w	r0, r9, r5
 8002e8e:	eb4a 0106 	adc.w	r1, sl, r6
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	461d      	mov	r5, r3
 8002e98:	f04f 0600 	mov.w	r6, #0
 8002e9c:	196b      	adds	r3, r5, r5
 8002e9e:	eb46 0406 	adc.w	r4, r6, r6
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	f7fd f9f3 	bl	8000290 <__aeabi_uldivmod>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	460c      	mov	r4, r1
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <UART_SetConfig+0x384>)
 8002eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2164      	movs	r1, #100	; 0x64
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	3332      	adds	r3, #50	; 0x32
 8002ec4:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <UART_SetConfig+0x384>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ed2:	4498      	add	r8, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	f04f 0600 	mov.w	r6, #0
 8002edc:	46a9      	mov	r9, r5
 8002ede:	46b2      	mov	sl, r6
 8002ee0:	eb19 0309 	adds.w	r3, r9, r9
 8002ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ee8:	4699      	mov	r9, r3
 8002eea:	46a2      	mov	sl, r4
 8002eec:	eb19 0905 	adds.w	r9, r9, r5
 8002ef0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f08:	4689      	mov	r9, r1
 8002f0a:	4692      	mov	sl, r2
 8002f0c:	eb19 0005 	adds.w	r0, r9, r5
 8002f10:	eb4a 0106 	adc.w	r1, sl, r6
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	461d      	mov	r5, r3
 8002f1a:	f04f 0600 	mov.w	r6, #0
 8002f1e:	196b      	adds	r3, r5, r5
 8002f20:	eb46 0406 	adc.w	r4, r6, r6
 8002f24:	461a      	mov	r2, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	f7fd f9b2 	bl	8000290 <__aeabi_uldivmod>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	460c      	mov	r4, r1
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <UART_SetConfig+0x384>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	; 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	3332      	adds	r3, #50	; 0x32
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <UART_SetConfig+0x384>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4442      	add	r2, r8
 8002f58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f5a:	e1b2      	b.n	80032c2 <UART_SetConfig+0x6e2>
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40011400 	.word	0x40011400
 8002f64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4ad7      	ldr	r2, [pc, #860]	; (80032cc <UART_SetConfig+0x6ec>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d005      	beq.n	8002f7e <UART_SetConfig+0x39e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4ad6      	ldr	r2, [pc, #856]	; (80032d0 <UART_SetConfig+0x6f0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	f040 80d1 	bne.w	8003120 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7e:	f7ff fb07 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002f82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	469a      	mov	sl, r3
 8002f88:	f04f 0b00 	mov.w	fp, #0
 8002f8c:	46d0      	mov	r8, sl
 8002f8e:	46d9      	mov	r9, fp
 8002f90:	eb18 0308 	adds.w	r3, r8, r8
 8002f94:	eb49 0409 	adc.w	r4, r9, r9
 8002f98:	4698      	mov	r8, r3
 8002f9a:	46a1      	mov	r9, r4
 8002f9c:	eb18 080a 	adds.w	r8, r8, sl
 8002fa0:	eb49 090b 	adc.w	r9, r9, fp
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fb8:	4688      	mov	r8, r1
 8002fba:	4691      	mov	r9, r2
 8002fbc:	eb1a 0508 	adds.w	r5, sl, r8
 8002fc0:	eb4b 0609 	adc.w	r6, fp, r9
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	0094      	lsls	r4, r2, #2
 8002fd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fdc:	008b      	lsls	r3, r1, #2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4623      	mov	r3, r4
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	f7fd f953 	bl	8000290 <__aeabi_uldivmod>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4bb8      	ldr	r3, [pc, #736]	; (80032d4 <UART_SetConfig+0x6f4>)
 8002ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	469b      	mov	fp, r3
 8003000:	f04f 0c00 	mov.w	ip, #0
 8003004:	46d9      	mov	r9, fp
 8003006:	46e2      	mov	sl, ip
 8003008:	eb19 0309 	adds.w	r3, r9, r9
 800300c:	eb4a 040a 	adc.w	r4, sl, sl
 8003010:	4699      	mov	r9, r3
 8003012:	46a2      	mov	sl, r4
 8003014:	eb19 090b 	adds.w	r9, r9, fp
 8003018:	eb4a 0a0c 	adc.w	sl, sl, ip
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800302c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003030:	4689      	mov	r9, r1
 8003032:	4692      	mov	sl, r2
 8003034:	eb1b 0509 	adds.w	r5, fp, r9
 8003038:	eb4c 060a 	adc.w	r6, ip, sl
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4619      	mov	r1, r3
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	f04f 0400 	mov.w	r4, #0
 800304e:	0094      	lsls	r4, r2, #2
 8003050:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003054:	008b      	lsls	r3, r1, #2
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	4628      	mov	r0, r5
 800305c:	4631      	mov	r1, r6
 800305e:	f7fd f917 	bl	8000290 <__aeabi_uldivmod>
 8003062:	4603      	mov	r3, r0
 8003064:	460c      	mov	r4, r1
 8003066:	461a      	mov	r2, r3
 8003068:	4b9a      	ldr	r3, [pc, #616]	; (80032d4 <UART_SetConfig+0x6f4>)
 800306a:	fba3 1302 	umull	r1, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2164      	movs	r1, #100	; 0x64
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	3332      	adds	r3, #50	; 0x32
 800307c:	4a95      	ldr	r2, [pc, #596]	; (80032d4 <UART_SetConfig+0x6f4>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003088:	4498      	add	r8, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	469b      	mov	fp, r3
 800308e:	f04f 0c00 	mov.w	ip, #0
 8003092:	46d9      	mov	r9, fp
 8003094:	46e2      	mov	sl, ip
 8003096:	eb19 0309 	adds.w	r3, r9, r9
 800309a:	eb4a 040a 	adc.w	r4, sl, sl
 800309e:	4699      	mov	r9, r3
 80030a0:	46a2      	mov	sl, r4
 80030a2:	eb19 090b 	adds.w	r9, r9, fp
 80030a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030be:	4689      	mov	r9, r1
 80030c0:	4692      	mov	sl, r2
 80030c2:	eb1b 0509 	adds.w	r5, fp, r9
 80030c6:	eb4c 060a 	adc.w	r6, ip, sl
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	f04f 0400 	mov.w	r4, #0
 80030dc:	0094      	lsls	r4, r2, #2
 80030de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4623      	mov	r3, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	4631      	mov	r1, r6
 80030ec:	f7fd f8d0 	bl	8000290 <__aeabi_uldivmod>
 80030f0:	4603      	mov	r3, r0
 80030f2:	460c      	mov	r4, r1
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <UART_SetConfig+0x6f4>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a72      	ldr	r2, [pc, #456]	; (80032d4 <UART_SetConfig+0x6f4>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4442      	add	r2, r8
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	e0d0      	b.n	80032c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003120:	f7ff fa22 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8003124:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	469a      	mov	sl, r3
 800312a:	f04f 0b00 	mov.w	fp, #0
 800312e:	46d0      	mov	r8, sl
 8003130:	46d9      	mov	r9, fp
 8003132:	eb18 0308 	adds.w	r3, r8, r8
 8003136:	eb49 0409 	adc.w	r4, r9, r9
 800313a:	4698      	mov	r8, r3
 800313c:	46a1      	mov	r9, r4
 800313e:	eb18 080a 	adds.w	r8, r8, sl
 8003142:	eb49 090b 	adc.w	r9, r9, fp
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003152:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003156:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800315a:	4688      	mov	r8, r1
 800315c:	4691      	mov	r9, r2
 800315e:	eb1a 0508 	adds.w	r5, sl, r8
 8003162:	eb4b 0609 	adc.w	r6, fp, r9
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0094      	lsls	r4, r2, #2
 800317a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800317e:	008b      	lsls	r3, r1, #2
 8003180:	461a      	mov	r2, r3
 8003182:	4623      	mov	r3, r4
 8003184:	4628      	mov	r0, r5
 8003186:	4631      	mov	r1, r6
 8003188:	f7fd f882 	bl	8000290 <__aeabi_uldivmod>
 800318c:	4603      	mov	r3, r0
 800318e:	460c      	mov	r4, r1
 8003190:	461a      	mov	r2, r3
 8003192:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <UART_SetConfig+0x6f4>)
 8003194:	fba3 2302 	umull	r2, r3, r3, r2
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	469b      	mov	fp, r3
 80031a2:	f04f 0c00 	mov.w	ip, #0
 80031a6:	46d9      	mov	r9, fp
 80031a8:	46e2      	mov	sl, ip
 80031aa:	eb19 0309 	adds.w	r3, r9, r9
 80031ae:	eb4a 040a 	adc.w	r4, sl, sl
 80031b2:	4699      	mov	r9, r3
 80031b4:	46a2      	mov	sl, r4
 80031b6:	eb19 090b 	adds.w	r9, r9, fp
 80031ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031d2:	4689      	mov	r9, r1
 80031d4:	4692      	mov	sl, r2
 80031d6:	eb1b 0509 	adds.w	r5, fp, r9
 80031da:	eb4c 060a 	adc.w	r6, ip, sl
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4619      	mov	r1, r3
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	f04f 0400 	mov.w	r4, #0
 80031f0:	0094      	lsls	r4, r2, #2
 80031f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	4631      	mov	r1, r6
 8003200:	f7fd f846 	bl	8000290 <__aeabi_uldivmod>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	461a      	mov	r2, r3
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <UART_SetConfig+0x6f4>)
 800320c:	fba3 1302 	umull	r1, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	2164      	movs	r1, #100	; 0x64
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	3332      	adds	r3, #50	; 0x32
 800321e:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <UART_SetConfig+0x6f4>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322a:	4498      	add	r8, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	469b      	mov	fp, r3
 8003230:	f04f 0c00 	mov.w	ip, #0
 8003234:	46d9      	mov	r9, fp
 8003236:	46e2      	mov	sl, ip
 8003238:	eb19 0309 	adds.w	r3, r9, r9
 800323c:	eb4a 040a 	adc.w	r4, sl, sl
 8003240:	4699      	mov	r9, r3
 8003242:	46a2      	mov	sl, r4
 8003244:	eb19 090b 	adds.w	r9, r9, fp
 8003248:	eb4a 0a0c 	adc.w	sl, sl, ip
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003258:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800325c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003260:	4689      	mov	r9, r1
 8003262:	4692      	mov	sl, r2
 8003264:	eb1b 0509 	adds.w	r5, fp, r9
 8003268:	eb4c 060a 	adc.w	r6, ip, sl
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4619      	mov	r1, r3
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	f04f 0400 	mov.w	r4, #0
 800327e:	0094      	lsls	r4, r2, #2
 8003280:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003284:	008b      	lsls	r3, r1, #2
 8003286:	461a      	mov	r2, r3
 8003288:	4623      	mov	r3, r4
 800328a:	4628      	mov	r0, r5
 800328c:	4631      	mov	r1, r6
 800328e:	f7fc ffff 	bl	8000290 <__aeabi_uldivmod>
 8003292:	4603      	mov	r3, r0
 8003294:	460c      	mov	r4, r1
 8003296:	461a      	mov	r2, r3
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <UART_SetConfig+0x6f4>)
 800329a:	fba3 1302 	umull	r1, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2164      	movs	r1, #100	; 0x64
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	; 0x32
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <UART_SetConfig+0x6f4>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4442      	add	r2, r8
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	e7ff      	b.n	80032c2 <UART_SetConfig+0x6e2>
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032cc:	40011000 	.word	0x40011000
 80032d0:	40011400 	.word	0x40011400
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <base64url_encode>:
	/* 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', */
	    44,  45,  46,  47,  48,  49,  50,  51,
};

int base64url_encode(const unsigned char *in, unsigned int inlen, char *out)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	unsigned int i, j;

	for (i = j = 0; i < inlen; i++) {
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e065      	b.n	80033ca <base64url_encode+0xe2>
		int s = i % 3; 			/* from 6/gcd(6, 8) */
 80032fe:	69f9      	ldr	r1, [r7, #28]
 8003300:	4b57      	ldr	r3, [pc, #348]	; (8003460 <base64url_encode+0x178>)
 8003302:	fba3 2301 	umull	r2, r3, r3, r1
 8003306:	085a      	lsrs	r2, r3, #1
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	1aca      	subs	r2, r1, r3
 8003310:	617a      	str	r2, [r7, #20]

		switch (s) {
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d014      	beq.n	8003342 <base64url_encode+0x5a>
 8003318:	2b02      	cmp	r3, #2
 800331a:	d02c      	beq.n	8003376 <base64url_encode+0x8e>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d151      	bne.n	80033c4 <base64url_encode+0xdc>
		case 0:
			out[j++] = base64en[(in[i] >> 2) & 0x3F];
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1c59      	adds	r1, r3, #1
 8003334:	61b9      	str	r1, [r7, #24]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	440b      	add	r3, r1
 800333a:	494a      	ldr	r1, [pc, #296]	; (8003464 <base64url_encode+0x17c>)
 800333c:	5c8a      	ldrb	r2, [r1, r2]
 800333e:	701a      	strb	r2, [r3, #0]
			continue;
 8003340:	e040      	b.n	80033c4 <base64url_encode+0xdc>
		case 1:
			out[j++] = base64en[((in[i-1] & 0x3) << 4) + ((in[i] >> 4) & 0xF)];
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3b01      	subs	r3, #1
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	440b      	add	r3, r1
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	431a      	orrs	r2, r3
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	1c59      	adds	r1, r3, #1
 8003368:	61b9      	str	r1, [r7, #24]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	440b      	add	r3, r1
 800336e:	493d      	ldr	r1, [pc, #244]	; (8003464 <base64url_encode+0x17c>)
 8003370:	5c8a      	ldrb	r2, [r1, r2]
 8003372:	701a      	strb	r2, [r3, #0]
			continue;
 8003374:	e026      	b.n	80033c4 <base64url_encode+0xdc>
		case 2:
			out[j++] = base64en[((in[i-1] & 0xF) << 2) + ((in[i] >> 6) & 0x3)];
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b01      	subs	r3, #1
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	440b      	add	r3, r1
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	431a      	orrs	r2, r3
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	61b9      	str	r1, [r7, #24]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	440b      	add	r3, r1
 80033a2:	4930      	ldr	r1, [pc, #192]	; (8003464 <base64url_encode+0x17c>)
 80033a4:	5c8a      	ldrb	r2, [r1, r2]
 80033a6:	701a      	strb	r2, [r3, #0]
			out[j++] = base64en[in[i] & 0x3F];
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	61b9      	str	r1, [r7, #24]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	440b      	add	r3, r1
 80033be:	4929      	ldr	r1, [pc, #164]	; (8003464 <base64url_encode+0x17c>)
 80033c0:	5c8a      	ldrb	r2, [r1, r2]
 80033c2:	701a      	strb	r2, [r3, #0]
	for (i = j = 0; i < inlen; i++) {
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3301      	adds	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d395      	bcc.n	80032fe <base64url_encode+0x16>
		}
	}

	/* move back */
	i -= 1;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]

	/* check the last and add padding */

	if ((i % 3) == 0) {
 80033d8:	69f9      	ldr	r1, [r7, #28]
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <base64url_encode+0x178>)
 80033dc:	fba3 2301 	umull	r2, r3, r3, r1
 80033e0:	085a      	lsrs	r2, r3, #1
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	1aca      	subs	r2, r1, r3
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	d10f      	bne.n	800340e <base64url_encode+0x126>
		out[j++] = base64en[(in[i] & 0x3) << 4];
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	61b9      	str	r1, [r7, #24]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	440b      	add	r3, r1
 8003406:	4917      	ldr	r1, [pc, #92]	; (8003464 <base64url_encode+0x17c>)
 8003408:	5c8a      	ldrb	r2, [r1, r2]
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e019      	b.n	8003442 <base64url_encode+0x15a>
		//out[j++] = BASE64_PAD;
		//out[j++] = BASE64_PAD;
	} else if ((i % 3) == 1) {
 800340e:	69f9      	ldr	r1, [r7, #28]
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <base64url_encode+0x178>)
 8003412:	fba3 2301 	umull	r2, r3, r3, r1
 8003416:	085a      	lsrs	r2, r3, #1
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	1aca      	subs	r2, r1, r3
 8003420:	2a01      	cmp	r2, #1
 8003422:	d10e      	bne.n	8003442 <base64url_encode+0x15a>
		out[j++] = base64en[(in[i] & 0xF) << 2];
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	61b9      	str	r1, [r7, #24]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	440b      	add	r3, r1
 800343c:	4909      	ldr	r1, [pc, #36]	; (8003464 <base64url_encode+0x17c>)
 800343e:	5c8a      	ldrb	r2, [r1, r2]
 8003440:	701a      	strb	r2, [r3, #0]
		//out[j++] = BASE64_PAD;
	}

    out[j++] = 0;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	61ba      	str	r2, [r7, #24]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]

	return BASE64_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	aaaaaaab 	.word	0xaaaaaaab
 8003464:	0801753c 	.word	0x0801753c

08003468 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8003470:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003474:	2100      	movs	r1, #0
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f011 f8b7 	bl	80145ea <memset>
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8003492:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f00d f9e0 	bl	801085c <mbedtls_platform_zeroize>
 800349c:	e000      	b.n	80034a0 <mbedtls_aes_free+0x1c>
        return;
 800349e:	bf00      	nop
}
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2bc0      	cmp	r3, #192	; 0xc0
 80034b8:	d008      	beq.n	80034cc <mbedtls_aes_setkey_enc+0x24>
 80034ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034be:	d009      	beq.n	80034d4 <mbedtls_aes_setkey_enc+0x2c>
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d10b      	bne.n	80034dc <mbedtls_aes_setkey_enc+0x34>
    {
        case 128: ctx->nr = 10; break;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	220a      	movs	r2, #10
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e00a      	b.n	80034e2 <mbedtls_aes_setkey_enc+0x3a>
        case 192: ctx->nr = 12; break;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	220c      	movs	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e006      	b.n	80034e2 <mbedtls_aes_setkey_enc+0x3a>
        case 256: ctx->nr = 14; break;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	220e      	movs	r2, #14
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e002      	b.n	80034e2 <mbedtls_aes_setkey_enc+0x3a>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80034dc:	f06f 031f 	mvn.w	r3, #31
 80034e0:	e1a4      	b.n	800382c <mbedtls_aes_setkey_enc+0x384>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3308      	adds	r3, #8
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e027      	b.n	8003544 <mbedtls_aes_setkey_enc+0x9c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	4413      	add	r3, r2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	4619      	mov	r1, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	3301      	adds	r3, #1
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	ea41 0203 	orr.w	r2, r1, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	440b      	add	r3, r1
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	ea42 0103 	orr.w	r1, r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	3303      	adds	r3, #3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	061a      	lsls	r2, r3, #24
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	6938      	ldr	r0, [r7, #16]
 8003538:	4403      	add	r3, r0
 800353a:	430a      	orrs	r2, r1
 800353c:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3301      	adds	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3d2      	bcc.n	80034f4 <mbedtls_aes_setkey_enc+0x4c>
    }

    switch( ctx->nr )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d05c      	beq.n	8003610 <mbedtls_aes_setkey_enc+0x168>
 8003556:	2b0e      	cmp	r3, #14
 8003558:	f000 80c5 	beq.w	80036e6 <mbedtls_aes_setkey_enc+0x23e>
 800355c:	2b0a      	cmp	r3, #10
 800355e:	f040 8164 	bne.w	800382a <mbedtls_aes_setkey_enc+0x382>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e04f      	b.n	8003608 <mbedtls_aes_setkey_enc+0x160>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	495f      	ldr	r1, [pc, #380]	; (80036ec <mbedtls_aes_setkey_enc+0x244>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003574:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	320c      	adds	r2, #12
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	0a12      	lsrs	r2, r2, #8
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	495b      	ldr	r1, [pc, #364]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 8003582:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8003584:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	330c      	adds	r3, #12
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4957      	ldr	r1, [pc, #348]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8003596:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	330c      	adds	r3, #12
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0e1b      	lsrs	r3, r3, #24
 80035a0:	4953      	ldr	r1, [pc, #332]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80035a6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	330c      	adds	r3, #12
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4a4f      	ldr	r2, [pc, #316]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80035bc:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 80035be:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	3304      	adds	r3, #4
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3310      	adds	r3, #16
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3314      	adds	r3, #20
 80035d0:	404a      	eors	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	3308      	adds	r3, #8
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	3314      	adds	r3, #20
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	3318      	adds	r3, #24
 80035e4:	404a      	eors	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	330c      	adds	r3, #12
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	3318      	adds	r3, #24
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	331c      	adds	r3, #28
 80035f8:	404a      	eors	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3310      	adds	r3, #16
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b09      	cmp	r3, #9
 800360c:	d9ac      	bls.n	8003568 <mbedtls_aes_setkey_enc+0xc0>
            }
            break;
 800360e:	e10c      	b.n	800382a <mbedtls_aes_setkey_enc+0x382>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e063      	b.n	80036de <mbedtls_aes_setkey_enc+0x236>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4934      	ldr	r1, [pc, #208]	; (80036ec <mbedtls_aes_setkey_enc+0x244>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003622:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	3214      	adds	r2, #20
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	0a12      	lsrs	r2, r2, #8
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	4930      	ldr	r1, [pc, #192]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 8003630:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8003632:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3314      	adds	r3, #20
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	b2db      	uxtb	r3, r3
 800363e:	492c      	ldr	r1, [pc, #176]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003644:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	3314      	adds	r3, #20
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	0e1b      	lsrs	r3, r3, #24
 800364e:	4928      	ldr	r1, [pc, #160]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003654:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3314      	adds	r3, #20
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <mbedtls_aes_setkey_enc+0x248>)
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800366a:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800366c:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3304      	adds	r3, #4
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	3318      	adds	r3, #24
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	331c      	adds	r3, #28
 800367e:	404a      	eors	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3308      	adds	r3, #8
 8003686:	6819      	ldr	r1, [r3, #0]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	331c      	adds	r3, #28
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3320      	adds	r3, #32
 8003692:	404a      	eors	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	330c      	adds	r3, #12
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3320      	adds	r3, #32
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3324      	adds	r3, #36	; 0x24
 80036a6:	404a      	eors	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3310      	adds	r3, #16
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	3324      	adds	r3, #36	; 0x24
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3328      	adds	r3, #40	; 0x28
 80036ba:	404a      	eors	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	3314      	adds	r3, #20
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	3328      	adds	r3, #40	; 0x28
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	332c      	adds	r3, #44	; 0x2c
 80036ce:	404a      	eors	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	3301      	adds	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	3318      	adds	r3, #24
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b07      	cmp	r3, #7
 80036e2:	d998      	bls.n	8003616 <mbedtls_aes_setkey_enc+0x16e>
            }
            break;
 80036e4:	e0a1      	b.n	800382a <mbedtls_aes_setkey_enc+0x382>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e099      	b.n	8003820 <mbedtls_aes_setkey_enc+0x378>
 80036ec:	0801977c 	.word	0x0801977c
 80036f0:	0801757c 	.word	0x0801757c
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	494f      	ldr	r1, [pc, #316]	; (8003838 <mbedtls_aes_setkey_enc+0x390>)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003700:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	321c      	adds	r2, #28
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	0a12      	lsrs	r2, r2, #8
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	494b      	ldr	r1, [pc, #300]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 800370e:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8003710:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	331c      	adds	r3, #28
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4947      	ldr	r1, [pc, #284]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003722:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	331c      	adds	r3, #28
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	0e1b      	lsrs	r3, r3, #24
 800372c:	4943      	ldr	r1, [pc, #268]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003732:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	331c      	adds	r3, #28
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4a3f      	ldr	r2, [pc, #252]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 8003740:	5cd3      	ldrb	r3, [r2, r3]
 8003742:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003748:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800374a:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3304      	adds	r3, #4
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3320      	adds	r3, #32
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	3324      	adds	r3, #36	; 0x24
 800375c:	404a      	eors	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	3308      	adds	r3, #8
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	3324      	adds	r3, #36	; 0x24
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3328      	adds	r3, #40	; 0x28
 8003770:	404a      	eors	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	330c      	adds	r3, #12
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	3328      	adds	r3, #40	; 0x28
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	332c      	adds	r3, #44	; 0x2c
 8003784:	404a      	eors	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	3310      	adds	r3, #16
 800378c:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	322c      	adds	r2, #44	; 0x2c
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	4929      	ldr	r1, [pc, #164]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 8003798:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800379a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	332c      	adds	r3, #44	; 0x2c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4925      	ldr	r1, [pc, #148]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80037ac:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	332c      	adds	r3, #44	; 0x2c
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4920      	ldr	r1, [pc, #128]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80037be:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	332c      	adds	r3, #44	; 0x2c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e1b      	lsrs	r3, r3, #24
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <mbedtls_aes_setkey_enc+0x394>)
 80037cc:	5cd3      	ldrb	r3, [r2, r3]
 80037ce:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80037d4:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80037d6:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	3314      	adds	r3, #20
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3330      	adds	r3, #48	; 0x30
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	3334      	adds	r3, #52	; 0x34
 80037e8:	404a      	eors	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	3318      	adds	r3, #24
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3334      	adds	r3, #52	; 0x34
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3338      	adds	r3, #56	; 0x38
 80037fc:	404a      	eors	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	331c      	adds	r3, #28
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3338      	adds	r3, #56	; 0x38
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	333c      	adds	r3, #60	; 0x3c
 8003810:	404a      	eors	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3301      	adds	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3320      	adds	r3, #32
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b06      	cmp	r3, #6
 8003824:	f67f af66 	bls.w	80036f4 <mbedtls_aes_setkey_enc+0x24c>
            }
            break;
 8003828:	bf00      	nop
    }

    return( 0 );
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	0801977c 	.word	0x0801977c
 800383c:	0801757c 	.word	0x0801757c

08003840 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003840:	b480      	push	{r7}
 8003842:	b08f      	sub	sp, #60	; 0x3c
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3301      	adds	r3, #1
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	431a      	orrs	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3302      	adds	r3, #2
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3303      	adds	r3, #3
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	4313      	orrs	r3, r2
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	633a      	str	r2, [r7, #48]	; 0x30
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003882:	4053      	eors	r3, r2
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3304      	adds	r3, #4
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3305      	adds	r3, #5
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	431a      	orrs	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3306      	adds	r3, #6
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3307      	adds	r3, #7
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	4313      	orrs	r3, r2
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	1d1a      	adds	r2, r3, #4
 80038b2:	633a      	str	r2, [r7, #48]	; 0x30
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b8:	4053      	eors	r3, r2
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	3308      	adds	r3, #8
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3309      	adds	r3, #9
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	330a      	adds	r3, #10
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	330b      	adds	r3, #11
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	4313      	orrs	r3, r2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	1d1a      	adds	r2, r3, #4
 80038e8:	633a      	str	r2, [r7, #48]	; 0x30
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ee:	4053      	eors	r3, r2
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	330c      	adds	r3, #12
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	330d      	adds	r3, #13
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	431a      	orrs	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	330e      	adds	r3, #14
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	330f      	adds	r3, #15
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	4313      	orrs	r3, r2
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	1d1a      	adds	r2, r3, #4
 800391e:	633a      	str	r2, [r7, #48]	; 0x30
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a3a      	ldr	r2, [r7, #32]
 8003924:	4053      	eors	r3, r2
 8003926:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	105b      	asrs	r3, r3, #1
 800392e:	3b01      	subs	r3, #1
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
 8003932:	e0fa      	b.n	8003b2a <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	1d1a      	adds	r2, r3, #4
 8003938:	633a      	str	r2, [r7, #48]	; 0x30
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	b2db      	uxtb	r3, r3
 8003940:	49ac      	ldr	r1, [pc, #688]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003942:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003946:	405a      	eors	r2, r3
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	b2db      	uxtb	r3, r3
 800394e:	49aa      	ldr	r1, [pc, #680]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003950:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003954:	405a      	eors	r2, r3
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	b2db      	uxtb	r3, r3
 800395c:	49a7      	ldr	r1, [pc, #668]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 800395e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003962:	405a      	eors	r2, r3
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	0e1b      	lsrs	r3, r3, #24
 8003968:	49a5      	ldr	r1, [pc, #660]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 800396a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800396e:	4053      	eors	r3, r2
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	633a      	str	r2, [r7, #48]	; 0x30
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	b2db      	uxtb	r3, r3
 800397e:	499d      	ldr	r1, [pc, #628]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003980:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003984:	405a      	eors	r2, r3
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	b2db      	uxtb	r3, r3
 800398c:	499a      	ldr	r1, [pc, #616]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 800398e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003992:	405a      	eors	r2, r3
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	0c1b      	lsrs	r3, r3, #16
 8003998:	b2db      	uxtb	r3, r3
 800399a:	4998      	ldr	r1, [pc, #608]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 800399c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a0:	405a      	eors	r2, r3
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	0e1b      	lsrs	r3, r3, #24
 80039a6:	4996      	ldr	r1, [pc, #600]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 80039a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ac:	4053      	eors	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	1d1a      	adds	r2, r3, #4
 80039b4:	633a      	str	r2, [r7, #48]	; 0x30
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	498d      	ldr	r1, [pc, #564]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 80039be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039c2:	405a      	eors	r2, r3
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	498b      	ldr	r1, [pc, #556]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 80039cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039d0:	405a      	eors	r2, r3
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	4988      	ldr	r1, [pc, #544]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 80039da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039de:	405a      	eors	r2, r3
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	0e1b      	lsrs	r3, r3, #24
 80039e4:	4986      	ldr	r1, [pc, #536]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 80039e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ea:	4053      	eors	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	1d1a      	adds	r2, r3, #4
 80039f2:	633a      	str	r2, [r7, #48]	; 0x30
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	497e      	ldr	r1, [pc, #504]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 80039fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a00:	405a      	eors	r2, r3
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	497b      	ldr	r1, [pc, #492]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a0e:	405a      	eors	r2, r3
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	0c1b      	lsrs	r3, r3, #16
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4979      	ldr	r1, [pc, #484]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a1c:	405a      	eors	r2, r3
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	0e1b      	lsrs	r3, r3, #24
 8003a22:	4977      	ldr	r1, [pc, #476]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a28:	4053      	eors	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	633a      	str	r2, [r7, #48]	; 0x30
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	496e      	ldr	r1, [pc, #440]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003a3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a3e:	405a      	eors	r2, r3
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	496c      	ldr	r1, [pc, #432]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a4c:	405a      	eors	r2, r3
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	4969      	ldr	r1, [pc, #420]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a5a:	405a      	eors	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	0e1b      	lsrs	r3, r3, #24
 8003a60:	4967      	ldr	r1, [pc, #412]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003a62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a66:	4053      	eors	r3, r2
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	495f      	ldr	r1, [pc, #380]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003a78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a7c:	405a      	eors	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	495c      	ldr	r1, [pc, #368]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a8a:	405a      	eors	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	0c1b      	lsrs	r3, r3, #16
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	495a      	ldr	r1, [pc, #360]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a98:	405a      	eors	r2, r3
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	0e1b      	lsrs	r3, r3, #24
 8003a9e:	4958      	ldr	r1, [pc, #352]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003aa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aa4:	4053      	eors	r3, r2
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	633a      	str	r2, [r7, #48]	; 0x30
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	494f      	ldr	r1, [pc, #316]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aba:	405a      	eors	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	494d      	ldr	r1, [pc, #308]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ac8:	405a      	eors	r2, r3
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	494a      	ldr	r1, [pc, #296]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003ad2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ad6:	405a      	eors	r2, r3
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	0e1b      	lsrs	r3, r3, #24
 8003adc:	4948      	ldr	r1, [pc, #288]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003ade:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ae2:	4053      	eors	r3, r2
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	1d1a      	adds	r2, r3, #4
 8003aea:	633a      	str	r2, [r7, #48]	; 0x30
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	4940      	ldr	r1, [pc, #256]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003af8:	405a      	eors	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	493d      	ldr	r1, [pc, #244]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003b02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b06:	405a      	eors	r2, r3
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	493b      	ldr	r1, [pc, #236]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b14:	405a      	eors	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	4939      	ldr	r1, [pc, #228]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b20:	4053      	eors	r3, r2
 8003b22:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	3b01      	subs	r3, #1
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f73f af01 	bgt.w	8003934 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	1d1a      	adds	r2, r3, #4
 8003b36:	633a      	str	r2, [r7, #48]	; 0x30
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	492d      	ldr	r1, [pc, #180]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003b40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b44:	405a      	eors	r2, r3
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	492a      	ldr	r1, [pc, #168]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b52:	405a      	eors	r2, r3
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4928      	ldr	r1, [pc, #160]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003b5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b60:	405a      	eors	r2, r3
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	0e1b      	lsrs	r3, r3, #24
 8003b66:	4926      	ldr	r1, [pc, #152]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003b68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b6c:	4053      	eors	r3, r2
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	633a      	str	r2, [r7, #48]	; 0x30
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	491d      	ldr	r1, [pc, #116]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003b7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b82:	405a      	eors	r2, r3
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	491b      	ldr	r1, [pc, #108]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b90:	405a      	eors	r2, r3
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4918      	ldr	r1, [pc, #96]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b9e:	405a      	eors	r2, r3
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	0e1b      	lsrs	r3, r3, #24
 8003ba4:	4916      	ldr	r1, [pc, #88]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003ba6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003baa:	4053      	eors	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	1d1a      	adds	r2, r3, #4
 8003bb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003bbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bc0:	405a      	eors	r2, r3
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	490b      	ldr	r1, [pc, #44]	; (8003bf8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003bca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bce:	405a      	eors	r2, r3
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003bd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bdc:	405a      	eors	r2, r3
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	0e1b      	lsrs	r3, r3, #24
 8003be2:	4907      	ldr	r1, [pc, #28]	; (8003c00 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003be4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003be8:	4053      	eors	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	1d1a      	adds	r2, r3, #4
 8003bf0:	e008      	b.n	8003c04 <mbedtls_internal_aes_encrypt+0x3c4>
 8003bf2:	bf00      	nop
 8003bf4:	0801767c 	.word	0x0801767c
 8003bf8:	08017a7c 	.word	0x08017a7c
 8003bfc:	08017e7c 	.word	0x08017e7c
 8003c00:	0801827c 	.word	0x0801827c
 8003c04:	633a      	str	r2, [r7, #48]	; 0x30
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	4979      	ldr	r1, [pc, #484]	; (8003df4 <mbedtls_internal_aes_encrypt+0x5b4>)
 8003c0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c12:	405a      	eors	r2, r3
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4977      	ldr	r1, [pc, #476]	; (8003df8 <mbedtls_internal_aes_encrypt+0x5b8>)
 8003c1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c20:	405a      	eors	r2, r3
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4974      	ldr	r1, [pc, #464]	; (8003dfc <mbedtls_internal_aes_encrypt+0x5bc>)
 8003c2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c2e:	405a      	eors	r2, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	0e1b      	lsrs	r3, r3, #24
 8003c34:	4972      	ldr	r1, [pc, #456]	; (8003e00 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c3a:	4053      	eors	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	1d1a      	adds	r2, r3, #4
 8003c42:	633a      	str	r2, [r7, #48]	; 0x30
 8003c44:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	496e      	ldr	r1, [pc, #440]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003c4c:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8003c4e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	496b      	ldr	r1, [pc, #428]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003c58:	5ccb      	ldrb	r3, [r1, r3]
 8003c5a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003c5c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	4967      	ldr	r1, [pc, #412]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003c6a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	0e1b      	lsrs	r3, r3, #24
 8003c70:	4964      	ldr	r1, [pc, #400]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003c76:	4053      	eors	r3, r2
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c80:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	495f      	ldr	r1, [pc, #380]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003c88:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003c8a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	495c      	ldr	r1, [pc, #368]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003c98:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	4958      	ldr	r1, [pc, #352]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ca6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	0e1b      	lsrs	r3, r3, #24
 8003cac:	4955      	ldr	r1, [pc, #340]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003cb2:	4053      	eors	r3, r2
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	1d1a      	adds	r2, r3, #4
 8003cba:	633a      	str	r2, [r7, #48]	; 0x30
 8003cbc:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	4950      	ldr	r1, [pc, #320]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003cc4:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003cc6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	494d      	ldr	r1, [pc, #308]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003cd0:	5ccb      	ldrb	r3, [r1, r3]
 8003cd2:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003cd4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4949      	ldr	r1, [pc, #292]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ce2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	0e1b      	lsrs	r3, r3, #24
 8003ce8:	4946      	ldr	r1, [pc, #280]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003cee:	4053      	eors	r3, r2
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	1d1a      	adds	r2, r3, #4
 8003cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8003cf8:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	4941      	ldr	r1, [pc, #260]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003d00:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003d02:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	493e      	ldr	r1, [pc, #248]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003d0c:	5ccb      	ldrb	r3, [r1, r3]
 8003d0e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003d10:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	493a      	ldr	r1, [pc, #232]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003d1e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	0e1b      	lsrs	r3, r3, #24
 8003d24:	4937      	ldr	r1, [pc, #220]	; (8003e04 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003d2a:	4053      	eors	r3, r2
 8003d2c:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	0a1a      	lsrs	r2, r3, #8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	0c1a      	lsrs	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3302      	adds	r3, #2
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	0e1a      	lsrs	r2, r3, #24
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3303      	adds	r3, #3
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	0a1a      	lsrs	r2, r3, #8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3305      	adds	r3, #5
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	0c1a      	lsrs	r2, r3, #16
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3306      	adds	r3, #6
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	0e1a      	lsrs	r2, r3, #24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3307      	adds	r3, #7
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	0a1a      	lsrs	r2, r3, #8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3309      	adds	r3, #9
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	0c1a      	lsrs	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	330a      	adds	r3, #10
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	0e1a      	lsrs	r2, r3, #24
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	330b      	adds	r3, #11
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	330c      	adds	r3, #12
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	0a1a      	lsrs	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	330d      	adds	r3, #13
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	0c1a      	lsrs	r2, r3, #16
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	330e      	adds	r3, #14
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	0e1a      	lsrs	r2, r3, #24
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	330f      	adds	r3, #15
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	373c      	adds	r7, #60	; 0x3c
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	0801767c 	.word	0x0801767c
 8003df8:	08017a7c 	.word	0x08017a7c
 8003dfc:	08017e7c 	.word	0x08017e7c
 8003e00:	0801827c 	.word	0x0801827c
 8003e04:	0801757c 	.word	0x0801757c

08003e08 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b08f      	sub	sp, #60	; 0x3c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3301      	adds	r3, #1
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3303      	adds	r3, #3
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	633a      	str	r2, [r7, #48]	; 0x30
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4a:	4053      	eors	r3, r2
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3304      	adds	r3, #4
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3305      	adds	r3, #5
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3306      	adds	r3, #6
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3307      	adds	r3, #7
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	4313      	orrs	r3, r2
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	1d1a      	adds	r2, r3, #4
 8003e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e80:	4053      	eors	r3, r2
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3308      	adds	r3, #8
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	3309      	adds	r3, #9
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	330a      	adds	r3, #10
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	330b      	adds	r3, #11
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	061b      	lsls	r3, r3, #24
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	633a      	str	r2, [r7, #48]	; 0x30
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb6:	4053      	eors	r3, r2
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	330d      	adds	r3, #13
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	330e      	adds	r3, #14
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	330f      	adds	r3, #15
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	4053      	eors	r3, r2
 8003eee:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	105b      	asrs	r3, r3, #1
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8003efa:	e0fa      	b.n	80040f2 <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	1d1a      	adds	r2, r3, #4
 8003f00:	633a      	str	r2, [r7, #48]	; 0x30
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	49ac      	ldr	r1, [pc, #688]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f0e:	405a      	eors	r2, r3
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	49aa      	ldr	r1, [pc, #680]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f1c:	405a      	eors	r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	49a7      	ldr	r1, [pc, #668]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f2a:	405a      	eors	r2, r3
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	0e1b      	lsrs	r3, r3, #24
 8003f30:	49a5      	ldr	r1, [pc, #660]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 8003f32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f36:	4053      	eors	r3, r2
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	1d1a      	adds	r2, r3, #4
 8003f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	499d      	ldr	r1, [pc, #628]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f4c:	405a      	eors	r2, r3
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	499a      	ldr	r1, [pc, #616]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f5a:	405a      	eors	r2, r3
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	4998      	ldr	r1, [pc, #608]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f68:	405a      	eors	r2, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	0e1b      	lsrs	r3, r3, #24
 8003f6e:	4996      	ldr	r1, [pc, #600]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 8003f70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f74:	4053      	eors	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	633a      	str	r2, [r7, #48]	; 0x30
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	498d      	ldr	r1, [pc, #564]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f8a:	405a      	eors	r2, r3
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	498b      	ldr	r1, [pc, #556]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f98:	405a      	eors	r2, r3
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	4988      	ldr	r1, [pc, #544]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003fa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fa6:	405a      	eors	r2, r3
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	0e1b      	lsrs	r3, r3, #24
 8003fac:	4986      	ldr	r1, [pc, #536]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 8003fae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fb2:	4053      	eors	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	1d1a      	adds	r2, r3, #4
 8003fba:	633a      	str	r2, [r7, #48]	; 0x30
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	497e      	ldr	r1, [pc, #504]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8003fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fc8:	405a      	eors	r2, r3
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	497b      	ldr	r1, [pc, #492]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fd6:	405a      	eors	r2, r3
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	0c1b      	lsrs	r3, r3, #16
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4979      	ldr	r1, [pc, #484]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fe4:	405a      	eors	r2, r3
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	0e1b      	lsrs	r3, r3, #24
 8003fea:	4977      	ldr	r1, [pc, #476]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 8003fec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ff0:	4053      	eors	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	633a      	str	r2, [r7, #48]	; 0x30
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	496e      	ldr	r1, [pc, #440]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8004002:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004006:	405a      	eors	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b2db      	uxtb	r3, r3
 800400e:	496c      	ldr	r1, [pc, #432]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004010:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004014:	405a      	eors	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4969      	ldr	r1, [pc, #420]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800401e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004022:	405a      	eors	r2, r3
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	0e1b      	lsrs	r3, r3, #24
 8004028:	4967      	ldr	r1, [pc, #412]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 800402a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800402e:	4053      	eors	r3, r2
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	1d1a      	adds	r2, r3, #4
 8004036:	633a      	str	r2, [r7, #48]	; 0x30
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	495f      	ldr	r1, [pc, #380]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8004040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004044:	405a      	eors	r2, r3
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b2db      	uxtb	r3, r3
 800404c:	495c      	ldr	r1, [pc, #368]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800404e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004052:	405a      	eors	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	b2db      	uxtb	r3, r3
 800405a:	495a      	ldr	r1, [pc, #360]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800405c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004060:	405a      	eors	r2, r3
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	4958      	ldr	r1, [pc, #352]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 8004068:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800406c:	4053      	eors	r3, r2
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	633a      	str	r2, [r7, #48]	; 0x30
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	494f      	ldr	r1, [pc, #316]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800407e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004082:	405a      	eors	r2, r3
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	b2db      	uxtb	r3, r3
 800408a:	494d      	ldr	r1, [pc, #308]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800408c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004090:	405a      	eors	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	b2db      	uxtb	r3, r3
 8004098:	494a      	ldr	r1, [pc, #296]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800409a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800409e:	405a      	eors	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	0e1b      	lsrs	r3, r3, #24
 80040a4:	4948      	ldr	r1, [pc, #288]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 80040a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040aa:	4053      	eors	r3, r2
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	633a      	str	r2, [r7, #48]	; 0x30
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4940      	ldr	r1, [pc, #256]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 80040bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040c0:	405a      	eors	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	493d      	ldr	r1, [pc, #244]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 80040ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040ce:	405a      	eors	r2, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	493b      	ldr	r1, [pc, #236]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 80040d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040dc:	405a      	eors	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	0e1b      	lsrs	r3, r3, #24
 80040e2:	4939      	ldr	r1, [pc, #228]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 80040e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040e8:	4053      	eors	r3, r2
 80040ea:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	3b01      	subs	r3, #1
 80040f0:	637b      	str	r3, [r7, #52]	; 0x34
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f73f af01 	bgt.w	8003efc <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	1d1a      	adds	r2, r3, #4
 80040fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	b2db      	uxtb	r3, r3
 8004106:	492d      	ldr	r1, [pc, #180]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8004108:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800410c:	405a      	eors	r2, r3
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	b2db      	uxtb	r3, r3
 8004114:	492a      	ldr	r1, [pc, #168]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004116:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800411a:	405a      	eors	r2, r3
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	0c1b      	lsrs	r3, r3, #16
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4928      	ldr	r1, [pc, #160]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004124:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004128:	405a      	eors	r2, r3
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	0e1b      	lsrs	r3, r3, #24
 800412e:	4926      	ldr	r1, [pc, #152]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 8004130:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004134:	4053      	eors	r3, r2
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	633a      	str	r2, [r7, #48]	; 0x30
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	b2db      	uxtb	r3, r3
 8004144:	491d      	ldr	r1, [pc, #116]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8004146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800414a:	405a      	eors	r2, r3
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	b2db      	uxtb	r3, r3
 8004152:	491b      	ldr	r1, [pc, #108]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004154:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004158:	405a      	eors	r2, r3
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	b2db      	uxtb	r3, r3
 8004160:	4918      	ldr	r1, [pc, #96]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004162:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004166:	405a      	eors	r2, r3
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	0e1b      	lsrs	r3, r3, #24
 800416c:	4916      	ldr	r1, [pc, #88]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 800416e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004172:	4053      	eors	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	1d1a      	adds	r2, r3, #4
 800417a:	633a      	str	r2, [r7, #48]	; 0x30
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	b2db      	uxtb	r3, r3
 8004182:	490e      	ldr	r1, [pc, #56]	; (80041bc <mbedtls_internal_aes_decrypt+0x3b4>)
 8004184:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004188:	405a      	eors	r2, r3
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	b2db      	uxtb	r3, r3
 8004190:	490b      	ldr	r1, [pc, #44]	; (80041c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004192:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004196:	405a      	eors	r2, r3
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	b2db      	uxtb	r3, r3
 800419e:	4909      	ldr	r1, [pc, #36]	; (80041c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 80041a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041a4:	405a      	eors	r2, r3
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	0e1b      	lsrs	r3, r3, #24
 80041aa:	4907      	ldr	r1, [pc, #28]	; (80041c8 <mbedtls_internal_aes_decrypt+0x3c0>)
 80041ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041b0:	4053      	eors	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	e008      	b.n	80041cc <mbedtls_internal_aes_decrypt+0x3c4>
 80041ba:	bf00      	nop
 80041bc:	0801877c 	.word	0x0801877c
 80041c0:	08018b7c 	.word	0x08018b7c
 80041c4:	08018f7c 	.word	0x08018f7c
 80041c8:	0801937c 	.word	0x0801937c
 80041cc:	633a      	str	r2, [r7, #48]	; 0x30
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4979      	ldr	r1, [pc, #484]	; (80043bc <mbedtls_internal_aes_decrypt+0x5b4>)
 80041d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041da:	405a      	eors	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	4977      	ldr	r1, [pc, #476]	; (80043c0 <mbedtls_internal_aes_decrypt+0x5b8>)
 80041e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041e8:	405a      	eors	r2, r3
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4974      	ldr	r1, [pc, #464]	; (80043c4 <mbedtls_internal_aes_decrypt+0x5bc>)
 80041f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041f6:	405a      	eors	r2, r3
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	0e1b      	lsrs	r3, r3, #24
 80041fc:	4972      	ldr	r1, [pc, #456]	; (80043c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 80041fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004202:	4053      	eors	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	1d1a      	adds	r2, r3, #4
 800420a:	633a      	str	r2, [r7, #48]	; 0x30
 800420c:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	496e      	ldr	r1, [pc, #440]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 8004214:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8004216:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b2db      	uxtb	r3, r3
 800421e:	496b      	ldr	r1, [pc, #428]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 8004220:	5ccb      	ldrb	r3, [r1, r3]
 8004222:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8004224:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4967      	ldr	r1, [pc, #412]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004232:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	0e1b      	lsrs	r3, r3, #24
 8004238:	4964      	ldr	r1, [pc, #400]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 800423e:	4053      	eors	r3, r2
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	633a      	str	r2, [r7, #48]	; 0x30
 8004248:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	495f      	ldr	r1, [pc, #380]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 8004250:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8004252:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b2db      	uxtb	r3, r3
 800425a:	495c      	ldr	r1, [pc, #368]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8004260:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4958      	ldr	r1, [pc, #352]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800426e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	0e1b      	lsrs	r3, r3, #24
 8004274:	4955      	ldr	r1, [pc, #340]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 800427a:	4053      	eors	r3, r2
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	633a      	str	r2, [r7, #48]	; 0x30
 8004284:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	4950      	ldr	r1, [pc, #320]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 800428c:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 800428e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	b2db      	uxtb	r3, r3
 8004296:	494d      	ldr	r1, [pc, #308]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800429c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	4949      	ldr	r1, [pc, #292]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80042aa:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	0e1b      	lsrs	r3, r3, #24
 80042b0:	4946      	ldr	r1, [pc, #280]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 80042b6:	4053      	eors	r3, r2
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	633a      	str	r2, [r7, #48]	; 0x30
 80042c0:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	4941      	ldr	r1, [pc, #260]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 80042c8:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 80042ca:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	493e      	ldr	r1, [pc, #248]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80042d8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	493a      	ldr	r1, [pc, #232]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80042e6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	0e1b      	lsrs	r3, r3, #24
 80042ec:	4937      	ldr	r1, [pc, #220]	; (80043cc <mbedtls_internal_aes_decrypt+0x5c4>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80042f2:	4053      	eors	r3, r2
 80042f4:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	0a1a      	lsrs	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3301      	adds	r3, #1
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	0c1a      	lsrs	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3302      	adds	r3, #2
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	0e1a      	lsrs	r2, r3, #24
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3303      	adds	r3, #3
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	0a1a      	lsrs	r2, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3305      	adds	r3, #5
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	0c1a      	lsrs	r2, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3306      	adds	r3, #6
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	0e1a      	lsrs	r2, r3, #24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3307      	adds	r3, #7
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3308      	adds	r3, #8
 8004354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	0a1a      	lsrs	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3309      	adds	r3, #9
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	0c1a      	lsrs	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	330a      	adds	r3, #10
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	0e1a      	lsrs	r2, r3, #24
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	330b      	adds	r3, #11
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	330c      	adds	r3, #12
 8004382:	6a3a      	ldr	r2, [r7, #32]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	0a1a      	lsrs	r2, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	330d      	adds	r3, #13
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	0c1a      	lsrs	r2, r3, #16
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	330e      	adds	r3, #14
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	0e1a      	lsrs	r2, r3, #24
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	330f      	adds	r3, #15
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

    return( 0 );
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	373c      	adds	r7, #60	; 0x3c
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	0801877c 	.word	0x0801877c
 80043c0:	08018b7c 	.word	0x08018b7c
 80043c4:	08018f7c 	.word	0x08018f7c
 80043c8:	0801937c 	.word	0x0801937c
 80043cc:	0801867c 	.word	0x0801867c

080043d0 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fa29 	bl	8003840 <mbedtls_internal_aes_encrypt>
 80043ee:	4603      	mov	r3, r0
 80043f0:	e005      	b.n	80043fe <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff fd06 	bl	8003e08 <mbedtls_internal_aes_decrypt>
 80043fc:	4603      	mov	r3, r0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
    if( ( end - *p ) < 1 )
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	dc02      	bgt.n	8004426 <mbedtls_asn1_get_len+0x1e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004420:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004424:	e0ac      	b.n	8004580 <mbedtls_asn1_get_len+0x178>

    if( ( **p & 0x80 ) == 0 )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b25b      	sxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	db09      	blt.n	8004446 <mbedtls_asn1_get_len+0x3e>
        *len = *(*p)++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1c59      	adds	r1, r3, #1
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	6011      	str	r1, [r2, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e090      	b.n	8004568 <mbedtls_asn1_get_len+0x160>
    else
    {
        switch( **p & 0x7F )
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	3b01      	subs	r3, #1
 8004452:	2b03      	cmp	r3, #3
 8004454:	f200 8085 	bhi.w	8004562 <mbedtls_asn1_get_len+0x15a>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <mbedtls_asn1_get_len+0x58>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004471 	.word	0x08004471
 8004464:	0800449d 	.word	0x0800449d
 8004468:	080044d3 	.word	0x080044d3
 800446c:	08004515 	.word	0x08004515
        {
        case 1:
            if( ( end - *p ) < 2 )
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	2b01      	cmp	r3, #1
 800447a:	dc02      	bgt.n	8004482 <mbedtls_asn1_get_len+0x7a>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800447c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004480:	e07e      	b.n	8004580 <mbedtls_asn1_get_len+0x178>

            *len = (*p)[1];
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
            (*p) += 2;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]
            break;
 800449a:	e065      	b.n	8004568 <mbedtls_asn1_get_len+0x160>

        case 2:
            if( ( end - *p ) < 3 )
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	dc02      	bgt.n	80044ae <mbedtls_asn1_get_len+0xa6>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80044a8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80044ac:	e068      	b.n	8004580 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	3202      	adds	r2, #2
 80044be:	7812      	ldrb	r2, [r2, #0]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
            (*p) += 3;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	1cda      	adds	r2, r3, #3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]
            break;
 80044d0:	e04a      	b.n	8004568 <mbedtls_asn1_get_len+0x160>

        case 3:
            if( ( end - *p ) < 4 )
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	2b03      	cmp	r3, #3
 80044dc:	dc02      	bgt.n	80044e4 <mbedtls_asn1_get_len+0xdc>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80044de:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80044e2:	e04d      	b.n	8004580 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 16 ) |
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	041a      	lsls	r2, r3, #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3302      	adds	r3, #2
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 80044f8:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	3203      	adds	r2, #3
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 16 ) |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]
            (*p) += 4;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1d1a      	adds	r2, r3, #4
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]
            break;
 8004512:	e029      	b.n	8004568 <mbedtls_asn1_get_len+0x160>

        case 4:
            if( ( end - *p ) < 5 )
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	2b04      	cmp	r3, #4
 800451e:	dc02      	bgt.n	8004526 <mbedtls_asn1_get_len+0x11e>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004520:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004524:	e02c      	b.n	8004580 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	061a      	lsls	r2, r3, #24
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3302      	adds	r3, #2
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3303      	adds	r3, #3
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8004546:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	3204      	adds	r2, #4
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
            (*p) += 5;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1d5a      	adds	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]
            break;
 8004560:	e002      	b.n	8004568 <mbedtls_asn1_get_len+0x160>

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8004562:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004566:	e00b      	b.n	8004580 <mbedtls_asn1_get_len+0x178>
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6809      	ldr	r1, [r1, #0]
 8004572:	1a52      	subs	r2, r2, r1
 8004574:	4293      	cmp	r3, r2
 8004576:	d902      	bls.n	800457e <mbedtls_asn1_get_len+0x176>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004578:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 800457c:	e000      	b.n	8004580 <mbedtls_asn1_get_len+0x178>

    return( 0 );
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
    if( ( end - *p ) < 1 )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dc02      	bgt.n	80045ac <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80045a6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80045aa:	e014      	b.n	80045d6 <mbedtls_asn1_get_tag+0x4a>

    if( **p != tag )
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d002      	beq.n	80045c0 <mbedtls_asn1_get_tag+0x34>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80045ba:	f06f 0361 	mvn.w	r3, #97	; 0x61
 80045be:	e00a      	b.n	80045d6 <mbedtls_asn1_get_tag+0x4a>

    (*p)++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff ff1a 	bl	8004408 <mbedtls_asn1_get_len>
 80045d4:	4603      	mov	r3, r0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <mbedtls_asn1_get_int>:
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b086      	sub	sp, #24
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80045ea:	f107 0210 	add.w	r2, r7, #16
 80045ee:	2302      	movs	r3, #2
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ffca 	bl	800458c <mbedtls_asn1_get_tag>
 80045f8:	6178      	str	r0, [r7, #20]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <mbedtls_asn1_get_int+0x26>
        return( ret );
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	e026      	b.n	8004652 <mbedtls_asn1_get_int+0x74>

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <mbedtls_asn1_get_int+0x3e>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d805      	bhi.n	800461c <mbedtls_asn1_get_int+0x3e>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b25b      	sxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	da02      	bge.n	8004622 <mbedtls_asn1_get_int+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800461c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004620:	e017      	b.n	8004652 <mbedtls_asn1_get_int+0x74>

    *val = 0;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

    while( len-- > 0 )
 8004628:	e00d      	b.n	8004646 <mbedtls_asn1_get_int+0x68>
    {
        *val = ( *val << 8 ) | **p;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	601a      	str	r2, [r3, #0]
        (*p)++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
    while( len-- > 0 )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	613a      	str	r2, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ec      	bne.n	800462a <mbedtls_asn1_get_int+0x4c>
    }

    return( 0 );
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8004666:	f107 0210 	add.w	r2, r7, #16
 800466a:	2302      	movs	r3, #2
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff ff8c 	bl	800458c <mbedtls_asn1_get_tag>
 8004674:	6178      	str	r0, [r7, #20]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <mbedtls_asn1_get_mpi+0x26>
        return( ret );
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	e00e      	b.n	800469e <mbedtls_asn1_get_mpi+0x44>

    ret = mbedtls_mpi_read_binary( X, *p, len );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 f84b 	bl	8005724 <mbedtls_mpi_read_binary>
 800468e:	6178      	str	r0, [r7, #20]

    *p += len;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	441a      	add	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

    return( ret );
 800469c:	697b      	ldr	r3, [r7, #20]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80046b2:	2303      	movs	r3, #3
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff ff67 	bl	800458c <mbedtls_asn1_get_tag>
 80046be:	6178      	str	r0, [r7, #20]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <mbedtls_asn1_get_bitstring_null+0x24>
        return( ret );
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	e012      	b.n	80046f0 <mbedtls_asn1_get_bitstring_null+0x4a>

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	1e59      	subs	r1, r3, #1
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6011      	str	r1, [r2, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d907      	bls.n	80046e8 <mbedtls_asn1_get_bitstring_null+0x42>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1c59      	adds	r1, r3, #1
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <mbedtls_asn1_get_bitstring_null+0x48>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80046e8:	f06f 0367 	mvn.w	r3, #103	; 0x67
 80046ec:	e000      	b.n	80046f0 <mbedtls_asn1_get_bitstring_null+0x4a>

    return( 0 );
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8004706:	f107 0210 	add.w	r2, r7, #16
 800470a:	2330      	movs	r3, #48	; 0x30
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff ff3c 	bl	800458c <mbedtls_asn1_get_tag>
 8004714:	6178      	str	r0, [r7, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <mbedtls_asn1_get_alg+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	e062      	b.n	80047e6 <mbedtls_asn1_get_alg+0xee>

    if( ( end - *p ) < 1 )
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	dc02      	bgt.n	8004732 <mbedtls_asn1_get_alg+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800472c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004730:	e059      	b.n	80047e6 <mbedtls_asn1_get_alg+0xee>

    alg->tag = **p;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
    end = *p + len;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	1d1a      	adds	r2, r3, #4
 800474c:	2306      	movs	r3, #6
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff ff1b 	bl	800458c <mbedtls_asn1_get_tag>
 8004756:	6178      	str	r0, [r7, #20]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <mbedtls_asn1_get_alg+0x6a>
        return( ret );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e041      	b.n	80047e6 <mbedtls_asn1_get_alg+0xee>

    alg->p = *p;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
    *p += alg->len;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	601a      	str	r2, [r3, #0]

    if( *p == end )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	d105      	bne.n	800478e <mbedtls_asn1_get_alg+0x96>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 8004782:	210c      	movs	r1, #12
 8004784:	6838      	ldr	r0, [r7, #0]
 8004786:	f00c f869 	bl	801085c <mbedtls_platform_zeroize>
        return( 0 );
 800478a:	2300      	movs	r3, #0
 800478c:	e02b      	b.n	80047e6 <mbedtls_asn1_get_alg+0xee>
    }

    params->tag = **p;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	601a      	str	r2, [r3, #0]
    (*p)++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	3304      	adds	r3, #4
 80047a8:	461a      	mov	r2, r3
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fe2b 	bl	8004408 <mbedtls_asn1_get_len>
 80047b2:	6178      	str	r0, [r7, #20]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <mbedtls_asn1_get_alg+0xc6>
        return( ret );
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	e013      	b.n	80047e6 <mbedtls_asn1_get_alg+0xee>

    params->p = *p;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	609a      	str	r2, [r3, #8]
    *p += params->len;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	441a      	add	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]

    if( *p != end )
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d002      	beq.n	80047e4 <mbedtls_asn1_get_alg+0xec>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80047de:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80047e2:	e000      	b.n	80047e6 <mbedtls_asn1_get_alg+0xee>

    return( 0 );
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
    if( len < 0x80 )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b7f      	cmp	r3, #127	; 0x7f
 80047fe:	d815      	bhi.n	800482c <mbedtls_asn1_write_len+0x3e>
    {
        if( *p - start < 1 )
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	dc02      	bgt.n	8004814 <mbedtls_asn1_write_len+0x26>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800480e:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8004812:	e0d3      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>

        *--(*p) = (unsigned char) len;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	1e5a      	subs	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
        return( 1 );
 8004828:	2301      	movs	r3, #1
 800482a:	e0c7      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>
    }

    if( len <= 0xFF )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2bff      	cmp	r3, #255	; 0xff
 8004830:	d81e      	bhi.n	8004870 <mbedtls_asn1_write_len+0x82>
    {
        if( *p - start < 2 )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	dc02      	bgt.n	8004846 <mbedtls_asn1_write_len+0x58>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8004840:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8004844:	e0ba      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>

        *--(*p) = (unsigned char) len;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	1e5a      	subs	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x81;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2281      	movs	r2, #129	; 0x81
 800486a:	701a      	strb	r2, [r3, #0]
        return( 2 );
 800486c:	2302      	movs	r3, #2
 800486e:	e0a5      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>
    }

    if( len <= 0xFFFF )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004876:	d229      	bcs.n	80048cc <mbedtls_asn1_write_len+0xde>
    {
        if( *p - start < 3 )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	dc02      	bgt.n	800488c <mbedtls_asn1_write_len+0x9e>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8004886:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 800488a:	e097      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>

        *--(*p) = ( len       ) & 0xFF;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	0a19      	lsrs	r1, r3, #8
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	1e5a      	subs	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b2ca      	uxtb	r2, r1
 80048b4:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x82;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2282      	movs	r2, #130	; 0x82
 80048c6:	701a      	strb	r2, [r3, #0]
        return( 3 );
 80048c8:	2303      	movs	r3, #3
 80048ca:	e077      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>
    }

    if( len <= 0xFFFFFF )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d2:	d234      	bcs.n	800493e <mbedtls_asn1_write_len+0x150>
    {
        if( *p - start < 4 )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b03      	cmp	r3, #3
 80048e0:	dc02      	bgt.n	80048e8 <mbedtls_asn1_write_len+0xfa>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80048e2:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 80048e6:	e069      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>

        *--(*p) = ( len       ) & 0xFF;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	1e5a      	subs	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	0a19      	lsrs	r1, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	1e5a      	subs	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b2ca      	uxtb	r2, r1
 8004910:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 16 ) & 0xFF;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0c19      	lsrs	r1, r3, #16
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	b2ca      	uxtb	r2, r1
 8004926:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x83;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1e5a      	subs	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2283      	movs	r2, #131	; 0x83
 8004938:	701a      	strb	r2, [r3, #0]
        return( 4 );
 800493a:	2304      	movs	r3, #4
 800493c:	e03e      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b04      	cmp	r3, #4
 800494a:	dc02      	bgt.n	8004952 <mbedtls_asn1_write_len+0x164>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800494c:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8004950:	e034      	b.n	80049bc <mbedtls_asn1_write_len+0x1ce>

        *--(*p) = ( len       ) & 0xFF;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1e5a      	subs	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0a19      	lsrs	r1, r3, #8
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	b2ca      	uxtb	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0c19      	lsrs	r1, r3, #16
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b2ca      	uxtb	r2, r1
 8004990:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 24 ) & 0xFF;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	0e19      	lsrs	r1, r3, #24
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b2ca      	uxtb	r2, r1
 80049a6:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x84;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2284      	movs	r2, #132	; 0x84
 80049b8:	701a      	strb	r2, [r3, #0]
        return( 5 );
 80049ba:	2305      	movs	r3, #5
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	4613      	mov	r3, r2
 80049d4:	71fb      	strb	r3, [r7, #7]
    if( *p - start < 1 )
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dc02      	bgt.n	80049ea <mbedtls_asn1_write_tag+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80049e4:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 80049e8:	e009      	b.n	80049fe <mbedtls_asn1_write_tag+0x36>

    *--(*p) = tag;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	1e5a      	subs	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	79fa      	ldrb	r2, [r7, #7]
 80049fa:	701a      	strb	r2, [r3, #0]

    return( 1 );
 80049fc:	2301      	movs	r3, #1
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b086      	sub	sp, #24
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fd0a 	bl	8005434 <mbedtls_mpi_size>
 8004a20:	6138      	str	r0, [r7, #16]

    if( *p < start || (size_t)( *p - start ) < len )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d808      	bhi.n	8004a3e <mbedtls_asn1_write_mpi+0x34>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d902      	bls.n	8004a44 <mbedtls_asn1_write_mpi+0x3a>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8004a3e:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8004a42:	e054      	b.n	8004aee <mbedtls_asn1_write_mpi+0xe4>

    (*p) -= len;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	425b      	negs	r3, r3
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 feb3 	bl	80057c6 <mbedtls_mpi_write_binary>
 8004a60:	6178      	str	r0, [r7, #20]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d140      	bne.n	8004aea <mbedtls_asn1_write_mpi+0xe0>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d11b      	bne.n	8004aa8 <mbedtls_asn1_write_mpi+0x9e>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	b25b      	sxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da15      	bge.n	8004aa8 <mbedtls_asn1_write_mpi+0x9e>
    {
        if( *p - start < 1 )
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dc02      	bgt.n	8004a90 <mbedtls_asn1_write_mpi+0x86>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8004a8a:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8004a8e:	e02e      	b.n	8004aee <mbedtls_asn1_write_mpi+0xe4>

        *--(*p) = 0x00;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1e5a      	subs	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
        len += 1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	613b      	str	r3, [r7, #16]
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fe9e 	bl	80047ee <mbedtls_asn1_write_len>
 8004ab2:	6178      	str	r0, [r7, #20]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da01      	bge.n	8004abe <mbedtls_asn1_write_mpi+0xb4>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	e017      	b.n	8004aee <mbedtls_asn1_write_mpi+0xe4>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ff7c 	bl	80049c8 <mbedtls_asn1_write_tag>
 8004ad0:	6178      	str	r0, [r7, #20]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	da01      	bge.n	8004adc <mbedtls_asn1_write_mpi+0xd2>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	e008      	b.n	8004aee <mbedtls_asn1_write_mpi+0xe4>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

    ret = (int) len;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e000      	b.n	8004aec <mbedtls_asn1_write_mpi+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 8004aea:	bf00      	nop

cleanup:
    return( ret );
 8004aec:	697b      	ldr	r3, [r7, #20]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b08b      	sub	sp, #44	; 0x2c
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e06f      	b.n	8004bf4 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8004b18:	e005      	b.n	8004b26 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d205      	bcs.n	8004b3a <mbedtls_base64_decode+0x42>
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	4413      	add	r3, r2
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d0ef      	beq.n	8004b1a <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d05d      	beq.n	8004bfe <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 8004b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d90c      	bls.n	8004b66 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	4413      	add	r3, r2
 8004b52:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 8004b54:	2b0d      	cmp	r3, #13
 8004b56:	d106      	bne.n	8004b66 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	4413      	add	r3, r2
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b0a      	cmp	r3, #10
 8004b64:	d040      	beq.n	8004be8 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	4413      	add	r3, r2
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b0a      	cmp	r3, #10
 8004b70:	d03c      	beq.n	8004bec <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8004b78:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8004b7c:	e0d0      	b.n	8004d20 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	4413      	add	r3, r2
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b3d      	cmp	r3, #61	; 0x3d
 8004b88:	d108      	bne.n	8004b9c <mbedtls_base64_decode+0xa4>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8004b96:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8004b9a:	e0c1      	b.n	8004d20 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	4413      	add	r3, r2
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b25b      	sxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db08      	blt.n	8004bbc <mbedtls_base64_decode+0xc4>
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	4413      	add	r3, r2
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <mbedtls_base64_decode+0x234>)
 8004bb6:	5c9b      	ldrb	r3, [r3, r2]
 8004bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bba:	d102      	bne.n	8004bc2 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8004bbc:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8004bc0:	e0ae      	b.n	8004d20 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	4413      	add	r3, r2
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <mbedtls_base64_decode+0x234>)
 8004bce:	5c9b      	ldrb	r3, [r3, r2]
 8004bd0:	2b3f      	cmp	r3, #63	; 0x3f
 8004bd2:	d805      	bhi.n	8004be0 <mbedtls_base64_decode+0xe8>
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8004bda:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8004bde:	e09f      	b.n	8004d20 <mbedtls_base64_decode+0x228>

        n++;
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	3301      	adds	r3, #1
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	e002      	b.n	8004bee <mbedtls_base64_decode+0xf6>
            continue;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <mbedtls_base64_decode+0xf6>
            continue;
 8004bec:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d38b      	bcc.n	8004b14 <mbedtls_base64_decode+0x1c>
 8004bfc:	e000      	b.n	8004c00 <mbedtls_base64_decode+0x108>
            break;
 8004bfe:	bf00      	nop
    }

    if( n == 0 )
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
        return( 0 );
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e087      	b.n	8004d20 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	08da      	lsrs	r2, r3, #3
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	f003 0207 	and.w	r2, r3, #7
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	3307      	adds	r3, #7
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	440b      	add	r3, r1
 8004c32:	623b      	str	r3, [r7, #32]
    n -= j;
 8004c34:	6a3a      	ldr	r2, [r7, #32]
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <mbedtls_base64_decode+0x152>
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d205      	bcs.n	8004c56 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8004c50:	f06f 0329 	mvn.w	r3, #41	; 0x29
 8004c54:	e064      	b.n	8004d20 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8004c56:	2303      	movs	r3, #3
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e051      	b.n	8004d0c <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b0d      	cmp	r3, #13
 8004c6e:	d046      	beq.n	8004cfe <mbedtls_base64_decode+0x206>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b0a      	cmp	r3, #10
 8004c76:	d042      	beq.n	8004cfe <mbedtls_base64_decode+0x206>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d03e      	beq.n	8004cfe <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <mbedtls_base64_decode+0x234>)
 8004c88:	5c9b      	ldrb	r3, [r3, r2]
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	bf0c      	ite	eq
 8004c8e:	2301      	moveq	r3, #1
 8004c90:	2300      	movne	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	019a      	lsls	r2, r3, #6
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <mbedtls_base64_decode+0x234>)
 8004ca8:	5c5b      	ldrb	r3, [r3, r1]
 8004caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	623b      	str	r3, [r7, #32]
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d120      	bne.n	8004d00 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <mbedtls_base64_decode+0x1de>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	0c19      	lsrs	r1, r3, #16
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	617a      	str	r2, [r7, #20]
 8004cd2:	b2ca      	uxtb	r2, r1
 8004cd4:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d906      	bls.n	8004cea <mbedtls_base64_decode+0x1f2>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	0a19      	lsrs	r1, r3, #8
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	617a      	str	r2, [r7, #20]
 8004ce6:	b2ca      	uxtb	r2, r1
 8004ce8:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d907      	bls.n	8004d00 <mbedtls_base64_decode+0x208>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	617a      	str	r2, [r7, #20]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e000      	b.n	8004d00 <mbedtls_base64_decode+0x208>
            continue;
 8004cfe:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	3b01      	subs	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1aa      	bne.n	8004c68 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]

    return( 0 );
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	372c      	adds	r7, #44	; 0x2c
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	080197a4 	.word	0x080197a4

08004d30 <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f00b fd8b 	bl	801085c <mbedtls_platform_zeroize>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01a      	beq.n	8004db8 <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f7ff ffcb 	bl	8004d30 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f00f fbe8 	bl	8014574 <free>
    }

    X->s = 1;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
 8004db6:	e000      	b.n	8004dba <mbedtls_mpi_free+0x46>
        return;
 8004db8:	bf00      	nop
}
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d902      	bls.n	8004dda <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8004dd4:	f06f 030f 	mvn.w	r3, #15
 8004dd8:	e031      	b.n	8004e3e <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d92b      	bls.n	8004e3c <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8004de4:	2104      	movs	r1, #4
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f00f fb8a 	bl	8014500 <calloc>
 8004dec:	4603      	mov	r3, r0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8004df6:	f06f 030f 	mvn.w	r3, #15
 8004dfa:	e020      	b.n	8004e3e <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6899      	ldr	r1, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f00f fbc6 	bl	80145a2 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f7ff ff85 	bl	8004d30 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f00f fba2 	bl	8014574 <free>
        }

        X->n = nblimbs;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	605a      	str	r2, [r3, #4]
        X->p = p;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <mbedtls_mpi_shrink>:
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d902      	bls.n	8004e60 <mbedtls_mpi_shrink+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8004e5a:	f06f 030f 	mvn.w	r3, #15
 8004e5e:	e054      	b.n	8004f0a <mbedtls_mpi_shrink+0xc4>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d305      	bcc.n	8004e76 <mbedtls_mpi_shrink+0x30>
        return( mbedtls_mpi_grow( X, nblimbs ) );
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ffa7 	bl	8004dc0 <mbedtls_mpi_grow>
 8004e72:	4603      	mov	r3, r0
 8004e74:	e049      	b.n	8004f0a <mbedtls_mpi_shrink+0xc4>

    for( i = X->n - 1; i > 0; i-- )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e00a      	b.n	8004e96 <mbedtls_mpi_shrink+0x50>
        if( X->p[i] != 0 )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <mbedtls_mpi_shrink+0x58>
    for( i = X->n - 1; i > 0; i-- )
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f1      	bne.n	8004e80 <mbedtls_mpi_shrink+0x3a>
 8004e9c:	e000      	b.n	8004ea0 <mbedtls_mpi_shrink+0x5a>
            break;
 8004e9e:	bf00      	nop
    i++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]

    if( i < nblimbs )
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d201      	bcs.n	8004eb2 <mbedtls_mpi_shrink+0x6c>
        i = nblimbs;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f00f fb23 	bl	8014500 <calloc>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <mbedtls_mpi_shrink+0x84>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8004ec4:	f06f 030f 	mvn.w	r3, #15
 8004ec8:	e01f      	b.n	8004f0a <mbedtls_mpi_shrink+0xc4>

    if( X->p != NULL )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d014      	beq.n	8004efc <mbedtls_mpi_shrink+0xb6>
    {
        memcpy( p, X->p, i * ciL );
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6899      	ldr	r1, [r3, #8]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	461a      	mov	r2, r3
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f00f fb60 	bl	80145a2 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7ff ff1f 	bl	8004d30 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f00f fb3c 	bl	8014574 <free>
    }

    X->n = i;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	605a      	str	r2, [r3, #4]
    X->p = p;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]

    return( 0 );
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d101      	bne.n	8004f2c <mbedtls_mpi_copy+0x1a>
        return( 0 );
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e04a      	b.n	8004fc2 <mbedtls_mpi_copy+0xb0>

    if( Y->p == NULL )
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <mbedtls_mpi_copy+0x2c>
    {
        mbedtls_mpi_free( X );
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff1d 	bl	8004d74 <mbedtls_mpi_free>
        return( 0 );
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e041      	b.n	8004fc2 <mbedtls_mpi_copy+0xb0>
    }

    for( i = Y->n - 1; i > 0; i-- )
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	e00a      	b.n	8004f5e <mbedtls_mpi_copy+0x4c>
        if( Y->p[i] != 0 )
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <mbedtls_mpi_copy+0x54>
    for( i = Y->n - 1; i > 0; i-- )
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f1      	bne.n	8004f48 <mbedtls_mpi_copy+0x36>
 8004f64:	e000      	b.n	8004f68 <mbedtls_mpi_copy+0x56>
            break;
 8004f66:	bf00      	nop
    i++;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d908      	bls.n	8004f92 <mbedtls_mpi_copy+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff ff1c 	bl	8004dc0 <mbedtls_mpi_grow>
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00e      	beq.n	8004fae <mbedtls_mpi_copy+0x9c>
 8004f90:	e016      	b.n	8004fc0 <mbedtls_mpi_copy+0xae>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	18d0      	adds	r0, r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f00f fb1e 	bl	80145ea <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6898      	ldr	r0, [r3, #8]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f00f faf1 	bl	80145a2 <memcpy>

cleanup:

    return( ret );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b086      	sub	sp, #24
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	425b      	negs	r3, r3
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	09db      	lsrs	r3, r3, #7
 8004fea:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fee4 	bl	8004dc0 <mbedtls_mpi_grow>
 8004ff8:	6138      	str	r0, [r7, #16]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d150      	bne.n	80050a2 <mbedtls_mpi_safe_cond_assign+0xd8>

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	79fa      	ldrb	r2, [r7, #7]
 8005006:	f1c2 0201 	rsb	r2, r2, #1
 800500a:	fb02 f203 	mul.w	r2, r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	79f9      	ldrb	r1, [r7, #7]
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	601a      	str	r2, [r3, #0]

    for( i = 0; i < Y->n; i++ )
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e01d      	b.n	8005060 <mbedtls_mpi_safe_cond_assign+0x96>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	79fa      	ldrb	r2, [r7, #7]
 8005032:	f1c2 0201 	rsb	r2, r2, #1
 8005036:	fb02 f103 	mul.w	r1, r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	79fa      	ldrb	r2, [r7, #7]
 8005048:	fb02 f203 	mul.w	r2, r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6898      	ldr	r0, [r3, #8]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4403      	add	r3, r0
 8005056:	440a      	add	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
    for( i = 0; i < Y->n; i++ )
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3dc      	bcc.n	8005024 <mbedtls_mpi_safe_cond_assign+0x5a>

    for( ; i < X->n; i++ )
 800506a:	e014      	b.n	8005096 <mbedtls_mpi_safe_cond_assign+0xcc>
        X->p[i] *= ( 1 - assign );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	f1c3 0301 	rsb	r3, r3, #1
 800507e:	4618      	mov	r0, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6899      	ldr	r1, [r3, #8]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	fb00 f202 	mul.w	r2, r0, r2
 800508e:	601a      	str	r2, [r3, #0]
    for( ; i < X->n; i++ )
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3301      	adds	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d3e5      	bcc.n	800506c <mbedtls_mpi_safe_cond_assign+0xa2>

cleanup:
 80050a0:	e000      	b.n	80050a4 <mbedtls_mpi_safe_cond_assign+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80050a2:	bf00      	nop
    return( ret );
 80050a4:	693b      	ldr	r3, [r7, #16]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <mbedtls_mpi_safe_cond_swap>:
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b088      	sub	sp, #32
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	4613      	mov	r3, r2
 80050ba:	71fb      	strb	r3, [r7, #7]
    size_t i;
    mbedtls_mpi_uint tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d101      	bne.n	80050c8 <mbedtls_mpi_safe_cond_swap+0x1a>
        return( 0 );
 80050c4:	2300      	movs	r3, #0
 80050c6:	e083      	b.n	80051d0 <mbedtls_mpi_safe_cond_swap+0x122>

    /* make sure swap is 0 or 1 in a time-constant manner */
    swap = (swap | (unsigned char)-swap) >> 7;
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	425b      	negs	r3, r3
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	09db      	lsrs	r3, r3, #7
 80050d6:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4619      	mov	r1, r3
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff fe6e 	bl	8004dc0 <mbedtls_mpi_grow>
 80050e4:	61f8      	str	r0, [r7, #28]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d16d      	bne.n	80051c8 <mbedtls_mpi_safe_cond_swap+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4619      	mov	r1, r3
 80050f2:	68b8      	ldr	r0, [r7, #8]
 80050f4:	f7ff fe64 	bl	8004dc0 <mbedtls_mpi_grow>
 80050f8:	61f8      	str	r0, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d165      	bne.n	80051cc <mbedtls_mpi_safe_cond_swap+0x11e>

    s = X->s;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	617b      	str	r3, [r7, #20]
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	79fa      	ldrb	r2, [r7, #7]
 800510c:	f1c2 0201 	rsb	r2, r2, #1
 8005110:	fb02 f203 	mul.w	r2, r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	79f9      	ldrb	r1, [r7, #7]
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	441a      	add	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	601a      	str	r2, [r3, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	79fa      	ldrb	r2, [r7, #7]
 800512a:	f1c2 0201 	rsb	r2, r2, #1
 800512e:	fb02 f203 	mul.w	r2, r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	6979      	ldr	r1, [r7, #20]
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	441a      	add	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	601a      	str	r2, [r3, #0]


    for( i = 0; i < X->n; i++ )
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	e03a      	b.n	80051bc <mbedtls_mpi_safe_cond_swap+0x10e>
    {
        tmp = X->p[i];
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	613b      	str	r3, [r7, #16]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	79fa      	ldrb	r2, [r7, #7]
 8005162:	f1c2 0201 	rsb	r2, r2, #1
 8005166:	fb02 f103 	mul.w	r1, r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	79fa      	ldrb	r2, [r7, #7]
 8005178:	fb02 f203 	mul.w	r2, r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6898      	ldr	r0, [r3, #8]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4403      	add	r3, r0
 8005186:	440a      	add	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	79fa      	ldrb	r2, [r7, #7]
 8005198:	f1c2 0201 	rsb	r2, r2, #1
 800519c:	fb02 f103 	mul.w	r1, r2, r3
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	fb02 f203 	mul.w	r2, r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6898      	ldr	r0, [r3, #8]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4403      	add	r3, r0
 80051b2:	440a      	add	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < X->n; i++ )
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d3bf      	bcc.n	8005146 <mbedtls_mpi_safe_cond_swap+0x98>
    }

cleanup:
 80051c6:	e002      	b.n	80051ce <mbedtls_mpi_safe_cond_swap+0x120>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80051c8:	bf00      	nop
 80051ca:	e000      	b.n	80051ce <mbedtls_mpi_safe_cond_swap+0x120>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 80051cc:	bf00      	nop
    return( ret );
 80051ce:	69fb      	ldr	r3, [r7, #28]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80051e2:	2101      	movs	r1, #1
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fdeb 	bl	8004dc0 <mbedtls_mpi_grow>
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11a      	bne.n	8005228 <mbedtls_mpi_lset+0x50>
    memset( X->p, 0, X->n * ciL );
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6898      	ldr	r0, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	461a      	mov	r2, r3
 80051fe:	2100      	movs	r1, #0
 8005200:	f00f f9f3 	bl	80145ea <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800520a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	da02      	bge.n	8005220 <mbedtls_mpi_lset+0x48>
 800521a:	f04f 32ff 	mov.w	r2, #4294967295
 800521e:	e000      	b.n	8005222 <mbedtls_mpi_lset+0x4a>
 8005220:	2201      	movs	r2, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e000      	b.n	800522a <mbedtls_mpi_lset+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8005228:	bf00      	nop

cleanup:

    return( ret );
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	015b      	lsls	r3, r3, #5
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d301      	bcc.n	800524e <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 800524a:	2300      	movs	r3, #0
 800524c:	e00d      	b.n	800526a <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	fa22 f303 	lsr.w	r3, r2, r3
 8005266:	f003 0301 	and.w	r3, r3, #1
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <mbedtls_mpi_set_bit>:

/*
 * Set a bit to a specific value of 0 or 1
 */
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b088      	sub	sp, #32
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	4613      	mov	r3, r2
 8005282:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]
    size_t off = pos / biL;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	61bb      	str	r3, [r7, #24]
    size_t idx = pos % biL;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    if( val != 0 && val != 1 )
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <mbedtls_mpi_set_bit+0x32>
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d002      	beq.n	80052a8 <mbedtls_mpi_set_bit+0x32>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80052a2:	f06f 0303 	mvn.w	r3, #3
 80052a6:	e039      	b.n	800531c <mbedtls_mpi_set_bit+0xa6>

    if( X->n * biL <= pos )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	015b      	lsls	r3, r3, #5
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d30e      	bcc.n	80052d2 <mbedtls_mpi_set_bit+0x5c>
    {
        if( val == 0 )
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <mbedtls_mpi_set_bit+0x48>
            return( 0 );
 80052ba:	2300      	movs	r3, #0
 80052bc:	e02e      	b.n	800531c <mbedtls_mpi_set_bit+0xa6>

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	3301      	adds	r3, #1
 80052c2:	4619      	mov	r1, r3
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fd7b 	bl	8004dc0 <mbedtls_mpi_grow>
 80052ca:	61f8      	str	r0, [r7, #28]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d122      	bne.n	8005318 <mbedtls_mpi_set_bit+0xa2>
    }

    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	2201      	movs	r2, #1
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43da      	mvns	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6898      	ldr	r0, [r3, #8]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4403      	add	r3, r0
 80052f2:	400a      	ands	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	6819      	ldr	r1, [r3, #0]
 8005302:	79fa      	ldrb	r2, [r7, #7]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	409a      	lsls	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6898      	ldr	r0, [r3, #8]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4403      	add	r3, r0
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e000      	b.n	800531a <mbedtls_mpi_set_bit+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 8005318:	bf00      	nop

cleanup:

    return( ret );
 800531a:	69fb      	ldr	r3, [r7, #28]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e01d      	b.n	8005372 <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e014      	b.n	8005366 <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <mbedtls_mpi_lsb+0x36>
                return( count );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	e011      	b.n	800537e <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3301      	adds	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b1f      	cmp	r3, #31
 800536a:	d9e7      	bls.n	800533c <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3301      	adds	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	429a      	cmp	r2, r3
 800537a:	d3dc      	bcc.n	8005336 <mbedtls_mpi_lsb+0x12>

    return( 0 );
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8005392:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005396:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e00a      	b.n	80053b4 <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <mbedtls_clz+0x32>

        mask >>= 1;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3301      	adds	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b1f      	cmp	r3, #31
 80053b8:	d9f1      	bls.n	800539e <mbedtls_clz+0x14>
 80053ba:	e000      	b.n	80053be <mbedtls_clz+0x34>
        if( x & mask ) break;
 80053bc:	bf00      	nop
    }

    return j;
 80053be:	68fb      	ldr	r3, [r7, #12]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 80053dc:	2300      	movs	r3, #0
 80053de:	e025      	b.n	800542c <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e00a      	b.n	8005400 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f1      	bne.n	80053ea <mbedtls_mpi_bitlen+0x1e>
 8005406:	e000      	b.n	800540a <mbedtls_mpi_bitlen+0x3e>
            break;
 8005408:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ffb7 	bl	800538a <mbedtls_clz>
 800541c:	4603      	mov	r3, r0
 800541e:	f1c3 0320 	rsb	r3, r3, #32
 8005422:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4413      	add	r3, r2
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ffc5 	bl	80053cc <mbedtls_mpi_bitlen>
 8005442:	4603      	mov	r3, r0
 8005444:	3307      	adds	r3, #7
 8005446:	08db      	lsrs	r3, r3, #3
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <mpi_get_digit>:

/*
 * Convert an ASCII character to digit value
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
    *d = 255;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	22ff      	movs	r2, #255	; 0xff
 8005462:	601a      	str	r2, [r3, #0]

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	2b2f      	cmp	r3, #47	; 0x2f
 8005468:	d907      	bls.n	800547a <mpi_get_digit+0x2a>
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	2b39      	cmp	r3, #57	; 0x39
 800546e:	d804      	bhi.n	800547a <mpi_get_digit+0x2a>
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	3b30      	subs	r3, #48	; 0x30
 8005474:	461a      	mov	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	601a      	str	r2, [r3, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	d907      	bls.n	8005490 <mpi_get_digit+0x40>
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	2b46      	cmp	r3, #70	; 0x46
 8005484:	d804      	bhi.n	8005490 <mpi_get_digit+0x40>
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	3b37      	subs	r3, #55	; 0x37
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	601a      	str	r2, [r3, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b60      	cmp	r3, #96	; 0x60
 8005494:	d907      	bls.n	80054a6 <mpi_get_digit+0x56>
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	2b66      	cmp	r3, #102	; 0x66
 800549a:	d804      	bhi.n	80054a6 <mpi_get_digit+0x56>
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	3b57      	subs	r3, #87	; 0x57
 80054a0:	461a      	mov	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	601a      	str	r2, [r3, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d302      	bcc.n	80054b6 <mpi_get_digit+0x66>
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
 80054b0:	f06f 0305 	mvn.w	r3, #5
 80054b4:	e000      	b.n	80054b8 <mpi_get_digit+0x68>

    return( 0 );
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <mbedtls_mpi_read_string>:

/*
 * Import from an ASCII string
 */
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	; 0x38
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint d;
    mbedtls_mpi T;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( s != NULL );

    if( radix < 2 || radix > 16 )
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	dd02      	ble.n	80054dc <mbedtls_mpi_read_string+0x18>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	dd02      	ble.n	80054e2 <mbedtls_mpi_read_string+0x1e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80054dc:	f06f 0303 	mvn.w	r3, #3
 80054e0:	e0dd      	b.n	800569e <mbedtls_mpi_read_string+0x1da>

    mbedtls_mpi_init( &T );
 80054e2:	f107 0314 	add.w	r3, r7, #20
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fc31 	bl	8004d4e <mbedtls_mpi_init>

    slen = strlen( s );
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fa fe77 	bl	80001e0 <strlen>
 80054f2:	62b8      	str	r0, [r7, #40]	; 0x28

    if( radix == 16 )
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d167      	bne.n	80055ca <mbedtls_mpi_read_string+0x106>
    {
        if( slen > MPI_SIZE_T_MAX >> 2 )
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005500:	d302      	bcc.n	8005508 <mbedtls_mpi_read_string+0x44>
            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8005502:	f06f 0303 	mvn.w	r3, #3
 8005506:	e0ca      	b.n	800569e <mbedtls_mpi_read_string+0x1da>

        n = BITS_TO_LIMBS( slen << 2 );
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	f002 021f 	and.w	r2, r2, #31
 8005516:	2a00      	cmp	r2, #0
 8005518:	bf14      	ite	ne
 800551a:	2201      	movne	r2, #1
 800551c:	2200      	moveq	r2, #0
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	4413      	add	r3, r2
 8005522:	627b      	str	r3, [r7, #36]	; 0x24

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 8005524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff fc4a 	bl	8004dc0 <mbedtls_mpi_grow>
 800552c:	6378      	str	r0, [r7, #52]	; 0x34
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	f040 80a1 	bne.w	8005678 <mbedtls_mpi_read_string+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8005536:	2100      	movs	r1, #0
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff fe4d 	bl	80051d8 <mbedtls_mpi_lset>
 800553e:	6378      	str	r0, [r7, #52]	; 0x34
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 809a 	bne.w	800567c <mbedtls_mpi_read_string+0x1b8>

        for( i = slen, j = 0; i > 0; i--, j++ )
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	633b      	str	r3, [r7, #48]	; 0x30
 800554c:	2300      	movs	r3, #0
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005550:	e037      	b.n	80055c2 <mbedtls_mpi_read_string+0xfe>
        {
            if( i == 1 && s[i - 1] == '-' )
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10b      	bne.n	8005570 <mbedtls_mpi_read_string+0xac>
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	3b01      	subs	r3, #1
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b2d      	cmp	r3, #45	; 0x2d
 8005564:	d104      	bne.n	8005570 <mbedtls_mpi_read_string+0xac>
            {
                X->s = -1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	601a      	str	r2, [r3, #0]
                break;
 800556e:	e090      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	3b01      	subs	r3, #1
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	f107 0320 	add.w	r3, r7, #32
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff ff65 	bl	8005450 <mpi_get_digit>
 8005586:	6378      	str	r0, [r7, #52]	; 0x34
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	2b00      	cmp	r3, #0
 800558c:	d178      	bne.n	8005680 <mbedtls_mpi_read_string+0x1bc>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	08db      	lsrs	r3, r3, #3
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	440a      	add	r2, r1
 800559a:	6811      	ldr	r1, [r2, #0]
 800559c:	6a38      	ldr	r0, [r7, #32]
 800559e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	f002 021c 	and.w	r2, r2, #28
 80055a6:	fa00 f202 	lsl.w	r2, r0, r2
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	6880      	ldr	r0, [r0, #8]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4403      	add	r3, r0
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
        for( i = slen, j = 0; i > 0; i--, j++ )
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	3b01      	subs	r3, #1
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	3301      	adds	r3, #1
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1c4      	bne.n	8005552 <mbedtls_mpi_read_string+0x8e>
 80055c8:	e063      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80055ca:	2100      	movs	r1, #0
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff fe03 	bl	80051d8 <mbedtls_mpi_lset>
 80055d2:	6378      	str	r0, [r7, #52]	; 0x34
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d154      	bne.n	8005684 <mbedtls_mpi_read_string+0x1c0>

        for( i = 0; i < slen; i++ )
 80055da:	2300      	movs	r3, #0
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30
 80055de:	e046      	b.n	800566e <mbedtls_mpi_read_string+0x1aa>
        {
            if( i == 0 && s[i] == '-' )
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <mbedtls_mpi_read_string+0x138>
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	4413      	add	r3, r2
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b2d      	cmp	r3, #45	; 0x2d
 80055f0:	d104      	bne.n	80055fc <mbedtls_mpi_read_string+0x138>
            {
                X->s = -1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	601a      	str	r2, [r3, #0]
                continue;
 80055fa:	e035      	b.n	8005668 <mbedtls_mpi_read_string+0x1a4>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	4413      	add	r3, r2
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	f107 0320 	add.w	r3, r7, #32
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ff20 	bl	8005450 <mpi_get_digit>
 8005610:	6378      	str	r0, [r7, #52]	; 0x34
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	2b00      	cmp	r3, #0
 8005616:	d137      	bne.n	8005688 <mbedtls_mpi_read_string+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	f107 0314 	add.w	r3, r7, #20
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	4618      	mov	r0, r3
 8005622:	f002 fa58 	bl	8007ad6 <mbedtls_mpi_mul_int>
 8005626:	6378      	str	r0, [r7, #52]	; 0x34
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	2b00      	cmp	r3, #0
 800562c:	d12e      	bne.n	800568c <mbedtls_mpi_read_string+0x1c8>

            if( X->s == 1 )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10c      	bne.n	8005650 <mbedtls_mpi_read_string+0x18c>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	461a      	mov	r2, r3
 800563a:	f107 0314 	add.w	r3, r7, #20
 800563e:	4619      	mov	r1, r3
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fda8 	bl	8006196 <mbedtls_mpi_add_int>
 8005646:	6378      	str	r0, [r7, #52]	; 0x34
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <mbedtls_mpi_read_string+0x1a4>
 800564e:	e020      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
            }
            else
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	461a      	mov	r2, r3
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	4619      	mov	r1, r3
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fdbf 	bl	80061de <mbedtls_mpi_sub_int>
 8005660:	6378      	str	r0, [r7, #52]	; 0x34
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	2b00      	cmp	r3, #0
 8005666:	d113      	bne.n	8005690 <mbedtls_mpi_read_string+0x1cc>
        for( i = 0; i < slen; i++ )
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	3301      	adds	r3, #1
 800566c:	633b      	str	r3, [r7, #48]	; 0x30
 800566e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	429a      	cmp	r2, r3
 8005674:	d3b4      	bcc.n	80055e0 <mbedtls_mpi_read_string+0x11c>
            }
        }
    }

cleanup:
 8005676:	e00c      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 8005678:	bf00      	nop
 800567a:	e00a      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800567c:	bf00      	nop
 800567e:	e008      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 8005680:	bf00      	nop
 8005682:	e006      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8005684:	bf00      	nop
 8005686:	e004      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <mbedtls_mpi_read_string+0x1ce>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 8005690:	bf00      	nop

    mbedtls_mpi_free( &T );
 8005692:	f107 0314 	add.w	r3, r7, #20
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fb6c 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3738      	adds	r7, #56	; 0x38
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <mpi_uint_bigendian_to_host>:
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    return( tmp );
}

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	ba1b      	rev	r3, r3
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b086      	sub	sp, #24
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d026      	beq.n	800571c <mpi_bigendian_to_host+0x5e>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	3b01      	subs	r3, #1
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	e016      	b.n	8005712 <mpi_bigendian_to_host+0x54>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ffdc 	bl	80056a6 <mpi_uint_bigendian_to_host>
 80056ee:	60f8      	str	r0, [r7, #12]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff ffd6 	bl	80056a6 <mpi_uint_bigendian_to_host>
 80056fa:	4602      	mov	r2, r0
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	601a      	str	r2, [r3, #0]
        *cur_limb_right = tmp;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]
         cur_limb_left++, cur_limb_right-- )
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3304      	adds	r3, #4
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3b04      	subs	r3, #4
 8005710:	613b      	str	r3, [r7, #16]
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	d9e4      	bls.n	80056e4 <mpi_bigendian_to_host+0x26>
 800571a:	e000      	b.n	800571e <mpi_bigendian_to_host+0x60>
        return;
 800571c:	bf00      	nop
    }
}
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	089b      	lsrs	r3, r3, #2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	f002 0203 	and.w	r2, r2, #3
 800573a:	2a00      	cmp	r2, #0
 800573c:	bf14      	ite	ne
 800573e:	2201      	movne	r2, #1
 8005740:	2200      	moveq	r2, #0
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	4413      	add	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - buflen;
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	009a      	lsls	r2, r3, #2
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	429a      	cmp	r2, r3
 800575a:	d00d      	beq.n	8005778 <mbedtls_mpi_read_binary+0x54>
    {
        mbedtls_mpi_free( X );
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff fb09 	bl	8004d74 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff faf3 	bl	8004d4e <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8005768:	69b9      	ldr	r1, [r7, #24]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fb28 	bl	8004dc0 <mbedtls_mpi_grow>
 8005770:	61f8      	str	r0, [r7, #28]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11c      	bne.n	80057b2 <mbedtls_mpi_read_binary+0x8e>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8005778:	2100      	movs	r1, #0
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff fd2c 	bl	80051d8 <mbedtls_mpi_lset>
 8005780:	61f8      	str	r0, [r7, #28]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <mbedtls_mpi_read_binary+0x92>

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <mbedtls_mpi_read_binary+0x96>
    {
        Xp = (unsigned char*) X->p;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	613b      	str	r3, [r7, #16]
        memcpy( Xp + overhead, buf, buflen );
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f00e feff 	bl	80145a2 <memcpy>

        mpi_bigendian_to_host( X->p, limbs );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff ff87 	bl	80056be <mpi_bigendian_to_host>
 80057b0:	e004      	b.n	80057bc <mbedtls_mpi_read_binary+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80057b2:	bf00      	nop
 80057b4:	e002      	b.n	80057bc <mbedtls_mpi_read_binary+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <mbedtls_mpi_read_binary+0x98>
    }

cleanup:
 80057ba:	bf00      	nop

    return( ret );
 80057bc:	69fb      	ldr	r3, [r7, #28]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b088      	sub	sp, #32
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	613b      	str	r3, [r7, #16]

    if( stored_bytes < buflen )
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d210      	bcs.n	8005804 <mbedtls_mpi_write_binary+0x3e>
        /* There is enough space in the output buffer. Write initial
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	61fb      	str	r3, [r7, #28]
        p = buf + buflen - stored_bytes;
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	4413      	add	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        memset( buf, 0, buflen - stored_bytes );
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	2100      	movs	r1, #0
 80057fc:	68b8      	ldr	r0, [r7, #8]
 80057fe:	f00e fef4 	bl	80145ea <memset>
 8005802:	e020      	b.n	8005846 <mbedtls_mpi_write_binary+0x80>
    }
    else
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	61fb      	str	r3, [r7, #28]
        p = buf;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	61bb      	str	r3, [r7, #24]
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e015      	b.n	800583e <mbedtls_mpi_write_binary+0x78>
        {
            if( GET_BYTE( X, i ) != 0 )
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 0303 	bic.w	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <mbedtls_mpi_write_binary+0x72>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8005832:	f06f 0307 	mvn.w	r3, #7
 8005836:	e026      	b.n	8005886 <mbedtls_mpi_write_binary+0xc0>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	3301      	adds	r3, #1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3e5      	bcc.n	8005812 <mbedtls_mpi_write_binary+0x4c>
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e017      	b.n	800587c <mbedtls_mpi_write_binary+0xb6>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0303 	bic.w	r3, r3, #3
 8005856:	4413      	add	r3, r2
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	fa22 f103 	lsr.w	r1, r2, r3
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4413      	add	r3, r2
 8005872:	b2ca      	uxtb	r2, r1
 8005874:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < bytes_to_copy; i++ )
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	3301      	adds	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	429a      	cmp	r2, r3
 8005882:	d3e3      	bcc.n	800584c <mbedtls_mpi_write_binary+0x86>

    return( 0 );
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b088      	sub	sp, #32
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fd8e 	bl	80053cc <mbedtls_mpi_bitlen>
 80058b0:	4602      	mov	r2, r0
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	4413      	add	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	015b      	lsls	r3, r3, #5
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d912      	bls.n	80058ea <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	f002 021f 	and.w	r2, r2, #31
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	bf14      	ite	ne
 80058d2:	2201      	movne	r2, #1
 80058d4:	2200      	moveq	r2, #0
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	4413      	add	r3, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff fa6f 	bl	8004dc0 <mbedtls_mpi_grow>
 80058e2:	61f8      	str	r0, [r7, #28]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d16e      	bne.n	80059c8 <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d02f      	beq.n	8005954 <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e016      	b.n	800592a <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1acb      	subs	r3, r1, r3
 8005906:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800590a:	3b01      	subs	r3, #1
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6899      	ldr	r1, [r3, #8]
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800591a:	3b01      	subs	r3, #1
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	3b01      	subs	r3, #1
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d8e4      	bhi.n	80058fc <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 8005932:	e00c      	b.n	800594e <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800593e:	3b01      	subs	r3, #1
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	3b01      	subs	r3, #1
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ef      	bne.n	8005934 <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d038      	beq.n	80059cc <mbedtls_mpi_shift_l+0x13e>
    {
        for( i = v0; i < X->n; i++ )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e02d      	b.n	80059bc <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f1c3 0320 	rsb	r3, r3, #32
 8005972:	fa22 f303 	lsr.w	r3, r2, r3
 8005976:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	fa01 f202 	lsl.w	r2, r1, r2
 8005994:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	6819      	ldr	r1, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
            r0 = r1;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d3cc      	bcc.n	8005960 <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 80059c6:	e001      	b.n	80059cc <mbedtls_mpi_shift_l+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80059c8:	bf00      	nop
 80059ca:	e000      	b.n	80059ce <mbedtls_mpi_shift_l+0x140>
cleanup:
 80059cc:	bf00      	nop

    return( ret );
 80059ce:	69fb      	ldr	r3, [r7, #28]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d807      	bhi.n	8005a0e <mbedtls_mpi_shift_r+0x36>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d108      	bne.n	8005a1a <mbedtls_mpi_shift_r+0x42>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 8005a0e:	2100      	movs	r1, #0
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff fbe1 	bl	80051d8 <mbedtls_mpi_lset>
 8005a16:	4603      	mov	r3, r0
 8005a18:	e075      	b.n	8005b06 <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d02a      	beq.n	8005a76 <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	e010      	b.n	8005a48 <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	69f9      	ldr	r1, [r7, #28]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	440b      	add	r3, r1
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3301      	adds	r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d3e7      	bcc.n	8005a26 <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 8005a56:	e009      	b.n	8005a6c <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3f0      	bcc.n	8005a58 <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d043      	beq.n	8005b04 <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e03c      	b.n	8005afe <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f1c3 0320 	rsb	r3, r3, #32
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005aac:	3b01      	subs	r3, #1
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	fa21 f202 	lsr.w	r2, r1, r2
 8005aca:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1bf      	bne.n	8005a84 <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e00d      	b.n	8005b3c <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1ee      	bne.n	8005b20 <mbedtls_mpi_cmp_abs+0x12>
 8005b42:	e000      	b.n	8005b46 <mbedtls_mpi_cmp_abs+0x38>
            break;
 8005b44:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	e00d      	b.n	8005b6a <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ee      	bne.n	8005b4e <mbedtls_mpi_cmp_abs+0x40>
 8005b70:	e000      	b.n	8005b74 <mbedtls_mpi_cmp_abs+0x66>
            break;
 8005b72:	bf00      	nop

    if( i == 0 && j == 0 )
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <mbedtls_mpi_cmp_abs+0x76>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 8005b80:	2300      	movs	r3, #0
 8005b82:	e040      	b.n	8005c06 <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d901      	bls.n	8005b90 <mbedtls_mpi_cmp_abs+0x82>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e03a      	b.n	8005c06 <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d932      	bls.n	8005bfe <mbedtls_mpi_cmp_abs+0xf0>
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	e033      	b.n	8005c06 <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d901      	bls.n	8005bca <mbedtls_mpi_cmp_abs+0xbc>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e01d      	b.n	8005c06 <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005be6:	3b01      	subs	r3, #1
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d202      	bcs.n	8005bf8 <mbedtls_mpi_cmp_abs+0xea>
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf6:	e006      	b.n	8005c06 <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1cc      	bne.n	8005b9e <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e00d      	b.n	8005c40 <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1ee      	bne.n	8005c24 <mbedtls_mpi_cmp_mpi+0x12>
 8005c46:	e000      	b.n	8005c4a <mbedtls_mpi_cmp_mpi+0x38>
            break;
 8005c48:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	e00d      	b.n	8005c6e <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1ee      	bne.n	8005c52 <mbedtls_mpi_cmp_mpi+0x40>
 8005c74:	e000      	b.n	8005c78 <mbedtls_mpi_cmp_mpi+0x66>
            break;
 8005c76:	bf00      	nop

    if( i == 0 && j == 0 )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <mbedtls_mpi_cmp_mpi+0x76>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 8005c84:	2300      	movs	r3, #0
 8005c86:	e059      	b.n	8005d3c <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d902      	bls.n	8005c96 <mbedtls_mpi_cmp_mpi+0x84>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	e052      	b.n	8005d3c <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d903      	bls.n	8005ca6 <mbedtls_mpi_cmp_mpi+0x94>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	425b      	negs	r3, r3
 8005ca4:	e04a      	b.n	8005d3c <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dd05      	ble.n	8005cba <mbedtls_mpi_cmp_mpi+0xa8>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da01      	bge.n	8005cba <mbedtls_mpi_cmp_mpi+0xa8>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e040      	b.n	8005d3c <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dd38      	ble.n	8005d34 <mbedtls_mpi_cmp_mpi+0x122>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da34      	bge.n	8005d34 <mbedtls_mpi_cmp_mpi+0x122>
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	e035      	b.n	8005d3c <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6899      	ldr	r1, [r3, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cec:	3b01      	subs	r3, #1
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <mbedtls_mpi_cmp_mpi+0xec>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	e01e      	b.n	8005d3c <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	6899      	ldr	r1, [r3, #8]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d203      	bcs.n	8005d2e <mbedtls_mpi_cmp_mpi+0x11c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	425b      	negs	r3, r3
 8005d2c:	e006      	b.n	8005d3c <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1ca      	bne.n	8005cd0 <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bfb8      	it	lt
 8005d58:	425b      	neglt	r3, r3
 8005d5a:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da02      	bge.n	8005d68 <mbedtls_mpi_cmp_int+0x20>
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	e000      	b.n	8005d6a <mbedtls_mpi_cmp_int+0x22>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	613b      	str	r3, [r7, #16]
    Y.p = p;
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8005d76:	f107 030c 	add.w	r3, r7, #12
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ff48 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8005d82:	4603      	mov	r3, r0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08c      	sub	sp, #48	; 0x30
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d105      	bne.n	8005dac <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	60bb      	str	r3, [r7, #8]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d008      	beq.n	8005dc6 <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff f8ab 	bl	8004f12 <mbedtls_mpi_copy>
 8005dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f040 808d 	bne.w	8005ee0 <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd2:	e00d      	b.n	8005df0 <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dde:	3b01      	subs	r3, #1
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	3b01      	subs	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ee      	bne.n	8005dd4 <mbedtls_mpi_add_abs+0x48>
 8005df6:	e000      	b.n	8005dfa <mbedtls_mpi_add_abs+0x6e>
            break;
 8005df8:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8005dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7fe ffdf 	bl	8004dc0 <mbedtls_mpi_grow>
 8005e02:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d16c      	bne.n	8005ee4 <mbedtls_mpi_add_abs+0x158>

    o = B->p; p = X->p; c = 0;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1e:	e02c      	b.n	8005e7a <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	441a      	add	r2, r3
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	bf8c      	ite	hi
 8005e3c:	2301      	movhi	r3, #1
 8005e3e:	2300      	movls	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	441a      	add	r2, r3
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	bf8c      	ite	hi
 8005e5a:	2301      	movhi	r3, #1
 8005e5c:	2300      	movls	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	4413      	add	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	3304      	adds	r3, #4
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	3304      	adds	r3, #4
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3ce      	bcc.n	8005e20 <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 8005e82:	e029      	b.n	8005ed8 <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d30f      	bcc.n	8005eae <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	3301      	adds	r3, #1
 8005e92:	4619      	mov	r1, r3
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7fe ff93 	bl	8004dc0 <mbedtls_mpi_grow>
 8005e9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d122      	bne.n	8005ee8 <mbedtls_mpi_add_abs+0x15c>
            p = X->p + i;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	bf8c      	ite	hi
 8005ec4:	2301      	movhi	r3, #1
 8005ec6:	2300      	movls	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	3301      	adds	r3, #1
 8005ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1d2      	bne.n	8005e84 <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 8005ede:	e004      	b.n	8005eea <mbedtls_mpi_add_abs+0x15e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8005ee0:	bf00      	nop
 8005ee2:	e002      	b.n	8005eea <mbedtls_mpi_add_abs+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8005ee4:	bf00      	nop
 8005ee6:	e000      	b.n	8005eea <mbedtls_mpi_add_abs+0x15e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8005ee8:	bf00      	nop

    return( ret );
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3730      	adds	r7, #48	; 0x30
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	; 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8005f00:	2300      	movs	r3, #0
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	2300      	movs	r3, #0
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e02b      	b.n	8005f62 <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	bf8c      	ite	hi
 8005f14:	2301      	movhi	r3, #1
 8005f16:	2300      	movls	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	bf34      	ite	cc
 8005f34:	2301      	movcc	r3, #1
 8005f36:	2300      	movcs	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	3301      	adds	r3, #1
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d3cf      	bcc.n	8005f0a <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 8005f6a:	e013      	b.n	8005f94 <mpi_sub_hlp+0xa0>
    {
        z = ( *d < c ); *d -= c;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	bf8c      	ite	hi
 8005f76:	2301      	movhi	r3, #1
 8005f78:	2300      	movls	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	1ad2      	subs	r2, r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	601a      	str	r2, [r3, #0]
        c = z; d++;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3304      	adds	r3, #4
 8005f92:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e8      	bne.n	8005f6c <mpi_sub_hlp+0x78>
    }
}
 8005f9a:	bf00      	nop
 8005f9c:	3724      	adds	r7, #36	; 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b08a      	sub	sp, #40	; 0x28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68b8      	ldr	r0, [r7, #8]
 8005fb6:	f7ff fdaa 	bl	8005b0e <mbedtls_mpi_cmp_abs>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	da02      	bge.n	8005fc6 <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8005fc0:	f06f 0309 	mvn.w	r3, #9
 8005fc4:	e04f      	b.n	8006066 <mbedtls_mpi_sub_abs+0xc0>

    mbedtls_mpi_init( &TB );
 8005fc6:	f107 0314 	add.w	r3, r7, #20
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe febf 	bl	8004d4e <mbedtls_mpi_init>

    if( X == B )
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d10c      	bne.n	8005ff2 <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe ff97 	bl	8004f12 <mbedtls_mpi_copy>
 8005fe4:	6278      	str	r0, [r7, #36]	; 0x24
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d133      	bne.n	8006054 <mbedtls_mpi_sub_abs+0xae>
        B = &TB;
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d007      	beq.n	800600a <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7fe ff88 	bl	8004f12 <mbedtls_mpi_copy>
 8006002:	6278      	str	r0, [r7, #36]	; 0x24
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d126      	bne.n	8006058 <mbedtls_mpi_sub_abs+0xb2>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]

    ret = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	627b      	str	r3, [r7, #36]	; 0x24

    for( n = B->n; n > 0; n-- )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	e00d      	b.n	8006038 <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006026:	3b01      	subs	r3, #1
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	3b01      	subs	r3, #1
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1ee      	bne.n	800601c <mbedtls_mpi_sub_abs+0x76>
 800603e:	e000      	b.n	8006042 <mbedtls_mpi_sub_abs+0x9c>
            break;
 8006040:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6899      	ldr	r1, [r3, #8]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	461a      	mov	r2, r3
 800604c:	6a38      	ldr	r0, [r7, #32]
 800604e:	f7ff ff51 	bl	8005ef4 <mpi_sub_hlp>
 8006052:	e002      	b.n	800605a <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8006054:	bf00      	nop
 8006056:	e000      	b.n	800605a <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8006058:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB );
 800605a:	f107 0314 	add.w	r3, r7, #20
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fe88 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	da21      	bge.n	80060d4 <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	68b8      	ldr	r0, [r7, #8]
 8006094:	f7ff fd3b 	bl	8005b0e <mbedtls_mpi_cmp_abs>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	db0c      	blt.n	80060b8 <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff ff7f 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 80060a8:	6178      	str	r0, [r7, #20]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d11e      	bne.n	80060ee <mbedtls_mpi_add_mpi+0x80>
            X->s =  s;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e01f      	b.n	80060f8 <mbedtls_mpi_add_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff ff72 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 80060c2:	6178      	str	r0, [r7, #20]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d113      	bne.n	80060f2 <mbedtls_mpi_add_mpi+0x84>
            X->s = -s;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	425a      	negs	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e011      	b.n	80060f8 <mbedtls_mpi_add_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fe57 	bl	8005d8c <mbedtls_mpi_add_abs>
 80060de:	6178      	str	r0, [r7, #20]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d107      	bne.n	80060f6 <mbedtls_mpi_add_mpi+0x88>
        X->s = s;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	e004      	b.n	80060f8 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <mbedtls_mpi_add_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80060f6:	bf00      	nop
    }

cleanup:

    return( ret );
 80060f8:	697b      	ldr	r3, [r7, #20]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b086      	sub	sp, #24
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	fb02 f303 	mul.w	r3, r2, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	dd21      	ble.n	8006168 <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68b8      	ldr	r0, [r7, #8]
 8006128:	f7ff fcf1 	bl	8005b0e <mbedtls_mpi_cmp_abs>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	db0c      	blt.n	800614c <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff ff35 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800613c:	6178      	str	r0, [r7, #20]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11e      	bne.n	8006182 <mbedtls_mpi_sub_mpi+0x80>
            X->s =  s;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e01f      	b.n	800618c <mbedtls_mpi_sub_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff28 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 8006156:	6178      	str	r0, [r7, #20]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d113      	bne.n	8006186 <mbedtls_mpi_sub_mpi+0x84>
            X->s = -s;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	425a      	negs	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e011      	b.n	800618c <mbedtls_mpi_sub_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fe0d 	bl	8005d8c <mbedtls_mpi_add_abs>
 8006172:	6178      	str	r0, [r7, #20]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d107      	bne.n	800618a <mbedtls_mpi_sub_mpi+0x88>
        X->s = s;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e004      	b.n	800618c <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <mbedtls_mpi_sub_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800618a:	bf00      	nop
    }

cleanup:

    return( ret );
 800618c:	697b      	ldr	r3, [r7, #20]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b088      	sub	sp, #32
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb8      	it	lt
 80061a8:	425b      	neglt	r3, r3
 80061aa:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da02      	bge.n	80061b8 <mbedtls_mpi_add_int+0x22>
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295
 80061b6:	e000      	b.n	80061ba <mbedtls_mpi_add_int+0x24>
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 80061bc:	2301      	movs	r3, #1
 80061be:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 80061c0:	f107 0310 	add.w	r3, r7, #16
 80061c4:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80061c6:	f107 0314 	add.w	r3, r7, #20
 80061ca:	461a      	mov	r2, r3
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff ff4d 	bl	800606e <mbedtls_mpi_add_mpi>
 80061d4:	4603      	mov	r3, r0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b088      	sub	sp, #32
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bfb8      	it	lt
 80061f0:	425b      	neglt	r3, r3
 80061f2:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da02      	bge.n	8006200 <mbedtls_mpi_sub_int+0x22>
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	e000      	b.n	8006202 <mbedtls_mpi_sub_int+0x24>
 8006200:	2301      	movs	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8006204:	2301      	movs	r3, #1
 8006206:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8006208:	f107 0310 	add.w	r3, r7, #16
 800620c:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800620e:	f107 0314 	add.w	r3, r7, #20
 8006212:	461a      	mov	r2, r3
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff ff73 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800621c:	4603      	mov	r3, r0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 8006226:	b480      	push	{r7}
 8006228:	b09f      	sub	sp, #124	; 0x7c
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint c = 0, t = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	677b      	str	r3, [r7, #116]	; 0x74
 8006238:	2300      	movs	r3, #0
 800623a:	673b      	str	r3, [r7, #112]	; 0x70
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800623c:	f000 bf49 	b.w	80070d2 <mpi_mul_hlp+0xeac>
    {
        MULADDC_INIT
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
        MULADDC_CORE   MULADDC_CORE
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	623b      	str	r3, [r7, #32]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3304      	adds	r3, #4
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006270:	fb02 f303 	mul.w	r3, r2, r3
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006284:	fb02 f303 	mul.w	r3, r2, r3
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4413      	add	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	041b      	lsls	r3, r3, #16
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	bf34      	ite	cc
 80062ba:	2301      	movcc	r3, #1
 80062bc:	2300      	movcs	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4413      	add	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	4413      	add	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	bf34      	ite	cc
 80062d8:	2301      	movcc	r3, #1
 80062da:	2300      	movcs	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ea:	4413      	add	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f2:	429a      	cmp	r2, r3
 80062f4:	bf34      	ite	cc
 80062f6:	2301      	movcc	r3, #1
 80062f8:	2300      	movcs	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4413      	add	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	429a      	cmp	r2, r3
 8006316:	bf34      	ite	cc
 8006318:	2301      	movcc	r3, #1
 800631a:	2300      	movcs	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4413      	add	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	677b      	str	r3, [r7, #116]	; 0x74
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	1d1a      	adds	r2, r3, #4
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	3304      	adds	r3, #4
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006358:	fb02 f303 	mul.w	r3, r2, r3
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	fb02 f303 	mul.w	r3, r2, r3
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4413      	add	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	429a      	cmp	r2, r3
 80063a0:	bf34      	ite	cc
 80063a2:	2301      	movcc	r3, #1
 80063a4:	2300      	movcs	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	4413      	add	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	429a      	cmp	r2, r3
 80063be:	bf34      	ite	cc
 80063c0:	2301      	movcc	r3, #1
 80063c2:	2300      	movcs	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	4413      	add	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d2:	4413      	add	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063da:	429a      	cmp	r2, r3
 80063dc:	bf34      	ite	cc
 80063de:	2301      	movcc	r3, #1
 80063e0:	2300      	movcs	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	4413      	add	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	bf34      	ite	cc
 8006400:	2301      	movcc	r3, #1
 8006402:	2300      	movcs	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	4413      	add	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	677b      	str	r3, [r7, #116]	; 0x74
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	0c1b      	lsrs	r3, r3, #16
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3304      	adds	r3, #4
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006440:	fb02 f303 	mul.w	r3, r2, r3
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644a:	fb02 f303 	mul.w	r3, r2, r3
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006454:	fb02 f303 	mul.w	r3, r2, r3
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4413      	add	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	0c1b      	lsrs	r3, r3, #16
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	041b      	lsls	r3, r3, #16
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	4413      	add	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	429a      	cmp	r2, r3
 8006488:	bf34      	ite	cc
 800648a:	2301      	movcc	r3, #1
 800648c:	2300      	movcs	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	4413      	add	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bf34      	ite	cc
 80064a8:	2301      	movcc	r3, #1
 80064aa:	2300      	movcs	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	4413      	add	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ba:	4413      	add	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bf34      	ite	cc
 80064c6:	2301      	movcc	r3, #1
 80064c8:	2300      	movcs	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4413      	add	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	bf34      	ite	cc
 80064e8:	2301      	movcc	r3, #1
 80064ea:	2300      	movcs	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4413      	add	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	677b      	str	r3, [r7, #116]	; 0x74
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	1d1a      	adds	r2, r3, #4
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	623b      	str	r3, [r7, #32]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3304      	adds	r3, #4
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800653c:	fb02 f303 	mul.w	r3, r2, r3
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4413      	add	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	041b      	lsls	r3, r3, #16
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	429a      	cmp	r2, r3
 8006570:	bf34      	ite	cc
 8006572:	2301      	movcc	r3, #1
 8006574:	2300      	movcs	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	429a      	cmp	r2, r3
 800658e:	bf34      	ite	cc
 8006590:	2301      	movcc	r3, #1
 8006592:	2300      	movcs	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a2:	4413      	add	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065aa:	429a      	cmp	r2, r3
 80065ac:	bf34      	ite	cc
 80065ae:	2301      	movcc	r3, #1
 80065b0:	2300      	movcs	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4413      	add	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4413      	add	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	bf34      	ite	cc
 80065d0:	2301      	movcc	r3, #1
 80065d2:	2300      	movcs	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4413      	add	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	677b      	str	r3, [r7, #116]	; 0x74
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	1d1a      	adds	r2, r3, #4
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	623b      	str	r3, [r7, #32]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3304      	adds	r3, #4
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006610:	fb02 f303 	mul.w	r3, r2, r3
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006624:	fb02 f303 	mul.w	r3, r2, r3
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf34      	ite	cc
 800665a:	2301      	movcc	r3, #1
 800665c:	2300      	movcs	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4413      	add	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	429a      	cmp	r2, r3
 8006676:	bf34      	ite	cc
 8006678:	2301      	movcc	r3, #1
 800667a:	2300      	movcs	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4413      	add	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668a:	4413      	add	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006692:	429a      	cmp	r2, r3
 8006694:	bf34      	ite	cc
 8006696:	2301      	movcc	r3, #1
 8006698:	2300      	movcs	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	4413      	add	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	bf34      	ite	cc
 80066b8:	2301      	movcc	r3, #1
 80066ba:	2300      	movcs	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	677b      	str	r3, [r7, #116]	; 0x74
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	1d1a      	adds	r2, r3, #4
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	3304      	adds	r3, #4
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ee:	fb02 f303 	mul.w	r3, r2, r3
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f8:	fb02 f303 	mul.w	r3, r2, r3
 80066fc:	61bb      	str	r3, [r7, #24]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800670c:	fb02 f303 	mul.w	r3, r2, r3
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4413      	add	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	429a      	cmp	r2, r3
 8006740:	bf34      	ite	cc
 8006742:	2301      	movcc	r3, #1
 8006744:	2300      	movcs	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4413      	add	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	429a      	cmp	r2, r3
 800675e:	bf34      	ite	cc
 8006760:	2301      	movcc	r3, #1
 8006762:	2300      	movcs	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4413      	add	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006772:	4413      	add	r3, r2
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677a:	429a      	cmp	r2, r3
 800677c:	bf34      	ite	cc
 800677e:	2301      	movcc	r3, #1
 8006780:	2300      	movcs	r3, #0
 8006782:	b2db      	uxtb	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	4413      	add	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4413      	add	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	429a      	cmp	r2, r3
 800679e:	bf34      	ite	cc
 80067a0:	2301      	movcc	r3, #1
 80067a2:	2300      	movcs	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4413      	add	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	677b      	str	r3, [r7, #116]	; 0x74
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	1d1a      	adds	r2, r3, #4
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	623b      	str	r3, [r7, #32]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3304      	adds	r3, #4
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f4:	fb02 f303 	mul.w	r3, r2, r3
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4413      	add	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	4413      	add	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	429a      	cmp	r2, r3
 8006828:	bf34      	ite	cc
 800682a:	2301      	movcc	r3, #1
 800682c:	2300      	movcs	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	429a      	cmp	r2, r3
 8006846:	bf34      	ite	cc
 8006848:	2301      	movcc	r3, #1
 800684a:	2300      	movcs	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685a:	4413      	add	r3, r2
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006862:	429a      	cmp	r2, r3
 8006864:	bf34      	ite	cc
 8006866:	2301      	movcc	r3, #1
 8006868:	2300      	movcs	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4413      	add	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4413      	add	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	429a      	cmp	r2, r3
 8006886:	bf34      	ite	cc
 8006888:	2301      	movcc	r3, #1
 800688a:	2300      	movcs	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	677b      	str	r3, [r7, #116]	; 0x74
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	1d1a      	adds	r2, r3, #4
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	0c1b      	lsrs	r3, r3, #16
 80068b2:	623b      	str	r3, [r7, #32]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	3304      	adds	r3, #4
 80068b8:	60bb      	str	r3, [r7, #8]
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c8:	fb02 f303 	mul.w	r3, r2, r3
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068dc:	fb02 f303 	mul.w	r3, r2, r3
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	0c1b      	lsrs	r3, r3, #16
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4413      	add	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	041b      	lsls	r3, r3, #16
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	041b      	lsls	r3, r3, #16
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	429a      	cmp	r2, r3
 8006910:	bf34      	ite	cc
 8006912:	2301      	movcc	r3, #1
 8006914:	2300      	movcs	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4413      	add	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	429a      	cmp	r2, r3
 800692e:	bf34      	ite	cc
 8006930:	2301      	movcc	r3, #1
 8006932:	2300      	movcs	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006942:	4413      	add	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694a:	429a      	cmp	r2, r3
 800694c:	bf34      	ite	cc
 800694e:	2301      	movcc	r3, #1
 8006950:	2300      	movcs	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	4413      	add	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	429a      	cmp	r2, r3
 800696e:	bf34      	ite	cc
 8006970:	2301      	movcc	r3, #1
 8006972:	2300      	movcs	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	677b      	str	r3, [r7, #116]	; 0x74
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	1d1a      	adds	r2, r3, #4
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	0c1b      	lsrs	r3, r3, #16
 800699a:	623b      	str	r3, [r7, #32]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	3304      	adds	r3, #4
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a6:	fb02 f303 	mul.w	r3, r2, r3
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b0:	fb02 f303 	mul.w	r3, r2, r3
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c4:	fb02 f303 	mul.w	r3, r2, r3
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	0c1b      	lsrs	r3, r3, #16
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4413      	add	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	0c1b      	lsrs	r3, r3, #16
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	041b      	lsls	r3, r3, #16
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4413      	add	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	bf34      	ite	cc
 80069fa:	2301      	movcc	r3, #1
 80069fc:	2300      	movcs	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	bf34      	ite	cc
 8006a18:	2301      	movcc	r3, #1
 8006a1a:	2300      	movcs	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4413      	add	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a2a:	4413      	add	r3, r2
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a32:	429a      	cmp	r2, r3
 8006a34:	bf34      	ite	cc
 8006a36:	2301      	movcc	r3, #1
 8006a38:	2300      	movcs	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	4413      	add	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	bf34      	ite	cc
 8006a58:	2301      	movcc	r3, #1
 8006a5a:	2300      	movcs	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	677b      	str	r3, [r7, #116]	; 0x74
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	623b      	str	r3, [r7, #32]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	3304      	adds	r3, #4
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	0c1b      	lsrs	r3, r3, #16
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	041b      	lsls	r3, r3, #16
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	bf34      	ite	cc
 8006ae2:	2301      	movcc	r3, #1
 8006ae4:	2300      	movcs	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4413      	add	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	4413      	add	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	bf34      	ite	cc
 8006b00:	2301      	movcc	r3, #1
 8006b02:	2300      	movcs	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b12:	4413      	add	r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	bf34      	ite	cc
 8006b1e:	2301      	movcc	r3, #1
 8006b20:	2300      	movcs	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4413      	add	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	4413      	add	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	bf34      	ite	cc
 8006b40:	2301      	movcc	r3, #1
 8006b42:	2300      	movcs	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	677b      	str	r3, [r7, #116]	; 0x74
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	1d1a      	adds	r2, r3, #4
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b94:	fb02 f303 	mul.w	r3, r2, r3
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	0c1b      	lsrs	r3, r3, #16
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bf34      	ite	cc
 8006bca:	2301      	movcc	r3, #1
 8006bcc:	2300      	movcs	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	bf34      	ite	cc
 8006be8:	2301      	movcc	r3, #1
 8006bea:	2300      	movcs	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfa:	4413      	add	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c02:	429a      	cmp	r2, r3
 8006c04:	bf34      	ite	cc
 8006c06:	2301      	movcc	r3, #1
 8006c08:	2300      	movcs	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	bf34      	ite	cc
 8006c28:	2301      	movcc	r3, #1
 8006c2a:	2300      	movcs	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	677b      	str	r3, [r7, #116]	; 0x74
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	0c1b      	lsrs	r3, r3, #16
 8006c52:	623b      	str	r3, [r7, #32]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	3304      	adds	r3, #4
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	fb02 f303 	mul.w	r3, r2, r3
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4413      	add	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	bf34      	ite	cc
 8006cb2:	2301      	movcc	r3, #1
 8006cb4:	2300      	movcs	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	bf34      	ite	cc
 8006cd0:	2301      	movcc	r3, #1
 8006cd2:	2300      	movcs	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce2:	4413      	add	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cea:	429a      	cmp	r2, r3
 8006cec:	bf34      	ite	cc
 8006cee:	2301      	movcc	r3, #1
 8006cf0:	2300      	movcs	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	4413      	add	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	bf34      	ite	cc
 8006d10:	2301      	movcc	r3, #1
 8006d12:	2300      	movcs	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	461a      	mov	r2, r3
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	677b      	str	r3, [r7, #116]	; 0x74
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	1d1a      	adds	r2, r3, #4
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	623b      	str	r3, [r7, #32]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d5a:	fb02 f303 	mul.w	r3, r2, r3
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4413      	add	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	0c1b      	lsrs	r3, r3, #16
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	bf34      	ite	cc
 8006d9a:	2301      	movcc	r3, #1
 8006d9c:	2300      	movcs	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	4413      	add	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	bf34      	ite	cc
 8006db8:	2301      	movcc	r3, #1
 8006dba:	2300      	movcs	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dca:	4413      	add	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	bf34      	ite	cc
 8006dd6:	2301      	movcc	r3, #1
 8006dd8:	2300      	movcs	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	4413      	add	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	4413      	add	r3, r2
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	bf34      	ite	cc
 8006df8:	2301      	movcc	r3, #1
 8006dfa:	2300      	movcs	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4413      	add	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	677b      	str	r3, [r7, #116]	; 0x74
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	1d1a      	adds	r2, r3, #4
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	0c1b      	lsrs	r3, r3, #16
 8006e22:	623b      	str	r3, [r7, #32]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	3304      	adds	r3, #4
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4413      	add	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4413      	add	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	041b      	lsls	r3, r3, #16
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	bf34      	ite	cc
 8006e82:	2301      	movcc	r3, #1
 8006e84:	2300      	movcs	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	4413      	add	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	bf34      	ite	cc
 8006ea0:	2301      	movcc	r3, #1
 8006ea2:	2300      	movcs	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	4413      	add	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb2:	4413      	add	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	bf34      	ite	cc
 8006ebe:	2301      	movcc	r3, #1
 8006ec0:	2300      	movcs	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4413      	add	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	bf34      	ite	cc
 8006ee0:	2301      	movcc	r3, #1
 8006ee2:	2300      	movcs	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	1d1a      	adds	r2, r3, #4
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	623b      	str	r3, [r7, #32]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4413      	add	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	0c1b      	lsrs	r3, r3, #16
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	bf34      	ite	cc
 8006f6a:	2301      	movcc	r3, #1
 8006f6c:	2300      	movcs	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4413      	add	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	bf34      	ite	cc
 8006f88:	2301      	movcc	r3, #1
 8006f8a:	2300      	movcs	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9a:	4413      	add	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	bf34      	ite	cc
 8006fa6:	2301      	movcc	r3, #1
 8006fa8:	2300      	movcs	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4413      	add	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	bf34      	ite	cc
 8006fc8:	2301      	movcc	r3, #1
 8006fca:	2300      	movcs	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	677b      	str	r3, [r7, #116]	; 0x74
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	1d1a      	adds	r2, r3, #4
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	623b      	str	r3, [r7, #32]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007008:	fb02 f303 	mul.w	r3, r2, r3
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4413      	add	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4413      	add	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	041b      	lsls	r3, r3, #16
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	4413      	add	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	429a      	cmp	r2, r3
 8007050:	bf34      	ite	cc
 8007052:	2301      	movcc	r3, #1
 8007054:	2300      	movcs	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	4413      	add	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	429a      	cmp	r2, r3
 800706e:	bf34      	ite	cc
 8007070:	2301      	movcc	r3, #1
 8007072:	2300      	movcs	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4413      	add	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007082:	4413      	add	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800708a:	429a      	cmp	r2, r3
 800708c:	bf34      	ite	cc
 800708e:	2301      	movcc	r3, #1
 8007090:	2300      	movcs	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4413      	add	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	4413      	add	r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	bf34      	ite	cc
 80070b0:	2301      	movcc	r3, #1
 80070b2:	2300      	movcs	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	677b      	str	r3, [r7, #116]	; 0x74
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	1d1a      	adds	r2, r3, #4
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	601a      	str	r2, [r3, #0]
    for( ; i >= 16; i -= 16 )
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3b10      	subs	r3, #16
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b0f      	cmp	r3, #15
 80070d6:	f63f a8b3 	bhi.w	8006240 <mpi_mul_hlp+0x1a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 80070da:	e3a8      	b.n	800782e <mpi_mul_hlp+0x1608>
    {
        MULADDC_INIT
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	64bb      	str	r3, [r7, #72]	; 0x48
        MULADDC_CORE   MULADDC_CORE
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	647b      	str	r3, [r7, #68]	; 0x44
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	0c1b      	lsrs	r3, r3, #16
 80070f6:	643b      	str	r3, [r7, #64]	; 0x40
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3304      	adds	r3, #4
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	63bb      	str	r3, [r7, #56]	; 0x38
 8007112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007116:	fb02 f303 	mul.w	r3, r2, r3
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
 800711c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	633b      	str	r3, [r7, #48]	; 0x30
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712c:	4413      	add	r3, r2
 800712e:	633b      	str	r3, [r7, #48]	; 0x30
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007136:	4413      	add	r3, r2
 8007138:	633b      	str	r3, [r7, #48]	; 0x30
 800713a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	637b      	str	r3, [r7, #52]	; 0x34
 8007146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714a:	4413      	add	r3, r2
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
 800714e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007152:	429a      	cmp	r2, r3
 8007154:	bf34      	ite	cc
 8007156:	2301      	movcc	r3, #1
 8007158:	2300      	movcs	r3, #0
 800715a:	b2db      	uxtb	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	4413      	add	r3, r2
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
 8007164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	4413      	add	r3, r2
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
 800716c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007170:	429a      	cmp	r2, r3
 8007172:	bf34      	ite	cc
 8007174:	2301      	movcc	r3, #1
 8007176:	2300      	movcs	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	4413      	add	r3, r2
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
 8007182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007186:	4413      	add	r3, r2
 8007188:	63bb      	str	r3, [r7, #56]	; 0x38
 800718a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800718c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800718e:	429a      	cmp	r2, r3
 8007190:	bf34      	ite	cc
 8007192:	2301      	movcc	r3, #1
 8007194:	2300      	movcs	r3, #0
 8007196:	b2db      	uxtb	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	4413      	add	r3, r2
 800719e:	633b      	str	r3, [r7, #48]	; 0x30
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a6:	4413      	add	r3, r2
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b0:	429a      	cmp	r2, r3
 80071b2:	bf34      	ite	cc
 80071b4:	2301      	movcc	r3, #1
 80071b6:	2300      	movcs	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	4413      	add	r3, r2
 80071c0:	633b      	str	r3, [r7, #48]	; 0x30
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	677b      	str	r3, [r7, #116]	; 0x74
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	647b      	str	r3, [r7, #68]	; 0x44
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	643b      	str	r3, [r7, #64]	; 0x40
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	3304      	adds	r3, #4
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ea:	fb02 f303 	mul.w	r3, r2, r3
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80071fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
 8007202:	637b      	str	r3, [r7, #52]	; 0x34
 8007204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007214:	4413      	add	r3, r2
 8007216:	633b      	str	r3, [r7, #48]	; 0x30
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	0c1b      	lsrs	r3, r3, #16
 800721c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721e:	4413      	add	r3, r2
 8007220:	633b      	str	r3, [r7, #48]	; 0x30
 8007222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	637b      	str	r3, [r7, #52]	; 0x34
 800722e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007232:	4413      	add	r3, r2
 8007234:	63bb      	str	r3, [r7, #56]	; 0x38
 8007236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723a:	429a      	cmp	r2, r3
 800723c:	bf34      	ite	cc
 800723e:	2301      	movcc	r3, #1
 8007240:	2300      	movcs	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	4413      	add	r3, r2
 800724a:	633b      	str	r3, [r7, #48]	; 0x30
 800724c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	4413      	add	r3, r2
 8007252:	63bb      	str	r3, [r7, #56]	; 0x38
 8007254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	429a      	cmp	r2, r3
 800725a:	bf34      	ite	cc
 800725c:	2301      	movcc	r3, #1
 800725e:	2300      	movcs	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	4413      	add	r3, r2
 8007268:	633b      	str	r3, [r7, #48]	; 0x30
 800726a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800726e:	4413      	add	r3, r2
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
 8007272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007276:	429a      	cmp	r2, r3
 8007278:	bf34      	ite	cc
 800727a:	2301      	movcc	r3, #1
 800727c:	2300      	movcs	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	4413      	add	r3, r2
 8007286:	633b      	str	r3, [r7, #48]	; 0x30
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728e:	4413      	add	r3, r2
 8007290:	63bb      	str	r3, [r7, #56]	; 0x38
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007298:	429a      	cmp	r2, r3
 800729a:	bf34      	ite	cc
 800729c:	2301      	movcc	r3, #1
 800729e:	2300      	movcs	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	4413      	add	r3, r2
 80072a8:	633b      	str	r3, [r7, #48]	; 0x30
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	677b      	str	r3, [r7, #116]	; 0x74
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	1d1a      	adds	r2, r3, #4
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b6:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	647b      	str	r3, [r7, #68]	; 0x44
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	0c1b      	lsrs	r3, r3, #16
 80072c6:	643b      	str	r3, [r7, #64]	; 0x40
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	3304      	adds	r3, #4
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
 80072ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fc:	4413      	add	r3, r2
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	4413      	add	r3, r2
 8007308:	633b      	str	r3, [r7, #48]	; 0x30
 800730a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	637b      	str	r3, [r7, #52]	; 0x34
 8007316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	4413      	add	r3, r2
 800731c:	63bb      	str	r3, [r7, #56]	; 0x38
 800731e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	429a      	cmp	r2, r3
 8007324:	bf34      	ite	cc
 8007326:	2301      	movcc	r3, #1
 8007328:	2300      	movcs	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	4413      	add	r3, r2
 8007332:	633b      	str	r3, [r7, #48]	; 0x30
 8007334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	4413      	add	r3, r2
 800733a:	63bb      	str	r3, [r7, #56]	; 0x38
 800733c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	429a      	cmp	r2, r3
 8007342:	bf34      	ite	cc
 8007344:	2301      	movcc	r3, #1
 8007346:	2300      	movcs	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	4413      	add	r3, r2
 8007350:	633b      	str	r3, [r7, #48]	; 0x30
 8007352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007356:	4413      	add	r3, r2
 8007358:	63bb      	str	r3, [r7, #56]	; 0x38
 800735a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800735c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735e:	429a      	cmp	r2, r3
 8007360:	bf34      	ite	cc
 8007362:	2301      	movcc	r3, #1
 8007364:	2300      	movcs	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	4413      	add	r3, r2
 800736e:	633b      	str	r3, [r7, #48]	; 0x30
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007376:	4413      	add	r3, r2
 8007378:	63bb      	str	r3, [r7, #56]	; 0x38
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007380:	429a      	cmp	r2, r3
 8007382:	bf34      	ite	cc
 8007384:	2301      	movcc	r3, #1
 8007386:	2300      	movcs	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	4413      	add	r3, r2
 8007390:	633b      	str	r3, [r7, #48]	; 0x30
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	677b      	str	r3, [r7, #116]	; 0x74
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	647b      	str	r3, [r7, #68]	; 0x44
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	643b      	str	r3, [r7, #64]	; 0x40
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3304      	adds	r3, #4
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
 80073d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d8:	fb02 f303 	mul.w	r3, r2, r3
 80073dc:	633b      	str	r3, [r7, #48]	; 0x30
 80073de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e4:	4413      	add	r3, r2
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
 80073e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ee:	4413      	add	r3, r2
 80073f0:	633b      	str	r3, [r7, #48]	; 0x30
 80073f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	041b      	lsls	r3, r3, #16
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	4413      	add	r3, r2
 8007404:	63bb      	str	r3, [r7, #56]	; 0x38
 8007406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	429a      	cmp	r2, r3
 800740c:	bf34      	ite	cc
 800740e:	2301      	movcc	r3, #1
 8007410:	2300      	movcs	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	4413      	add	r3, r2
 800741a:	633b      	str	r3, [r7, #48]	; 0x30
 800741c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	4413      	add	r3, r2
 8007422:	63bb      	str	r3, [r7, #56]	; 0x38
 8007424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007428:	429a      	cmp	r2, r3
 800742a:	bf34      	ite	cc
 800742c:	2301      	movcc	r3, #1
 800742e:	2300      	movcs	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	4413      	add	r3, r2
 8007438:	633b      	str	r3, [r7, #48]	; 0x30
 800743a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800743e:	4413      	add	r3, r2
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
 8007442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007446:	429a      	cmp	r2, r3
 8007448:	bf34      	ite	cc
 800744a:	2301      	movcc	r3, #1
 800744c:	2300      	movcs	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	4413      	add	r3, r2
 8007456:	633b      	str	r3, [r7, #48]	; 0x30
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745e:	4413      	add	r3, r2
 8007460:	63bb      	str	r3, [r7, #56]	; 0x38
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007468:	429a      	cmp	r2, r3
 800746a:	bf34      	ite	cc
 800746c:	2301      	movcc	r3, #1
 800746e:	2300      	movcs	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	4413      	add	r3, r2
 8007478:	633b      	str	r3, [r7, #48]	; 0x30
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	677b      	str	r3, [r7, #116]	; 0x74
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007486:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	647b      	str	r3, [r7, #68]	; 0x44
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	643b      	str	r3, [r7, #64]	; 0x40
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3304      	adds	r3, #4
 800749c:	60bb      	str	r3, [r7, #8]
 800749e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a2:	fb02 f303 	mul.w	r3, r2, r3
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074ac:	fb02 f303 	mul.w	r3, r2, r3
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074b6:	fb02 f303 	mul.w	r3, r2, r3
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
 80074bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	633b      	str	r3, [r7, #48]	; 0x30
 80074c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074cc:	4413      	add	r3, r2
 80074ce:	633b      	str	r3, [r7, #48]	; 0x30
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d6:	4413      	add	r3, r2
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	041b      	lsls	r3, r3, #16
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
 80074e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ea:	4413      	add	r3, r2
 80074ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	bf34      	ite	cc
 80074f6:	2301      	movcc	r3, #1
 80074f8:	2300      	movcs	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	4413      	add	r3, r2
 8007502:	633b      	str	r3, [r7, #48]	; 0x30
 8007504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007508:	4413      	add	r3, r2
 800750a:	63bb      	str	r3, [r7, #56]	; 0x38
 800750c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	429a      	cmp	r2, r3
 8007512:	bf34      	ite	cc
 8007514:	2301      	movcc	r3, #1
 8007516:	2300      	movcs	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	4413      	add	r3, r2
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
 8007522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007526:	4413      	add	r3, r2
 8007528:	63bb      	str	r3, [r7, #56]	; 0x38
 800752a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800752c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800752e:	429a      	cmp	r2, r3
 8007530:	bf34      	ite	cc
 8007532:	2301      	movcc	r3, #1
 8007534:	2300      	movcs	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	4413      	add	r3, r2
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007546:	4413      	add	r3, r2
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007550:	429a      	cmp	r2, r3
 8007552:	bf34      	ite	cc
 8007554:	2301      	movcc	r3, #1
 8007556:	2300      	movcs	r3, #0
 8007558:	b2db      	uxtb	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	4413      	add	r3, r2
 8007560:	633b      	str	r3, [r7, #48]	; 0x30
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	677b      	str	r3, [r7, #116]	; 0x74
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	647b      	str	r3, [r7, #68]	; 0x44
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	643b      	str	r3, [r7, #64]	; 0x40
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	3304      	adds	r3, #4
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	63bb      	str	r3, [r7, #56]	; 0x38
 800759a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	637b      	str	r3, [r7, #52]	; 0x34
 80075a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075a8:	fb02 f303 	mul.w	r3, r2, r3
 80075ac:	633b      	str	r3, [r7, #48]	; 0x30
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b4:	4413      	add	r3, r2
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	0c1b      	lsrs	r3, r3, #16
 80075bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075be:	4413      	add	r3, r2
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
 80075ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d2:	4413      	add	r3, r2
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075da:	429a      	cmp	r2, r3
 80075dc:	bf34      	ite	cc
 80075de:	2301      	movcc	r3, #1
 80075e0:	2300      	movcs	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	4413      	add	r3, r2
 80075ea:	633b      	str	r3, [r7, #48]	; 0x30
 80075ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f0:	4413      	add	r3, r2
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	429a      	cmp	r2, r3
 80075fa:	bf34      	ite	cc
 80075fc:	2301      	movcc	r3, #1
 80075fe:	2300      	movcs	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	4413      	add	r3, r2
 8007608:	633b      	str	r3, [r7, #48]	; 0x30
 800760a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800760c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800760e:	4413      	add	r3, r2
 8007610:	63bb      	str	r3, [r7, #56]	; 0x38
 8007612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007616:	429a      	cmp	r2, r3
 8007618:	bf34      	ite	cc
 800761a:	2301      	movcc	r3, #1
 800761c:	2300      	movcs	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	4413      	add	r3, r2
 8007626:	633b      	str	r3, [r7, #48]	; 0x30
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762e:	4413      	add	r3, r2
 8007630:	63bb      	str	r3, [r7, #56]	; 0x38
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007638:	429a      	cmp	r2, r3
 800763a:	bf34      	ite	cc
 800763c:	2301      	movcc	r3, #1
 800763e:	2300      	movcs	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	4413      	add	r3, r2
 8007648:	633b      	str	r3, [r7, #48]	; 0x30
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	677b      	str	r3, [r7, #116]	; 0x74
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	1d1a      	adds	r2, r3, #4
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007656:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	647b      	str	r3, [r7, #68]	; 0x44
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	643b      	str	r3, [r7, #64]	; 0x40
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3304      	adds	r3, #4
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800767c:	fb02 f303 	mul.w	r3, r2, r3
 8007680:	63bb      	str	r3, [r7, #56]	; 0x38
 8007682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	637b      	str	r3, [r7, #52]	; 0x34
 800768c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	633b      	str	r3, [r7, #48]	; 0x30
 8007696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007698:	0c1b      	lsrs	r3, r3, #16
 800769a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769c:	4413      	add	r3, r2
 800769e:	633b      	str	r3, [r7, #48]	; 0x30
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a6:	4413      	add	r3, r2
 80076a8:	633b      	str	r3, [r7, #48]	; 0x30
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b2:	041b      	lsls	r3, r3, #16
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
 80076b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ba:	4413      	add	r3, r2
 80076bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80076be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c2:	429a      	cmp	r2, r3
 80076c4:	bf34      	ite	cc
 80076c6:	2301      	movcc	r3, #1
 80076c8:	2300      	movcs	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	4413      	add	r3, r2
 80076d2:	633b      	str	r3, [r7, #48]	; 0x30
 80076d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d8:	4413      	add	r3, r2
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
 80076dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e0:	429a      	cmp	r2, r3
 80076e2:	bf34      	ite	cc
 80076e4:	2301      	movcc	r3, #1
 80076e6:	2300      	movcs	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	4413      	add	r3, r2
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30
 80076f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f6:	4413      	add	r3, r2
 80076f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80076fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076fe:	429a      	cmp	r2, r3
 8007700:	bf34      	ite	cc
 8007702:	2301      	movcc	r3, #1
 8007704:	2300      	movcs	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	4413      	add	r3, r2
 800770e:	633b      	str	r3, [r7, #48]	; 0x30
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007716:	4413      	add	r3, r2
 8007718:	63bb      	str	r3, [r7, #56]	; 0x38
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007720:	429a      	cmp	r2, r3
 8007722:	bf34      	ite	cc
 8007724:	2301      	movcc	r3, #1
 8007726:	2300      	movcs	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	4413      	add	r3, r2
 8007730:	633b      	str	r3, [r7, #48]	; 0x30
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	677b      	str	r3, [r7, #116]	; 0x74
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	647b      	str	r3, [r7, #68]	; 0x44
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	643b      	str	r3, [r7, #64]	; 0x40
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3304      	adds	r3, #4
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800775a:	fb02 f303 	mul.w	r3, r2, r3
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	63bb      	str	r3, [r7, #56]	; 0x38
 800776a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800776e:	fb02 f303 	mul.w	r3, r2, r3
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
 8007774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	633b      	str	r3, [r7, #48]	; 0x30
 800777e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007780:	0c1b      	lsrs	r3, r3, #16
 8007782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007784:	4413      	add	r3, r2
 8007786:	633b      	str	r3, [r7, #48]	; 0x30
 8007788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778a:	0c1b      	lsrs	r3, r3, #16
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	4413      	add	r3, r2
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
 8007792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a2:	4413      	add	r3, r2
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80077a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077aa:	429a      	cmp	r2, r3
 80077ac:	bf34      	ite	cc
 80077ae:	2301      	movcc	r3, #1
 80077b0:	2300      	movcs	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	4413      	add	r3, r2
 80077ba:	633b      	str	r3, [r7, #48]	; 0x30
 80077bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c0:	4413      	add	r3, r2
 80077c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80077c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	429a      	cmp	r2, r3
 80077ca:	bf34      	ite	cc
 80077cc:	2301      	movcc	r3, #1
 80077ce:	2300      	movcs	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	4413      	add	r3, r2
 80077d8:	633b      	str	r3, [r7, #48]	; 0x30
 80077da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077de:	4413      	add	r3, r2
 80077e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf34      	ite	cc
 80077ea:	2301      	movcc	r3, #1
 80077ec:	2300      	movcs	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	4413      	add	r3, r2
 80077f6:	633b      	str	r3, [r7, #48]	; 0x30
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077fe:	4413      	add	r3, r2
 8007800:	63bb      	str	r3, [r7, #56]	; 0x38
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007808:	429a      	cmp	r2, r3
 800780a:	bf34      	ite	cc
 800780c:	2301      	movcc	r3, #1
 800780e:	2300      	movcs	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	4413      	add	r3, r2
 8007818:	633b      	str	r3, [r7, #48]	; 0x30
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	677b      	str	r3, [r7, #116]	; 0x74
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	1d1a      	adds	r2, r3, #4
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007826:	601a      	str	r2, [r3, #0]
    for( ; i >= 8; i -= 8 )
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3b08      	subs	r3, #8
 800782c:	60fb      	str	r3, [r7, #12]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b07      	cmp	r3, #7
 8007832:	f63f ac53 	bhi.w	80070dc <mpi_mul_hlp+0xeb6>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8007836:	e07c      	b.n	8007932 <mpi_mul_hlp+0x170c>
    {
        MULADDC_INIT
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	66bb      	str	r3, [r7, #104]	; 0x68
        MULADDC_CORE
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	667b      	str	r3, [r7, #100]	; 0x64
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	0c1b      	lsrs	r3, r3, #16
 8007852:	663b      	str	r3, [r7, #96]	; 0x60
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	3304      	adds	r3, #4
 8007858:	60bb      	str	r3, [r7, #8]
 800785a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800785c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007866:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007868:	fb02 f303 	mul.w	r3, r2, r3
 800786c:	65bb      	str	r3, [r7, #88]	; 0x58
 800786e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	657b      	str	r3, [r7, #84]	; 0x54
 8007878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800787a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800787c:	fb02 f303 	mul.w	r3, r2, r3
 8007880:	653b      	str	r3, [r7, #80]	; 0x50
 8007882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007888:	4413      	add	r3, r2
 800788a:	653b      	str	r3, [r7, #80]	; 0x50
 800788c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007892:	4413      	add	r3, r2
 8007894:	653b      	str	r3, [r7, #80]	; 0x50
 8007896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007898:	041b      	lsls	r3, r3, #16
 800789a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800789c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800789e:	041b      	lsls	r3, r3, #16
 80078a0:	657b      	str	r3, [r7, #84]	; 0x54
 80078a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a6:	4413      	add	r3, r2
 80078a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80078aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ae:	429a      	cmp	r2, r3
 80078b0:	bf34      	ite	cc
 80078b2:	2301      	movcc	r3, #1
 80078b4:	2300      	movcs	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078bc:	4413      	add	r3, r2
 80078be:	653b      	str	r3, [r7, #80]	; 0x50
 80078c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c4:	4413      	add	r3, r2
 80078c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80078c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078cc:	429a      	cmp	r2, r3
 80078ce:	bf34      	ite	cc
 80078d0:	2301      	movcc	r3, #1
 80078d2:	2300      	movcs	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078da:	4413      	add	r3, r2
 80078dc:	653b      	str	r3, [r7, #80]	; 0x50
 80078de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e2:	4413      	add	r3, r2
 80078e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ea:	429a      	cmp	r2, r3
 80078ec:	bf34      	ite	cc
 80078ee:	2301      	movcc	r3, #1
 80078f0:	2300      	movcs	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f8:	4413      	add	r3, r2
 80078fa:	653b      	str	r3, [r7, #80]	; 0x50
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007902:	4413      	add	r3, r2
 8007904:	65bb      	str	r3, [r7, #88]	; 0x58
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800790c:	429a      	cmp	r2, r3
 800790e:	bf34      	ite	cc
 8007910:	2301      	movcc	r3, #1
 8007912:	2300      	movcs	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800791a:	4413      	add	r3, r2
 800791c:	653b      	str	r3, [r7, #80]	; 0x50
 800791e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007920:	677b      	str	r3, [r7, #116]	; 0x74
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	1d1a      	adds	r2, r3, #4
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800792a:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3b01      	subs	r3, #1
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f47f af7f 	bne.w	8007838 <mpi_mul_hlp+0x1612>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 800793a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800793c:	3301      	adds	r3, #1
 800793e:	673b      	str	r3, [r7, #112]	; 0x70

    do {
        *d += c; c = ( *d < c ); d++;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007946:	441a      	add	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007952:	429a      	cmp	r2, r3
 8007954:	bf8c      	ite	hi
 8007956:	2301      	movhi	r3, #1
 8007958:	2300      	movls	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	677b      	str	r3, [r7, #116]	; 0x74
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3304      	adds	r3, #4
 8007962:	607b      	str	r3, [r7, #4]
    }
    while( c != 0 );
 8007964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1ea      	bne.n	8007940 <mpi_mul_hlp+0x171a>
}
 800796a:	bf00      	nop
 800796c:	377c      	adds	r7, #124	; 0x7c
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b08e      	sub	sp, #56	; 0x38
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TA, TB;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 8007982:	f107 0320 	add.w	r3, r7, #32
 8007986:	4618      	mov	r0, r3
 8007988:	f7fd f9e1 	bl	8004d4e <mbedtls_mpi_init>
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	4618      	mov	r0, r3
 8007992:	f7fd f9dc 	bl	8004d4e <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	429a      	cmp	r2, r3
 800799c:	d10c      	bne.n	80079b8 <mbedtls_mpi_mul_mpi+0x42>
 800799e:	f107 0320 	add.w	r3, r7, #32
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fd fab4 	bl	8004f12 <mbedtls_mpi_copy>
 80079aa:	6378      	str	r0, [r7, #52]	; 0x34
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d17b      	bne.n	8007aaa <mbedtls_mpi_mul_mpi+0x134>
 80079b2:	f107 0320 	add.w	r3, r7, #32
 80079b6:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d10c      	bne.n	80079da <mbedtls_mpi_mul_mpi+0x64>
 80079c0:	f107 0314 	add.w	r3, r7, #20
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd faa3 	bl	8004f12 <mbedtls_mpi_copy>
 80079cc:	6378      	str	r0, [r7, #52]	; 0x34
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d16c      	bne.n	8007aae <mbedtls_mpi_mul_mpi+0x138>
 80079d4:	f107 0314 	add.w	r3, r7, #20
 80079d8:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	633b      	str	r3, [r7, #48]	; 0x30
 80079e0:	e00d      	b.n	80079fe <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079ec:	3b01      	subs	r3, #1
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	3b01      	subs	r3, #1
 80079fc:	633b      	str	r3, [r7, #48]	; 0x30
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1ee      	bne.n	80079e2 <mbedtls_mpi_mul_mpi+0x6c>
 8007a04:	e000      	b.n	8007a08 <mbedtls_mpi_mul_mpi+0x92>
            break;
 8007a06:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0e:	e00d      	b.n	8007a2c <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1ee      	bne.n	8007a10 <mbedtls_mpi_mul_mpi+0x9a>
 8007a32:	e000      	b.n	8007a36 <mbedtls_mpi_mul_mpi+0xc0>
            break;
 8007a34:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8007a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	4413      	add	r3, r2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7fd f9be 	bl	8004dc0 <mbedtls_mpi_grow>
 8007a44:	6378      	str	r0, [r7, #52]	; 0x34
 8007a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d132      	bne.n	8007ab2 <mbedtls_mpi_mul_mpi+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7fd fbc2 	bl	80051d8 <mbedtls_mpi_lset>
 8007a54:	6378      	str	r0, [r7, #52]	; 0x34
 8007a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d12c      	bne.n	8007ab6 <mbedtls_mpi_mul_mpi+0x140>

    for( ; j > 0; j-- )
 8007a5c:	e019      	b.n	8007a92 <mbedtls_mpi_mul_mpi+0x11c>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6899      	ldr	r1, [r3, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	18d0      	adds	r0, r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4602      	mov	r2, r0
 8007a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a88:	f7fe fbcd 	bl	8006226 <mpi_mul_hlp>
    for( ; j > 0; j-- )
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e2      	bne.n	8007a5e <mbedtls_mpi_mul_mpi+0xe8>

    X->s = A->s * B->s;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	fb02 f203 	mul.w	r2, r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e006      	b.n	8007ab8 <mbedtls_mpi_mul_mpi+0x142>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8007aaa:	bf00      	nop
 8007aac:	e004      	b.n	8007ab8 <mbedtls_mpi_mul_mpi+0x142>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <mbedtls_mpi_mul_mpi+0x142>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <mbedtls_mpi_mul_mpi+0x142>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007ab6:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd f959 	bl	8004d74 <mbedtls_mpi_free>
 8007ac2:	f107 0320 	add.w	r3, r7, #32
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fd f954 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 8007acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3738      	adds	r7, #56	; 0x38
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b088      	sub	sp, #32
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8007aea:	f107 0310 	add.w	r3, r7, #16
 8007aee:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8007af4:	f107 0314 	add.w	r3, r7, #20
 8007af8:	461a      	mov	r2, r3
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff ff3a 	bl	8007976 <mbedtls_mpi_mul_mpi>
 8007b02:	4603      	mov	r3, r0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b090      	sub	sp, #64	; 0x40
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_HAVE_UDBL)
    mbedtls_t_udbl dividend, quotient;
#else
    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
 8007b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b1e:	633b      	str	r3, [r7, #48]	; 0x30
    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
 8007b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <mbedtls_int_div_int+0x28>
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d309      	bcc.n	8007b48 <mbedtls_int_div_int+0x3c>
    {
        if (r != NULL) *r = ~0;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <mbedtls_int_div_int+0x36>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 8007b42:	f04f 33ff 	mov.w	r3, #4294967295
 8007b46:	e0a7      	b.n	8007c98 <mbedtls_int_div_int+0x18c>
     */

    /*
     * Normalize the divisor, d, and dividend, u0, u1
     */
    s = mbedtls_clz( d );
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fd fc1e 	bl	800538a <mbedtls_clz>
 8007b4e:	62b8      	str	r0, [r7, #40]	; 0x28
    d = d << s;
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	607b      	str	r3, [r7, #4]

    u1 = u1 << s;
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b62:	60fb      	str	r3, [r7, #12]
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	f1c3 0320 	rsb	r3, r3, #32
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b72:	4252      	negs	r2, r2
 8007b74:	17d2      	asrs	r2, r2, #31
 8007b76:	4013      	ands	r3, r2
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
    u0 =  u0 << s;
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	fa02 f303 	lsl.w	r3, r2, r3
 8007b86:	60bb      	str	r3, [r7, #8]

    d1 = d >> biH;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0c1b      	lsrs	r3, r3, #16
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
    d0 = d & uint_halfword_mask;
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b92:	4013      	ands	r3, r2
 8007b94:	623b      	str	r3, [r7, #32]

    u0_msw = u0 >> biH;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	61fb      	str	r3, [r7, #28]
    u0_lsw = u0 & uint_halfword_mask;
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]

    /*
     * Find the first quotient and remainder
     */
    q1 = u1 / d1;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bac:	63bb      	str	r3, [r7, #56]	; 0x38
    r0 = u1 - d1 * q1;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb2:	fb02 f303 	mul.w	r3, r2, r3
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34

    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 8007bbc:	e00a      	b.n	8007bd4 <mbedtls_int_div_int+0xc8>
    {
        q1 -= 1;
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38
        r0 += d1;
 8007bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	4413      	add	r3, r2
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34

        if ( r0 >= radix ) break;
 8007bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d210      	bcs.n	8007bf6 <mbedtls_int_div_int+0xea>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 8007bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d2f0      	bcs.n	8007bbe <mbedtls_int_div_int+0xb2>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	6a3a      	ldr	r2, [r7, #32]
 8007be0:	fb02 f203 	mul.w	r2, r2, r3
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007be8:	fb01 f103 	mul.w	r1, r1, r3
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	440b      	add	r3, r1
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d8e4      	bhi.n	8007bbe <mbedtls_int_div_int+0xb2>
 8007bf4:	e000      	b.n	8007bf8 <mbedtls_int_div_int+0xec>
        if ( r0 >= radix ) break;
 8007bf6:	bf00      	nop
    }

    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfc:	fb02 f203 	mul.w	r2, r2, r3
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	fb01 f303 	mul.w	r3, r1, r3
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]
    q0 = rAX / d1;
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    r0 = rAX - q0 * d1;
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34

    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 8007c28:	e00a      	b.n	8007c40 <mbedtls_int_div_int+0x134>
    {
        q0 -= 1;
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        r0 += d1;
 8007c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	4413      	add	r3, r2
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34

        if ( r0 >= radix ) break;
 8007c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d210      	bcs.n	8007c62 <mbedtls_int_div_int+0x156>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 8007c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d2f0      	bcs.n	8007c2a <mbedtls_int_div_int+0x11e>
 8007c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4a:	6a3a      	ldr	r2, [r7, #32]
 8007c4c:	fb02 f203 	mul.w	r2, r2, r3
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c54:	fb01 f103 	mul.w	r1, r1, r3
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	440b      	add	r3, r1
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d8e4      	bhi.n	8007c2a <mbedtls_int_div_int+0x11e>
 8007c60:	e000      	b.n	8007c64 <mbedtls_int_div_int+0x158>
        if ( r0 >= radix ) break;
 8007c62:	bf00      	nop
    }

    if (r != NULL)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00e      	beq.n	8007c88 <mbedtls_int_div_int+0x17c>
        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6e:	fb02 f203 	mul.w	r2, r2, r3
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	441a      	add	r2, r3
 8007c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	fb01 f303 	mul.w	r3, r1, r3
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	40da      	lsrs	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	601a      	str	r2, [r3, #0]

    quotient = q1 * radix + q0;
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8c:	fb02 f303 	mul.w	r3, r2, r3
 8007c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c92:	4413      	add	r3, r2
 8007c94:	613b      	str	r3, [r7, #16]

    return quotient;
 8007c96:	693b      	ldr	r3, [r7, #16]
#endif
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3740      	adds	r7, #64	; 0x40
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 8007ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca2:	b099      	sub	sp, #100	; 0x64
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6838      	ldr	r0, [r7, #0]
 8007cb2:	f7fe f849 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 8007cbc:	f06f 030b 	mvn.w	r3, #11
 8007cc0:	e2c1      	b.n	8008246 <mbedtls_mpi_div_mpi+0x5a6>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8007cc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd f841 	bl	8004d4e <mbedtls_mpi_init>
 8007ccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fd f83c 	bl	8004d4e <mbedtls_mpi_init>
 8007cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fd f837 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 8007ce0:	f107 031c 	add.w	r3, r7, #28
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd f832 	bl	8004d4e <mbedtls_mpi_init>
 8007cea:	f107 0310 	add.w	r3, r7, #16
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fd f82d 	bl	8004d4e <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fd ff09 	bl	8005b0e <mbedtls_mpi_cmp_abs>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da19      	bge.n	8007d36 <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d008      	beq.n	8007d1a <mbedtls_mpi_div_mpi+0x7a>
 8007d08:	2100      	movs	r1, #0
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7fd fa64 	bl	80051d8 <mbedtls_mpi_lset>
 8007d10:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 824b 	bne.w	80081b0 <mbedtls_mpi_div_mpi+0x510>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d008      	beq.n	8007d32 <mbedtls_mpi_div_mpi+0x92>
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	68b8      	ldr	r0, [r7, #8]
 8007d24:	f7fd f8f5 	bl	8004f12 <mbedtls_mpi_copy>
 8007d28:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f040 8241 	bne.w	80081b4 <mbedtls_mpi_div_mpi+0x514>
        return( 0 );
 8007d32:	2300      	movs	r3, #0
 8007d34:	e287      	b.n	8008246 <mbedtls_mpi_div_mpi+0x5a6>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8007d36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fd f8e8 	bl	8004f12 <mbedtls_mpi_copy>
 8007d42:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f040 8236 	bne.w	80081b8 <mbedtls_mpi_div_mpi+0x518>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8007d4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fd f8dd 	bl	8004f12 <mbedtls_mpi_copy>
 8007d58:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 822d 	bne.w	80081bc <mbedtls_mpi_div_mpi+0x51c>
    X.s = Y.s = 1;
 8007d62:	2301      	movs	r3, #1
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
 8007d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d68:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	1c9a      	adds	r2, r3, #2
 8007d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fd f822 	bl	8004dc0 <mbedtls_mpi_grow>
 8007d7c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f040 821d 	bne.w	80081c0 <mbedtls_mpi_div_mpi+0x520>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8007d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd fa23 	bl	80051d8 <mbedtls_mpi_lset>
 8007d92:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 8214 	bne.w	80081c4 <mbedtls_mpi_div_mpi+0x524>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8007d9c:	f107 031c 	add.w	r3, r7, #28
 8007da0:	2102      	movs	r1, #2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fd f80c 	bl	8004dc0 <mbedtls_mpi_grow>
 8007da8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 820b 	bne.w	80081c8 <mbedtls_mpi_div_mpi+0x528>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8007db2:	f107 0310 	add.w	r3, r7, #16
 8007db6:	2103      	movs	r1, #3
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fd f801 	bl	8004dc0 <mbedtls_mpi_grow>
 8007dbe:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 8202 	bne.w	80081cc <mbedtls_mpi_div_mpi+0x52c>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8007dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fd fafd 	bl	80053cc <mbedtls_mpi_bitlen>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	657b      	str	r3, [r7, #84]	; 0x54
    if( k < biL - 1 )
 8007dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ddc:	2b1e      	cmp	r3, #30
 8007dde:	d819      	bhi.n	8007e14 <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 8007de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de2:	f1c3 031f 	rsb	r3, r3, #31
 8007de6:	657b      	str	r3, [r7, #84]	; 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8007de8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fd fd4d 	bl	800588e <mbedtls_mpi_shift_l>
 8007df4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f040 81e9 	bne.w	80081d0 <mbedtls_mpi_div_mpi+0x530>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 8007dfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fd fd42 	bl	800588e <mbedtls_mpi_shift_l>
 8007e0a:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <mbedtls_mpi_div_mpi+0x178>
 8007e12:	e1fe      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    }
    else k = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	657b      	str	r3, [r7, #84]	; 0x54

    n = X.n - 1;
 8007e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	653b      	str	r3, [r7, #80]	; 0x50
    t = Y.n - 1;
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	3b01      	subs	r3, #1
 8007e22:	64fb      	str	r3, [r7, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8007e24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fd2b 	bl	800588e <mbedtls_mpi_shift_l>
 8007e38:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 81c9 	bne.w	80081d4 <mbedtls_mpi_div_mpi+0x534>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8007e42:	e016      	b.n	8007e72 <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4a:	1acb      	subs	r3, r1, r3
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	3201      	adds	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8007e56:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007e5a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007e5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe f94d 	bl	8006102 <mbedtls_mpi_sub_mpi>
 8007e68:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f040 81b3 	bne.w	80081d8 <mbedtls_mpi_div_mpi+0x538>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8007e72:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007e76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fd fec8 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dadd      	bge.n	8007e44 <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8007e88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e94:	4611      	mov	r1, r2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fd fd9e 	bl	80059d8 <mbedtls_mpi_shift_r>
 8007e9c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f040 819b 	bne.w	80081dc <mbedtls_mpi_div_mpi+0x53c>

    for( i = n; i > t ; i-- )
 8007ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eaa:	e142      	b.n	8008132 <mbedtls_mpi_div_mpi+0x492>
    {
        if( X.p[i] >= Y.p[t] )
 8007eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d30c      	bcc.n	8007ede <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 8007ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eca:	1acb      	subs	r3, r1, r3
 8007ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	e021      	b.n	8007f22 <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8007ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007eec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 8007ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8007f00:	681e      	ldr	r6, [r3, #0]
 8007f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f08:	1acb      	subs	r3, r1, r3
 8007f0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	18d4      	adds	r4, r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	4632      	mov	r2, r6
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7ff fdf7 	bl	8007b0c <mbedtls_int_div_int>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 8007f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	1acb      	subs	r3, r1, r3
 8007f2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	3201      	adds	r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 8007f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	1acb      	subs	r3, r1, r3
 8007f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f46:	3b01      	subs	r3, #1
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	3a01      	subs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8007f52:	f107 031c 	add.w	r3, r7, #28
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fd f93d 	bl	80051d8 <mbedtls_mpi_lset>
 8007f5e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 813c 	bne.w	80081e0 <mbedtls_mpi_div_mpi+0x540>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8007f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d008      	beq.n	8007f80 <mbedtls_mpi_div_mpi+0x2e0>
 8007f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f76:	3b01      	subs	r3, #1
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	e000      	b.n	8007f82 <mbedtls_mpi_div_mpi+0x2e2>
 8007f80:	2300      	movs	r3, #0
 8007f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f84:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 8007f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	3304      	adds	r3, #4
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8007f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9c:	1acb      	subs	r3, r1, r3
 8007f9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	f107 011c 	add.w	r1, r7, #28
 8007fae:	f107 031c 	add.w	r3, r7, #28
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff fd8f 	bl	8007ad6 <mbedtls_mpi_mul_int>
 8007fb8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 8111 	bne.w	80081e4 <mbedtls_mpi_div_mpi+0x544>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8007fc2:	f107 0310 	add.w	r3, r7, #16
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd f905 	bl	80051d8 <mbedtls_mpi_lset>
 8007fce:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f040 8108 	bne.w	80081e8 <mbedtls_mpi_div_mpi+0x548>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8007fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d908      	bls.n	8007ff0 <mbedtls_mpi_div_mpi+0x350>
 8007fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fe2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007fe6:	3b02      	subs	r3, #2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	e000      	b.n	8007ff2 <mbedtls_mpi_div_mpi+0x352>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8007ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d008      	beq.n	800800e <mbedtls_mpi_div_mpi+0x36e>
 8007ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008004:	3b01      	subs	r3, #1
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	e000      	b.n	8008010 <mbedtls_mpi_div_mpi+0x370>
 800800e:	2300      	movs	r3, #0
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	3204      	adds	r2, #4
 8008014:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 8008016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	441a      	add	r2, r3
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	3308      	adds	r3, #8
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 8008026:	f107 0210 	add.w	r2, r7, #16
 800802a:	f107 031c 	add.w	r3, r7, #28
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f7fd fdee 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	f73f af7e 	bgt.w	8007f3a <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800803e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008040:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008044:	1acb      	subs	r3, r1, r3
 8008046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800804a:	3b01      	subs	r3, #1
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008056:	f107 031c 	add.w	r3, r7, #28
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fd3b 	bl	8007ad6 <mbedtls_mpi_mul_int>
 8008060:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 80c1 	bne.w	80081ec <mbedtls_mpi_div_mpi+0x54c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800806a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800806c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008074:	3b01      	subs	r3, #1
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	f107 031c 	add.w	r3, r7, #28
 800807c:	4611      	mov	r1, r2
 800807e:	4618      	mov	r0, r3
 8008080:	f7fd fc05 	bl	800588e <mbedtls_mpi_shift_l>
 8008084:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008088:	2b00      	cmp	r3, #0
 800808a:	f040 80b1 	bne.w	80081f0 <mbedtls_mpi_div_mpi+0x550>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800808e:	f107 021c 	add.w	r2, r7, #28
 8008092:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008096:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe f831 	bl	8006102 <mbedtls_mpi_sub_mpi>
 80080a0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80080a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 80a5 	bne.w	80081f4 <mbedtls_mpi_div_mpi+0x554>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 80080aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fd fe49 	bl	8005d48 <mbedtls_mpi_cmp_int>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da37      	bge.n	800812c <mbedtls_mpi_div_mpi+0x48c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80080bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80080c0:	f107 031c 	add.w	r3, r7, #28
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fc ff23 	bl	8004f12 <mbedtls_mpi_copy>
 80080cc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80080ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f040 8091 	bne.w	80081f8 <mbedtls_mpi_div_mpi+0x558>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80080d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80080e0:	3b01      	subs	r3, #1
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	f107 031c 	add.w	r3, r7, #28
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fd fbcf 	bl	800588e <mbedtls_mpi_shift_l>
 80080f0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80080f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8081 	bne.w	80081fc <mbedtls_mpi_div_mpi+0x55c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80080fa:	f107 021c 	add.w	r2, r7, #28
 80080fe:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd ffb1 	bl	800606e <mbedtls_mpi_add_mpi>
 800810c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800810e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d175      	bne.n	8008200 <mbedtls_mpi_div_mpi+0x560>
            Z.p[i - t - 1]--;
 8008114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008116:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811a:	1acb      	subs	r3, r1, r3
 800811c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008120:	3b01      	subs	r3, #1
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	3a01      	subs	r2, #1
 800812a:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 800812c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800812e:	3b01      	subs	r3, #1
 8008130:	65bb      	str	r3, [r7, #88]	; 0x58
 8008132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008136:	429a      	cmp	r2, r3
 8008138:	f63f aeb8 	bhi.w	8007eac <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d011      	beq.n	8008166 <mbedtls_mpi_div_mpi+0x4c6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8008142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008146:	4619      	mov	r1, r3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7fc fee2 	bl	8004f12 <mbedtls_mpi_copy>
 800814e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d156      	bne.n	8008204 <mbedtls_mpi_div_mpi+0x564>
        Q->s = A->s * B->s;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	fb02 f203 	mul.w	r2, r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d04d      	beq.n	8008208 <mbedtls_mpi_div_mpi+0x568>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800816c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd fc30 	bl	80059d8 <mbedtls_mpi_shift_r>
 8008178:	65f8      	str	r0, [r7, #92]	; 0x5c
 800817a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d145      	bne.n	800820c <mbedtls_mpi_div_mpi+0x56c>
        X.s = A->s;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	643b      	str	r3, [r7, #64]	; 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8008186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800818a:	4619      	mov	r1, r3
 800818c:	68b8      	ldr	r0, [r7, #8]
 800818e:	f7fc fec0 	bl	8004f12 <mbedtls_mpi_copy>
 8008192:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d13a      	bne.n	8008210 <mbedtls_mpi_div_mpi+0x570>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800819a:	2100      	movs	r1, #0
 800819c:	68b8      	ldr	r0, [r7, #8]
 800819e:	f7fd fdd3 	bl	8005d48 <mbedtls_mpi_cmp_int>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d12f      	bne.n	8008208 <mbedtls_mpi_div_mpi+0x568>
            R->s = 1;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2201      	movs	r2, #1
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e030      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80081b0:	bf00      	nop
 80081b2:	e02e      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80081b4:	bf00      	nop
 80081b6:	e02c      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80081b8:	bf00      	nop
 80081ba:	e02a      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80081bc:	bf00      	nop
 80081be:	e028      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80081c0:	bf00      	nop
 80081c2:	e026      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80081c4:	bf00      	nop
 80081c6:	e024      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80081c8:	bf00      	nop
 80081ca:	e022      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80081cc:	bf00      	nop
 80081ce:	e020      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80081d0:	bf00      	nop
 80081d2:	e01e      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80081d4:	bf00      	nop
 80081d6:	e01c      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80081d8:	bf00      	nop
 80081da:	e01a      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 80081dc:	bf00      	nop
 80081de:	e018      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80081e0:	bf00      	nop
 80081e2:	e016      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80081e4:	bf00      	nop
 80081e6:	e014      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80081e8:	bf00      	nop
 80081ea:	e012      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80081ec:	bf00      	nop
 80081ee:	e010      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80081f0:	bf00      	nop
 80081f2:	e00e      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80081f4:	bf00      	nop
 80081f6:	e00c      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80081f8:	bf00      	nop
 80081fa:	e00a      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80081fc:	bf00      	nop
 80081fe:	e008      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8008200:	bf00      	nop
 8008202:	e006      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8008204:	bf00      	nop
 8008206:	e004      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
    }

cleanup:
 8008208:	bf00      	nop
 800820a:	e002      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800820c:	bf00      	nop
 800820e:	e000      	b.n	8008212 <mbedtls_mpi_div_mpi+0x572>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8008210:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8008212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008216:	4618      	mov	r0, r3
 8008218:	f7fc fdac 	bl	8004d74 <mbedtls_mpi_free>
 800821c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008220:	4618      	mov	r0, r3
 8008222:	f7fc fda7 	bl	8004d74 <mbedtls_mpi_free>
 8008226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800822a:	4618      	mov	r0, r3
 800822c:	f7fc fda2 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8008230:	f107 031c 	add.w	r3, r7, #28
 8008234:	4618      	mov	r0, r3
 8008236:	f7fc fd9d 	bl	8004d74 <mbedtls_mpi_free>
 800823a:	f107 0310 	add.w	r3, r7, #16
 800823e:	4618      	mov	r0, r3
 8008240:	f7fc fd98 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 8008244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8008246:	4618      	mov	r0, r3
 8008248:	3764      	adds	r7, #100	; 0x64
 800824a:	46bd      	mov	sp, r7
 800824c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800824e <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800825a:	2100      	movs	r1, #0
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7fd fd73 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	da02      	bge.n	800826e <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8008268:	f06f 0309 	mvn.w	r3, #9
 800826c:	e032      	b.n	80082d4 <mbedtls_mpi_mod_mpi+0x86>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	2000      	movs	r0, #0
 8008276:	f7ff fd13 	bl	8007ca0 <mbedtls_mpi_div_mpi>
 800827a:	6178      	str	r0, [r7, #20]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d122      	bne.n	80082c8 <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8008282:	e008      	b.n	8008296 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7fd fef0 	bl	800606e <mbedtls_mpi_add_mpi>
 800828e:	6178      	str	r0, [r7, #20]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11a      	bne.n	80082cc <mbedtls_mpi_mod_mpi+0x7e>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8008296:	2100      	movs	r1, #0
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7fd fd55 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dbef      	blt.n	8008284 <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80082a4:	e008      	b.n	80082b8 <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	68f9      	ldr	r1, [r7, #12]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7fd ff29 	bl	8006102 <mbedtls_mpi_sub_mpi>
 80082b0:	6178      	str	r0, [r7, #20]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <mbedtls_mpi_mod_mpi+0x82>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7fd fca9 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	daef      	bge.n	80082a6 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 80082c6:	e004      	b.n	80082d2 <mbedtls_mpi_mod_mpi+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 80082c8:	bf00      	nop
 80082ca:	e002      	b.n	80082d2 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 80082cc:	bf00      	nop
 80082ce:	e000      	b.n	80082d2 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80082d0:	bf00      	nop

    return( ret );
 80082d2:	697b      	ldr	r3, [r7, #20]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b090      	sub	sp, #64	; 0x40
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]

    MPI_VALIDATE_RET( G != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 80082e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fc fd2e 	bl	8004d4e <mbedtls_mpi_init>
 80082f2:	f107 031c 	add.w	r3, r7, #28
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fc fd29 	bl	8004d4e <mbedtls_mpi_init>
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	4618      	mov	r0, r3
 8008302:	f7fc fd24 	bl	8004d4e <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8008306:	f107 031c 	add.w	r3, r7, #28
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	4618      	mov	r0, r3
 800830e:	f7fc fe00 	bl	8004f12 <mbedtls_mpi_copy>
 8008312:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 80af 	bne.w	800847a <mbedtls_mpi_gcd+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800831c:	f107 0310 	add.w	r3, r7, #16
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4618      	mov	r0, r3
 8008324:	f7fc fdf5 	bl	8004f12 <mbedtls_mpi_copy>
 8008328:	63f8      	str	r0, [r7, #60]	; 0x3c
 800832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 80a6 	bne.w	800847e <mbedtls_mpi_gcd+0x1a2>

    lz = mbedtls_mpi_lsb( &TA );
 8008332:	f107 031c 	add.w	r3, r7, #28
 8008336:	4618      	mov	r0, r3
 8008338:	f7fc fff4 	bl	8005324 <mbedtls_mpi_lsb>
 800833c:	63b8      	str	r0, [r7, #56]	; 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 800833e:	f107 0310 	add.w	r3, r7, #16
 8008342:	4618      	mov	r0, r3
 8008344:	f7fc ffee 	bl	8005324 <mbedtls_mpi_lsb>
 8008348:	6378      	str	r0, [r7, #52]	; 0x34

    if( lzt < lz )
 800834a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	429a      	cmp	r2, r3
 8008350:	d201      	bcs.n	8008356 <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 8008352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008354:	63bb      	str	r3, [r7, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8008356:	f107 031c 	add.w	r3, r7, #28
 800835a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800835c:	4618      	mov	r0, r3
 800835e:	f7fd fb3b 	bl	80059d8 <mbedtls_mpi_shift_r>
 8008362:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 808b 	bne.w	8008482 <mbedtls_mpi_gcd+0x1a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800836c:	f107 0310 	add.w	r3, r7, #16
 8008370:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd fb30 	bl	80059d8 <mbedtls_mpi_shift_r>
 8008378:	63f8      	str	r0, [r7, #60]	; 0x3c
 800837a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 8082 	bne.w	8008486 <mbedtls_mpi_gcd+0x1aa>

    TA.s = TB.s = 1;
 8008382:	2301      	movs	r3, #1
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800838a:	e059      	b.n	8008440 <mbedtls_mpi_gcd+0x164>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800838c:	f107 031c 	add.w	r3, r7, #28
 8008390:	4618      	mov	r0, r3
 8008392:	f7fc ffc7 	bl	8005324 <mbedtls_mpi_lsb>
 8008396:	4602      	mov	r2, r0
 8008398:	f107 031c 	add.w	r3, r7, #28
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fd fb1a 	bl	80059d8 <mbedtls_mpi_shift_r>
 80083a4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d16e      	bne.n	800848a <mbedtls_mpi_gcd+0x1ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 80083ac:	f107 0310 	add.w	r3, r7, #16
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fc ffb7 	bl	8005324 <mbedtls_mpi_lsb>
 80083b6:	4602      	mov	r2, r0
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fd fb0a 	bl	80059d8 <mbedtls_mpi_shift_r>
 80083c4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d160      	bne.n	800848e <mbedtls_mpi_gcd+0x1b2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 80083cc:	f107 0210 	add.w	r2, r7, #16
 80083d0:	f107 031c 	add.w	r3, r7, #28
 80083d4:	4611      	mov	r1, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fd fc1b 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	db17      	blt.n	8008412 <mbedtls_mpi_gcd+0x136>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 80083e2:	f107 0210 	add.w	r2, r7, #16
 80083e6:	f107 011c 	add.w	r1, r7, #28
 80083ea:	f107 031c 	add.w	r3, r7, #28
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fd fdd9 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 80083f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80083f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d14a      	bne.n	8008492 <mbedtls_mpi_gcd+0x1b6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 80083fc:	f107 031c 	add.w	r3, r7, #28
 8008400:	2101      	movs	r1, #1
 8008402:	4618      	mov	r0, r3
 8008404:	f7fd fae8 	bl	80059d8 <mbedtls_mpi_shift_r>
 8008408:	63f8      	str	r0, [r7, #60]	; 0x3c
 800840a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d017      	beq.n	8008440 <mbedtls_mpi_gcd+0x164>
 8008410:	e046      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8008412:	f107 021c 	add.w	r2, r7, #28
 8008416:	f107 0110 	add.w	r1, r7, #16
 800841a:	f107 0310 	add.w	r3, r7, #16
 800841e:	4618      	mov	r0, r3
 8008420:	f7fd fdc1 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 8008424:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d134      	bne.n	8008496 <mbedtls_mpi_gcd+0x1ba>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800842c:	f107 0310 	add.w	r3, r7, #16
 8008430:	2101      	movs	r1, #1
 8008432:	4618      	mov	r0, r3
 8008434:	f7fd fad0 	bl	80059d8 <mbedtls_mpi_shift_r>
 8008438:	63f8      	str	r0, [r7, #60]	; 0x3c
 800843a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d12c      	bne.n	800849a <mbedtls_mpi_gcd+0x1be>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8008440:	f107 031c 	add.w	r3, r7, #28
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd fc7e 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d19c      	bne.n	800838c <mbedtls_mpi_gcd+0xb0>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8008452:	f107 0310 	add.w	r3, r7, #16
 8008456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008458:	4618      	mov	r0, r3
 800845a:	f7fd fa18 	bl	800588e <mbedtls_mpi_shift_l>
 800845e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d11b      	bne.n	800849e <mbedtls_mpi_gcd+0x1c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8008466:	f107 0310 	add.w	r3, r7, #16
 800846a:	4619      	mov	r1, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7fc fd50 	bl	8004f12 <mbedtls_mpi_copy>
 8008472:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008476:	2b00      	cmp	r3, #0

cleanup:
 8008478:	e012      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800847a:	bf00      	nop
 800847c:	e010      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800847e:	bf00      	nop
 8008480:	e00e      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8008482:	bf00      	nop
 8008484:	e00c      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8008486:	bf00      	nop
 8008488:	e00a      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800848a:	bf00      	nop
 800848c:	e008      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800848e:	bf00      	nop
 8008490:	e006      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8008492:	bf00      	nop
 8008494:	e004      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8008496:	bf00      	nop
 8008498:	e002      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800849e:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 80084a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fc fc65 	bl	8004d74 <mbedtls_mpi_free>
 80084aa:	f107 031c 	add.w	r3, r7, #28
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fc fc60 	bl	8004d74 <mbedtls_mpi_free>
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fc fc5b 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 80084be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3740      	adds	r7, #64	; 0x40
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	089b      	lsrs	r3, r3, #2
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	f002 0203 	and.w	r2, r2, #3
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	bf14      	ite	ne
 80084e4:	2201      	movne	r2, #1
 80084e6:	2200      	moveq	r2, #0
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	4413      	add	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - size;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	009a      	lsls	r2, r3, #2
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d00d      	beq.n	800851e <mbedtls_mpi_fill_random+0x56>
    {
        mbedtls_mpi_free( X );
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7fc fc36 	bl	8004d74 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f7fc fc20 	bl	8004d4e <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800850e:	69b9      	ldr	r1, [r7, #24]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7fc fc55 	bl	8004dc0 <mbedtls_mpi_grow>
 8008516:	61f8      	str	r0, [r7, #28]
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d118      	bne.n	8008550 <mbedtls_mpi_fill_random+0x88>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800851e:	2100      	movs	r1, #0
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7fc fe59 	bl	80051d8 <mbedtls_mpi_lset>
 8008526:	61f8      	str	r0, [r7, #28]
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d112      	bne.n	8008554 <mbedtls_mpi_fill_random+0x8c>

    Xp = (unsigned char*) X->p;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	613b      	str	r3, [r7, #16]
    f_rng( p_rng, Xp + overhead, size );
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	18d1      	adds	r1, r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	6838      	ldr	r0, [r7, #0]
 8008540:	4798      	blx	r3

    mpi_bigendian_to_host( X->p, limbs );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	69b9      	ldr	r1, [r7, #24]
 8008548:	4618      	mov	r0, r3
 800854a:	f7fd f8b8 	bl	80056be <mpi_bigendian_to_host>
 800854e:	e002      	b.n	8008556 <mbedtls_mpi_fill_random+0x8e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8008550:	bf00      	nop
 8008552:	e000      	b.n	8008556 <mbedtls_mpi_fill_random+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8008554:	bf00      	nop

cleanup:
    return( ret );
 8008556:	69fb      	ldr	r3, [r7, #28]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b0a0      	sub	sp, #128	; 0x80
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800856c:	2101      	movs	r1, #1
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fd fbea 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	dc02      	bgt.n	8008580 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800857a:	f06f 0303 	mvn.w	r3, #3
 800857e:	e23e      	b.n	80089fe <mbedtls_mpi_inv_mod+0x49e>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 8008580:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008584:	4618      	mov	r0, r3
 8008586:	f7fc fbe2 	bl	8004d4e <mbedtls_mpi_init>
 800858a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800858e:	4618      	mov	r0, r3
 8008590:	f7fc fbdd 	bl	8004d4e <mbedtls_mpi_init>
 8008594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008598:	4618      	mov	r0, r3
 800859a:	f7fc fbd8 	bl	8004d4e <mbedtls_mpi_init>
 800859e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fc fbd3 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 80085a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fc fbce 	bl	8004d4e <mbedtls_mpi_init>
 80085b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fc fbc9 	bl	8004d4e <mbedtls_mpi_init>
 80085bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fc fbc4 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 80085c6:	f107 031c 	add.w	r3, r7, #28
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fc fbbf 	bl	8004d4e <mbedtls_mpi_init>
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fc fbba 	bl	8004d4e <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80085da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	68b9      	ldr	r1, [r7, #8]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff fe7a 	bl	80082dc <mbedtls_mpi_gcd>
 80085e8:	67f8      	str	r0, [r7, #124]	; 0x7c
 80085ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 81a5 	bne.w	800893c <mbedtls_mpi_inv_mod+0x3dc>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 80085f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80085f6:	2101      	movs	r1, #1
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fd fba5 	bl	8005d48 <mbedtls_mpi_cmp_int>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8008604:	f06f 030d 	mvn.w	r3, #13
 8008608:	67fb      	str	r3, [r7, #124]	; 0x7c
        goto cleanup;
 800860a:	e1ca      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800860c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff fe1a 	bl	800824e <mbedtls_mpi_mod_mpi>
 800861a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800861c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800861e:	2b00      	cmp	r3, #0
 8008620:	f040 818e 	bne.w	8008940 <mbedtls_mpi_inv_mod+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8008624:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008628:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800862c:	4611      	mov	r1, r2
 800862e:	4618      	mov	r0, r3
 8008630:	f7fc fc6f 	bl	8004f12 <mbedtls_mpi_copy>
 8008634:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 8183 	bne.w	8008944 <mbedtls_mpi_inv_mod+0x3e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800863e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4618      	mov	r0, r3
 8008646:	f7fc fc64 	bl	8004f12 <mbedtls_mpi_copy>
 800864a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800864c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800864e:	2b00      	cmp	r3, #0
 8008650:	f040 817a 	bne.w	8008948 <mbedtls_mpi_inv_mod+0x3e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8008654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4618      	mov	r0, r3
 800865c:	f7fc fc59 	bl	8004f12 <mbedtls_mpi_copy>
 8008660:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008664:	2b00      	cmp	r3, #0
 8008666:	f040 8171 	bne.w	800894c <mbedtls_mpi_inv_mod+0x3ec>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800866a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800866e:	2101      	movs	r1, #1
 8008670:	4618      	mov	r0, r3
 8008672:	f7fc fdb1 	bl	80051d8 <mbedtls_mpi_lset>
 8008676:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800867a:	2b00      	cmp	r3, #0
 800867c:	f040 8168 	bne.w	8008950 <mbedtls_mpi_inv_mod+0x3f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8008680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008684:	2100      	movs	r1, #0
 8008686:	4618      	mov	r0, r3
 8008688:	f7fc fda6 	bl	80051d8 <mbedtls_mpi_lset>
 800868c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800868e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008690:	2b00      	cmp	r3, #0
 8008692:	f040 815f 	bne.w	8008954 <mbedtls_mpi_inv_mod+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 8008696:	f107 031c 	add.w	r3, r7, #28
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f7fc fd9b 	bl	80051d8 <mbedtls_mpi_lset>
 80086a2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80086a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 8156 	bne.w	8008958 <mbedtls_mpi_inv_mod+0x3f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	2101      	movs	r1, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fc fd90 	bl	80051d8 <mbedtls_mpi_lset>
 80086b8:	67f8      	str	r0, [r7, #124]	; 0x7c
 80086ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f040 814d 	bne.w	800895c <mbedtls_mpi_inv_mod+0x3fc>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 80086c2:	e048      	b.n	8008756 <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 80086c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086c8:	2101      	movs	r1, #1
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fd f984 	bl	80059d8 <mbedtls_mpi_shift_r>
 80086d0:	67f8      	str	r0, [r7, #124]	; 0x7c
 80086d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 8143 	bne.w	8008960 <mbedtls_mpi_inv_mod+0x400>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 80086da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d105      	bne.n	80086f2 <mbedtls_mpi_inv_mod+0x192>
 80086e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01b      	beq.n	800872a <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80086f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80086f6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80086fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fd fcb5 	bl	800606e <mbedtls_mpi_add_mpi>
 8008704:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008708:	2b00      	cmp	r3, #0
 800870a:	f040 812b 	bne.w	8008964 <mbedtls_mpi_inv_mod+0x404>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800870e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008712:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800871a:	4618      	mov	r0, r3
 800871c:	f7fd fcf1 	bl	8006102 <mbedtls_mpi_sub_mpi>
 8008720:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008724:	2b00      	cmp	r3, #0
 8008726:	f040 811f 	bne.w	8008968 <mbedtls_mpi_inv_mod+0x408>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800872a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800872e:	2101      	movs	r1, #1
 8008730:	4618      	mov	r0, r3
 8008732:	f7fd f951 	bl	80059d8 <mbedtls_mpi_shift_r>
 8008736:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 8116 	bne.w	800896c <mbedtls_mpi_inv_mod+0x40c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8008740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008744:	2101      	movs	r1, #1
 8008746:	4618      	mov	r0, r3
 8008748:	f7fd f946 	bl	80059d8 <mbedtls_mpi_shift_r>
 800874c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800874e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008750:	2b00      	cmp	r3, #0
 8008752:	f040 810d 	bne.w	8008970 <mbedtls_mpi_inv_mod+0x410>
        while( ( TU.p[0] & 1 ) == 0 )
 8008756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0b0      	beq.n	80086c4 <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 8008762:	e048      	b.n	80087f6 <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8008764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008768:	2101      	movs	r1, #1
 800876a:	4618      	mov	r0, r3
 800876c:	f7fd f934 	bl	80059d8 <mbedtls_mpi_shift_r>
 8008770:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008774:	2b00      	cmp	r3, #0
 8008776:	f040 80fd 	bne.w	8008974 <mbedtls_mpi_inv_mod+0x414>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <mbedtls_mpi_inv_mod+0x232>
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01b      	beq.n	80087ca <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8008792:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008796:	f107 011c 	add.w	r1, r7, #28
 800879a:	f107 031c 	add.w	r3, r7, #28
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd fc65 	bl	800606e <mbedtls_mpi_add_mpi>
 80087a4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80087a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f040 80e5 	bne.w	8008978 <mbedtls_mpi_inv_mod+0x418>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80087ae:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80087b2:	f107 0110 	add.w	r1, r7, #16
 80087b6:	f107 0310 	add.w	r3, r7, #16
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fd fca1 	bl	8006102 <mbedtls_mpi_sub_mpi>
 80087c0:	67f8      	str	r0, [r7, #124]	; 0x7c
 80087c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 80d9 	bne.w	800897c <mbedtls_mpi_inv_mod+0x41c>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 80087ca:	f107 031c 	add.w	r3, r7, #28
 80087ce:	2101      	movs	r1, #1
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fd f901 	bl	80059d8 <mbedtls_mpi_shift_r>
 80087d6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80087d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f040 80d0 	bne.w	8008980 <mbedtls_mpi_inv_mod+0x420>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 80087e0:	f107 0310 	add.w	r3, r7, #16
 80087e4:	2101      	movs	r1, #1
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd f8f6 	bl	80059d8 <mbedtls_mpi_shift_r>
 80087ec:	67f8      	str	r0, [r7, #124]	; 0x7c
 80087ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f040 80c7 	bne.w	8008984 <mbedtls_mpi_inv_mod+0x424>
        while( ( TV.p[0] & 1 ) == 0 )
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0b0      	beq.n	8008764 <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8008802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd fa00 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	db29      	blt.n	800886c <mbedtls_mpi_inv_mod+0x30c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8008818:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800881c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008820:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008824:	4618      	mov	r0, r3
 8008826:	f7fd fc6c 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800882a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800882c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800882e:	2b00      	cmp	r3, #0
 8008830:	f040 80aa 	bne.w	8008988 <mbedtls_mpi_inv_mod+0x428>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8008834:	f107 021c 	add.w	r2, r7, #28
 8008838:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800883c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008840:	4618      	mov	r0, r3
 8008842:	f7fd fc5e 	bl	8006102 <mbedtls_mpi_sub_mpi>
 8008846:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800884a:	2b00      	cmp	r3, #0
 800884c:	f040 809e 	bne.w	800898c <mbedtls_mpi_inv_mod+0x42c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8008850:	f107 0210 	add.w	r2, r7, #16
 8008854:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800885c:	4618      	mov	r0, r3
 800885e:	f7fd fc50 	bl	8006102 <mbedtls_mpi_sub_mpi>
 8008862:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008864:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d028      	beq.n	80088bc <mbedtls_mpi_inv_mod+0x35c>
 800886a:	e09a      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800886c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008870:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008878:	4618      	mov	r0, r3
 800887a:	f7fd fc42 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800887e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 8084 	bne.w	8008990 <mbedtls_mpi_inv_mod+0x430>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8008888:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800888c:	f107 011c 	add.w	r1, r7, #28
 8008890:	f107 031c 	add.w	r3, r7, #28
 8008894:	4618      	mov	r0, r3
 8008896:	f7fd fc34 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800889a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800889c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d178      	bne.n	8008994 <mbedtls_mpi_inv_mod+0x434>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 80088a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80088a6:	f107 0110 	add.w	r1, r7, #16
 80088aa:	f107 0310 	add.w	r3, r7, #16
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fd fc27 	bl	8006102 <mbedtls_mpi_sub_mpi>
 80088b4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80088b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d16d      	bne.n	8008998 <mbedtls_mpi_inv_mod+0x438>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 80088bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fd fa40 	bl	8005d48 <mbedtls_mpi_cmp_int>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f47f af43 	bne.w	8008756 <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 80088d0:	e00b      	b.n	80088ea <mbedtls_mpi_inv_mod+0x38a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 80088d2:	f107 011c 	add.w	r1, r7, #28
 80088d6:	f107 031c 	add.w	r3, r7, #28
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fd fbc6 	bl	800606e <mbedtls_mpi_add_mpi>
 80088e2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80088e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d158      	bne.n	800899c <mbedtls_mpi_inv_mod+0x43c>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 80088ea:	f107 031c 	add.w	r3, r7, #28
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fd fa29 	bl	8005d48 <mbedtls_mpi_cmp_int>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	dbea      	blt.n	80088d2 <mbedtls_mpi_inv_mod+0x372>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 80088fc:	e00b      	b.n	8008916 <mbedtls_mpi_inv_mod+0x3b6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80088fe:	f107 011c 	add.w	r1, r7, #28
 8008902:	f107 031c 	add.w	r3, r7, #28
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	f7fd fbfa 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800890e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d144      	bne.n	80089a0 <mbedtls_mpi_inv_mod+0x440>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8008916:	f107 031c 	add.w	r3, r7, #28
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	f7fd f978 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	daea      	bge.n	80088fe <mbedtls_mpi_inv_mod+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 8008928:	f107 031c 	add.w	r3, r7, #28
 800892c:	4619      	mov	r1, r3
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7fc faef 	bl	8004f12 <mbedtls_mpi_copy>
 8008934:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008938:	2b00      	cmp	r3, #0

cleanup:
 800893a:	e032      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800893c:	bf00      	nop
 800893e:	e030      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8008940:	bf00      	nop
 8008942:	e02e      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8008944:	bf00      	nop
 8008946:	e02c      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8008948:	bf00      	nop
 800894a:	e02a      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800894c:	bf00      	nop
 800894e:	e028      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8008950:	bf00      	nop
 8008952:	e026      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8008954:	bf00      	nop
 8008956:	e024      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 8008958:	bf00      	nop
 800895a:	e022      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800895c:	bf00      	nop
 800895e:	e020      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 8008960:	bf00      	nop
 8008962:	e01e      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 8008964:	bf00      	nop
 8008966:	e01c      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 8008968:	bf00      	nop
 800896a:	e01a      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800896c:	bf00      	nop
 800896e:	e018      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8008970:	bf00      	nop
 8008972:	e016      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8008974:	bf00      	nop
 8008976:	e014      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8008978:	bf00      	nop
 800897a:	e012      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800897c:	bf00      	nop
 800897e:	e010      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8008980:	bf00      	nop
 8008982:	e00e      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8008984:	bf00      	nop
 8008986:	e00c      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8008988:	bf00      	nop
 800898a:	e00a      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800898c:	bf00      	nop
 800898e:	e008      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8008990:	bf00      	nop
 8008992:	e006      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8008994:	bf00      	nop
 8008996:	e004      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8008998:	bf00      	nop
 800899a:	e002      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800899c:	bf00      	nop
 800899e:	e000      	b.n	80089a2 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80089a0:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80089a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fc f9e4 	bl	8004d74 <mbedtls_mpi_free>
 80089ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fc f9df 	bl	8004d74 <mbedtls_mpi_free>
 80089b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fc f9da 	bl	8004d74 <mbedtls_mpi_free>
 80089c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fc f9d5 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 80089ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fc f9d0 	bl	8004d74 <mbedtls_mpi_free>
 80089d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fc f9cb 	bl	8004d74 <mbedtls_mpi_free>
 80089de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fc f9c6 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 80089e8:	f107 031c 	add.w	r3, r7, #28
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fc f9c1 	bl	8004d74 <mbedtls_mpi_free>
 80089f2:	f107 0310 	add.w	r3, r7, #16
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fc f9bc 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 80089fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3780      	adds	r7, #128	; 0x80
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 8008a0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f00b fde8 	bl	80145ea <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b08e      	sub	sp, #56	; 0x38
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	2220      	movs	r2, #32
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f00b fdd6 	bl	80145ea <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3320      	adds	r3, #32
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fa fd10 	bl	8003468 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    ctx->p_entropy = p_entropy;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    ctx->entropy_len = entropy_len;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a5c:	619a      	str	r2, [r3, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a64:	61da      	str	r2, [r3, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3320      	adds	r3, #32
 8008a6a:	f107 0114 	add.w	r1, r7, #20
 8008a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fa fd18 	bl	80034a8 <mbedtls_aes_setkey_enc>
 8008a78:	6378      	str	r0, [r7, #52]	; 0x34
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <mbedtls_ctr_drbg_seed_entropy_len+0x62>
    {
        return( ret );
 8008a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a82:	e00b      	b.n	8008a9c <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 8008a84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fa26 	bl	8008eda <mbedtls_ctr_drbg_reseed>
 8008a8e:	6378      	str	r0, [r7, #52]	; 0x34
 8008a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <mbedtls_ctr_drbg_seed_entropy_len+0x78>
    {
        return( ret );
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	e000      	b.n	8008a9c <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }
    return( 0 );
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3738      	adds	r7, #56	; 0x38
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 8008ab2:	2330      	movs	r3, #48	; 0x30
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	68b9      	ldr	r1, [r7, #8]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff ffae 	bl	8008a22 <mbedtls_ctr_drbg_seed_entropy_len>
 8008ac6:	4603      	mov	r3, r0
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 8008ad0:	b5b0      	push	{r4, r5, r7, lr}
 8008ad2:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	f107 030c 	add.w	r3, r7, #12
 8008adc:	6018      	str	r0, [r3, #0]
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	6019      	str	r1, [r3, #0]
 8008ae4:	1d3b      	adds	r3, r7, #4
 8008ae6:	601a      	str	r2, [r3, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    mbedtls_aes_context aes_ctx;
    int ret = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8008aee:	1d3b      	adds	r3, r7, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008af6:	d902      	bls.n	8008afe <block_cipher_df+0x2e>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8008af8:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8008afc:	e16a      	b.n	8008dd4 <block_cipher_df+0x304>

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 8008afe:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008b02:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8008b06:	2100      	movs	r1, #0
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f00b fd6e 	bl	80145ea <memset>
    mbedtls_aes_init( &aes_ctx );
 8008b0e:	f107 0314 	add.w	r3, r7, #20
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fa fca8 	bl	8003468 <mbedtls_aes_init>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8008b18:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008b1c:	3310      	adds	r3, #16
 8008b1e:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    *p++ = ( data_len >> 24 ) & 0xff;
 8008b22:	1d3b      	adds	r3, r7, #4
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	0e19      	lsrs	r1, r3, #24
 8008b28:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8008b32:	b2ca      	uxtb	r2, r1
 8008b34:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 16 ) & 0xff;
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	0c19      	lsrs	r1, r3, #16
 8008b3c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8008b46:	b2ca      	uxtb	r2, r1
 8008b48:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 8  ) & 0xff;
 8008b4a:	1d3b      	adds	r3, r7, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	0a19      	lsrs	r1, r3, #8
 8008b50:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8008b5a:	b2ca      	uxtb	r2, r1
 8008b5c:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len       ) & 0xff;
 8008b5e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8008b68:	1d3a      	adds	r2, r7, #4
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	701a      	strb	r2, [r3, #0]
    p += 3;
 8008b70:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008b74:	3303      	adds	r3, #3
 8008b76:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 8008b7a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8008b84:	2230      	movs	r2, #48	; 0x30
 8008b86:	701a      	strb	r2, [r3, #0]
    memcpy( p, data, data_len );
 8008b88:	1d3a      	adds	r2, r7, #4
 8008b8a:	f107 0308 	add.w	r3, r7, #8
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	6819      	ldr	r1, [r3, #0]
 8008b92:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 8008b96:	f00b fd04 	bl	80145a2 <memcpy>
    p[data_len] = 0x80;
 8008b9a:	1d3b      	adds	r3, r7, #4
 8008b9c:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	2280      	movs	r2, #128	; 0x80
 8008ba6:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8008ba8:	1d3b      	adds	r3, r7, #4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3319      	adds	r3, #25
 8008bae:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8008bb8:	e00e      	b.n	8008bd8 <block_cipher_df+0x108>
        key[i] = i;
 8008bba:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008bbe:	b2d9      	uxtb	r1, r3
 8008bc0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8008bc4:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008bc8:	4413      	add	r3, r2
 8008bca:	460a      	mov	r2, r1
 8008bcc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8008bce:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8008bd8:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008bdc:	2b1f      	cmp	r3, #31
 8008bde:	ddec      	ble.n	8008bba <block_cipher_df+0xea>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008be0:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fa fc5b 	bl	80034a8 <mbedtls_aes_setkey_enc>
 8008bf2:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 8008bf6:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f040 80b9 	bne.w	8008d72 <block_cipher_df+0x2a2>
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008c00:	2300      	movs	r3, #0
 8008c02:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8008c06:	e06e      	b.n	8008ce6 <block_cipher_df+0x216>
    {
        p = buf;
 8008c08:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008c0c:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008c10:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008c14:	2210      	movs	r2, #16
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f00b fce6 	bl	80145ea <memset>
        use_len = buf_len;
 8008c1e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8008c22:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

        while( use_len > 0 )
 8008c26:	e03f      	b.n	8008ca8 <block_cipher_df+0x1d8>
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8008c2e:	e019      	b.n	8008c64 <block_cipher_df+0x194>
                chain[i] ^= p[i];
 8008c30:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8008c34:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008c38:	4413      	add	r3, r2
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008c40:	f8d7 1344 	ldr.w	r1, [r7, #836]	; 0x344
 8008c44:	440b      	add	r3, r1
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	4053      	eors	r3, r2
 8008c4a:	b2d9      	uxtb	r1, r3
 8008c4c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8008c50:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008c54:	4413      	add	r3, r2
 8008c56:	460a      	mov	r2, r1
 8008c58:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8008c5a:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008c5e:	3301      	adds	r3, #1
 8008c60:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8008c64:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008c68:	2b0f      	cmp	r3, #15
 8008c6a:	dde1      	ble.n	8008c30 <block_cipher_df+0x160>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8008c6c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008c70:	3310      	adds	r3, #16
 8008c72:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 8008c76:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8008c7a:	2b10      	cmp	r3, #16
 8008c7c:	bf28      	it	cs
 8008c7e:	2310      	movcs	r3, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8008c80:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 8008c8a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008c8e:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8008c92:	f107 0014 	add.w	r0, r7, #20
 8008c96:	2101      	movs	r1, #1
 8008c98:	f7fb fb9a 	bl	80043d0 <mbedtls_aes_crypt_ecb>
 8008c9c:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 8008ca0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d166      	bne.n	8008d76 <block_cipher_df+0x2a6>
        while( use_len > 0 )
 8008ca8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1bb      	bne.n	8008c28 <block_cipher_df+0x158>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008cb0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008cb4:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8008cb8:	441a      	add	r2, r3
 8008cba:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	461d      	mov	r5, r3
 8008cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cc4:	6020      	str	r0, [r4, #0]
 8008cc6:	6061      	str	r1, [r4, #4]
 8008cc8:	60a2      	str	r2, [r4, #8]
 8008cca:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 8008ccc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008cd0:	78db      	ldrb	r3, [r3, #3]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008cda:	70da      	strb	r2, [r3, #3]
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008cdc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008ce0:	3310      	adds	r3, #16
 8008ce2:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8008ce6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008cea:	2b2f      	cmp	r3, #47	; 0x2f
 8008cec:	dd8c      	ble.n	8008c08 <block_cipher_df+0x138>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008cee:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8008cf2:	f107 0314 	add.w	r3, r7, #20
 8008cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fa fbd4 	bl	80034a8 <mbedtls_aes_setkey_enc>
 8008d00:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 8008d04:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d136      	bne.n	8008d7a <block_cipher_df+0x2aa>
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 8008d0c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8008d10:	3320      	adds	r3, #32
 8008d12:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    p = output;
 8008d16:	f107 030c 	add.w	r3, r7, #12
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8008d26:	e01f      	b.n	8008d68 <block_cipher_df+0x298>
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 8008d28:	f107 0014 	add.w	r0, r7, #20
 8008d2c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8008d30:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8008d34:	2101      	movs	r1, #1
 8008d36:	f7fb fb4b 	bl	80043d0 <mbedtls_aes_crypt_ecb>
 8008d3a:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 8008d3e:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d11b      	bne.n	8008d7e <block_cipher_df+0x2ae>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008d46:	2210      	movs	r2, #16
 8008d48:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8008d4c:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 8008d50:	f00b fc27 	bl	80145a2 <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8008d54:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008d58:	3310      	adds	r3, #16
 8008d5a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008d5e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008d62:	3310      	adds	r3, #16
 8008d64:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8008d68:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008d6c:	2b2f      	cmp	r3, #47	; 0x2f
 8008d6e:	dddb      	ble.n	8008d28 <block_cipher_df+0x258>
    }
exit:
 8008d70:	e006      	b.n	8008d80 <block_cipher_df+0x2b0>
        goto exit;
 8008d72:	bf00      	nop
 8008d74:	e004      	b.n	8008d80 <block_cipher_df+0x2b0>
                goto exit;
 8008d76:	bf00      	nop
 8008d78:	e002      	b.n	8008d80 <block_cipher_df+0x2b0>
        goto exit;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <block_cipher_df+0x2b0>
            goto exit;
 8008d7e:	bf00      	nop
    mbedtls_aes_free( &aes_ctx );
 8008d80:	f107 0314 	add.w	r3, r7, #20
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fa fb7d 	bl	8003484 <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8008d8a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008d8e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8008d92:	4618      	mov	r0, r3
 8008d94:	f007 fd62 	bl	801085c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008d98:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8008d9c:	2130      	movs	r1, #48	; 0x30
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f007 fd5c 	bl	801085c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 8008da4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008da8:	2120      	movs	r1, #32
 8008daa:	4618      	mov	r0, r3
 8008dac:	f007 fd56 	bl	801085c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8008db0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008db4:	2110      	movs	r1, #16
 8008db6:	4618      	mov	r0, r3
 8008db8:	f007 fd50 	bl	801085c <mbedtls_platform_zeroize>
    if( 0 != ret )
 8008dbc:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d005      	beq.n	8008dd0 <block_cipher_df+0x300>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008dc4:	f107 030c 	add.w	r3, r7, #12
 8008dc8:	2130      	movs	r1, #48	; 0x30
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	f007 fd46 	bl	801085c <mbedtls_platform_zeroize>
    }

    return( ret );
 8008dd0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f507 7752 	add.w	r7, r7, #840	; 0x348
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bdb0      	pop	{r4, r5, r7, pc}

08008dde <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b092      	sub	sp, #72	; 0x48
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 8008de8:	f107 0308 	add.w	r3, r7, #8
 8008dec:	647b      	str	r3, [r7, #68]	; 0x44
    int i, j;
    int ret = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	63bb      	str	r3, [r7, #56]	; 0x38

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008df2:	f107 0308 	add.w	r3, r7, #8
 8008df6:	2230      	movs	r2, #48	; 0x30
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f00b fbf5 	bl	80145ea <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008e00:	2300      	movs	r3, #0
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	e028      	b.n	8008e58 <ctr_drbg_update_internal+0x7a>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8008e06:	2310      	movs	r3, #16
 8008e08:	643b      	str	r3, [r7, #64]	; 0x40
 8008e0a:	e00e      	b.n	8008e2a <ctr_drbg_update_internal+0x4c>
            if( ++ctx->counter[i - 1] != 0 )
 8008e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	5cd2      	ldrb	r2, [r2, r3]
 8008e14:	3201      	adds	r2, #1
 8008e16:	b2d1      	uxtb	r1, r2
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	54d1      	strb	r1, [r2, r3]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	5cd3      	ldrb	r3, [r2, r3]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8008e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e26:	3b01      	subs	r3, #1
 8008e28:	643b      	str	r3, [r7, #64]	; 0x40
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dced      	bgt.n	8008e0c <ctr_drbg_update_internal+0x2e>
 8008e30:	e000      	b.n	8008e34 <ctr_drbg_update_internal+0x56>
                break;
 8008e32:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f103 0020 	add.w	r0, r3, #32
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3e:	2101      	movs	r1, #1
 8008e40:	f7fb fac6 	bl	80043d0 <mbedtls_aes_crypt_ecb>
 8008e44:	63b8      	str	r0, [r7, #56]	; 0x38
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d138      	bne.n	8008ebe <ctr_drbg_update_internal+0xe0>
            goto exit;

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8008e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4e:	3310      	adds	r3, #16
 8008e50:	647b      	str	r3, [r7, #68]	; 0x44
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	3310      	adds	r3, #16
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5a:	2b2f      	cmp	r3, #47	; 0x2f
 8008e5c:	ddd3      	ble.n	8008e06 <ctr_drbg_update_internal+0x28>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8008e5e:	2300      	movs	r3, #0
 8008e60:	643b      	str	r3, [r7, #64]	; 0x40
 8008e62:	e013      	b.n	8008e8c <ctr_drbg_update_internal+0xae>
        tmp[i] ^= data[i];
 8008e64:	f107 0208 	add.w	r2, r7, #8
 8008e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e6a:	4413      	add	r3, r2
 8008e6c:	781a      	ldrb	r2, [r3, #0]
 8008e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	440b      	add	r3, r1
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4053      	eors	r3, r2
 8008e78:	b2d9      	uxtb	r1, r3
 8008e7a:	f107 0208 	add.w	r2, r7, #8
 8008e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e80:	4413      	add	r3, r2
 8008e82:	460a      	mov	r2, r1
 8008e84:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8008e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e88:	3301      	adds	r3, #1
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e8e:	2b2f      	cmp	r3, #47	; 0x2f
 8008e90:	dde8      	ble.n	8008e64 <ctr_drbg_update_internal+0x86>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3320      	adds	r3, #32
 8008e96:	f107 0108 	add.w	r1, r7, #8
 8008e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fa fb02 	bl	80034a8 <mbedtls_aes_setkey_enc>
 8008ea4:	63b8      	str	r0, [r7, #56]	; 0x38
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <ctr_drbg_update_internal+0xe4>
        goto exit;
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	3320      	adds	r3, #32
 8008eb4:	2210      	movs	r2, #16
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	f00b fb73 	bl	80145a2 <memcpy>
 8008ebc:	e002      	b.n	8008ec4 <ctr_drbg_update_internal+0xe6>
            goto exit;
 8008ebe:	bf00      	nop
 8008ec0:	e000      	b.n	8008ec4 <ctr_drbg_update_internal+0xe6>
        goto exit;
 8008ec2:	bf00      	nop

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008ec4:	f107 0308 	add.w	r3, r7, #8
 8008ec8:	2130      	movs	r1, #48	; 0x30
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f007 fcc6 	bl	801085c <mbedtls_platform_zeroize>
    return( ret );
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3748      	adds	r7, #72	; 0x48
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b0e6      	sub	sp, #408	; 0x198
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	f107 030c 	add.w	r3, r7, #12
 8008ee4:	6018      	str	r0, [r3, #0]
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	6019      	str	r1, [r3, #0]
 8008eec:	1d3b      	adds	r3, r7, #4
 8008eee:	601a      	str	r2, [r3, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8008ef6:	f107 030c 	add.w	r3, r7, #12
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008f02:	d809      	bhi.n	8008f18 <mbedtls_ctr_drbg_reseed+0x3e>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8008f10:	1d3a      	adds	r2, r7, #4
 8008f12:	6812      	ldr	r2, [r2, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d902      	bls.n	8008f1e <mbedtls_ctr_drbg_reseed+0x44>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8008f18:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8008f1c:	e072      	b.n	8009004 <mbedtls_ctr_drbg_reseed+0x12a>

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 8008f1e:	f107 0310 	add.w	r3, r7, #16
 8008f22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008f26:	2100      	movs	r1, #0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f00b fb5e 	bl	80145ea <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 8008f2e:	f107 030c 	add.w	r3, r7, #12
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008f38:	f107 020c 	add.w	r2, r7, #12
 8008f3c:	6812      	ldr	r2, [r2, #0]
 8008f3e:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 8008f42:	f107 020c 	add.w	r2, r7, #12
 8008f46:	6812      	ldr	r2, [r2, #0]
 8008f48:	6992      	ldr	r2, [r2, #24]
 8008f4a:	f107 0110 	add.w	r1, r7, #16
 8008f4e:	4798      	blx	r3
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <mbedtls_ctr_drbg_reseed+0x82>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 8008f56:	f06f 0333 	mvn.w	r3, #51	; 0x33
 8008f5a:	e053      	b.n	8009004 <mbedtls_ctr_drbg_reseed+0x12a>
    }

    seedlen += ctx->entropy_len;
 8008f5c:	f107 030c 	add.w	r3, r7, #12
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008f68:	4413      	add	r3, r2
 8008f6a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    /*
     * Add additional data
     */
    if( additional && len )
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d016      	beq.n	8008fa6 <mbedtls_ctr_drbg_reseed+0xcc>
 8008f78:	1d3b      	adds	r3, r7, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d012      	beq.n	8008fa6 <mbedtls_ctr_drbg_reseed+0xcc>
    {
        memcpy( seed + seedlen, additional, len );
 8008f80:	f107 0210 	add.w	r2, r7, #16
 8008f84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008f88:	18d0      	adds	r0, r2, r3
 8008f8a:	1d3a      	adds	r2, r7, #4
 8008f8c:	f107 0308 	add.w	r3, r7, #8
 8008f90:	6812      	ldr	r2, [r2, #0]
 8008f92:	6819      	ldr	r1, [r3, #0]
 8008f94:	f00b fb05 	bl	80145a2 <memcpy>
        seedlen += len;
 8008f98:	1d3b      	adds	r3, r7, #4
 8008f9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 8008fa6:	f107 0110 	add.w	r1, r7, #16
 8008faa:	f107 0310 	add.w	r3, r7, #16
 8008fae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fd8c 	bl	8008ad0 <block_cipher_df>
 8008fb8:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8008fbc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d113      	bne.n	8008fec <mbedtls_ctr_drbg_reseed+0x112>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 8008fc4:	f107 0210 	add.w	r2, r7, #16
 8008fc8:	f107 030c 	add.w	r3, r7, #12
 8008fcc:	4611      	mov	r1, r2
 8008fce:	6818      	ldr	r0, [r3, #0]
 8008fd0:	f7ff ff05 	bl	8008dde <ctr_drbg_update_internal>
 8008fd4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8008fd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d107      	bne.n	8008ff0 <mbedtls_ctr_drbg_reseed+0x116>
        goto exit;
    ctx->reseed_counter = 1;
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	611a      	str	r2, [r3, #16]
 8008fea:	e002      	b.n	8008ff2 <mbedtls_ctr_drbg_reseed+0x118>
        goto exit;
 8008fec:	bf00      	nop
 8008fee:	e000      	b.n	8008ff2 <mbedtls_ctr_drbg_reseed+0x118>
        goto exit;
 8008ff0:	bf00      	nop

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 8008ff2:	f107 0310 	add.w	r3, r7, #16
 8008ff6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f007 fc2e 	bl	801085c <mbedtls_platform_zeroize>
    return( ret );
 8009000:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
}
 8009004:	4618      	mov	r0, r3
 8009006:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b09a      	sub	sp, #104	; 0x68
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	65fb      	str	r3, [r7, #92]	; 0x5c
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	65bb      	str	r3, [r7, #88]	; 0x58
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = output;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	667b      	str	r3, [r7, #100]	; 0x64
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800902e:	d902      	bls.n	8009036 <mbedtls_ctr_drbg_random_with_add+0x28>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 8009030:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009034:	e09c      	b.n	8009170 <mbedtls_ctr_drbg_random_with_add+0x162>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 8009036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903c:	d902      	bls.n	8009044 <mbedtls_ctr_drbg_random_with_add+0x36>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800903e:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8009042:	e095      	b.n	8009170 <mbedtls_ctr_drbg_random_with_add+0x162>

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8009044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009048:	2230      	movs	r2, #48	; 0x30
 800904a:	2100      	movs	r1, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f00b facc 	bl	80145ea <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8009052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	429a      	cmp	r2, r3
 800905c:	dc03      	bgt.n	8009066 <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance )
 800905e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009060:	695b      	ldr	r3, [r3, #20]
    if( ctx->reseed_counter > ctx->reseed_interval ||
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00c      	beq.n	8009080 <mbedtls_ctr_drbg_random_with_add+0x72>
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8009066:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800906c:	f7ff ff35 	bl	8008eda <mbedtls_ctr_drbg_reseed>
 8009070:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <mbedtls_ctr_drbg_random_with_add+0x6e>
        {
            return( ret );
 8009078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800907a:	e079      	b.n	8009170 <mbedtls_ctr_drbg_random_with_add+0x162>
        }
        add_len = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	673b      	str	r3, [r7, #112]	; 0x70
    }

    if( add_len > 0 )
 8009080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009082:	2b00      	cmp	r3, #0
 8009084:	d04d      	beq.n	8009122 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 8009086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800908a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff fd1e 	bl	8008ad0 <block_cipher_df>
 8009094:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d155      	bne.n	8009148 <mbedtls_ctr_drbg_random_with_add+0x13a>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800909c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090a0:	4619      	mov	r1, r3
 80090a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80090a4:	f7ff fe9b 	bl	8008dde <ctr_drbg_update_internal>
 80090a8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80090aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d14d      	bne.n	800914c <mbedtls_ctr_drbg_random_with_add+0x13e>
            goto exit;
    }

    while( output_len > 0 )
 80090b0:	e037      	b.n	8009122 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80090b2:	2310      	movs	r3, #16
 80090b4:	663b      	str	r3, [r7, #96]	; 0x60
 80090b6:	e00e      	b.n	80090d6 <mbedtls_ctr_drbg_random_with_add+0xc8>
            if( ++ctx->counter[i - 1] != 0 )
 80090b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090ba:	3b01      	subs	r3, #1
 80090bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090be:	5cd2      	ldrb	r2, [r2, r3]
 80090c0:	3201      	adds	r2, #1
 80090c2:	b2d1      	uxtb	r1, r2
 80090c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090c6:	54d1      	strb	r1, [r2, r3]
 80090c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090ca:	5cd3      	ldrb	r3, [r2, r3]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d106      	bne.n	80090de <mbedtls_ctr_drbg_random_with_add+0xd0>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80090d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090d2:	3b01      	subs	r3, #1
 80090d4:	663b      	str	r3, [r7, #96]	; 0x60
 80090d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090d8:	2b00      	cmp	r3, #0
 80090da:	dced      	bgt.n	80090b8 <mbedtls_ctr_drbg_random_with_add+0xaa>
 80090dc:	e000      	b.n	80090e0 <mbedtls_ctr_drbg_random_with_add+0xd2>
                break;
 80090de:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 80090e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e2:	f103 0020 	add.w	r0, r3, #32
 80090e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090e8:	f107 0314 	add.w	r3, r7, #20
 80090ec:	2101      	movs	r1, #1
 80090ee:	f7fb f96f 	bl	80043d0 <mbedtls_aes_crypt_ecb>
 80090f2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80090f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d12a      	bne.n	8009150 <mbedtls_ctr_drbg_random_with_add+0x142>
            goto exit;

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b10      	cmp	r3, #16
 80090fe:	bf28      	it	cs
 8009100:	2310      	movcs	r3, #16
 8009102:	657b      	str	r3, [r7, #84]	; 0x54
                                                       output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 8009104:	f107 0314 	add.w	r3, r7, #20
 8009108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800910a:	4619      	mov	r1, r3
 800910c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800910e:	f00b fa48 	bl	80145a2 <memcpy>
        p += use_len;
 8009112:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009116:	4413      	add	r3, r2
 8009118:	667b      	str	r3, [r7, #100]	; 0x64
        output_len -= use_len;
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	607b      	str	r3, [r7, #4]
    while( output_len > 0 )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1c4      	bne.n	80090b2 <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8009128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800912c:	4619      	mov	r1, r3
 800912e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009130:	f7ff fe55 	bl	8008dde <ctr_drbg_update_internal>
 8009134:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10b      	bne.n	8009154 <mbedtls_ctr_drbg_random_with_add+0x146>
        goto exit;

    ctx->reseed_counter++;
 800913c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009144:	611a      	str	r2, [r3, #16]
 8009146:	e006      	b.n	8009156 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8009148:	bf00      	nop
 800914a:	e004      	b.n	8009156 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800914c:	bf00      	nop
 800914e:	e002      	b.n	8009156 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8009150:	bf00      	nop
 8009152:	e000      	b.n	8009156 <mbedtls_ctr_drbg_random_with_add+0x148>
        goto exit;
 8009154:	bf00      	nop

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 8009156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800915a:	2130      	movs	r1, #48	; 0x30
 800915c:	4618      	mov	r0, r3
 800915e:	f007 fb7d 	bl	801085c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8009162:	f107 0314 	add.w	r3, r7, #20
 8009166:	2110      	movs	r1, #16
 8009168:	4618      	mov	r0, r3
 800916a:	f007 fb77 	bl	801085c <mbedtls_platform_zeroize>
    return( 0 );
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3768      	adds	r7, #104	; 0x68
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af02      	add	r7, sp, #8
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	2300      	movs	r3, #0
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	6978      	ldr	r0, [r7, #20]
 8009194:	f7ff ff3b 	bl	800900e <mbedtls_ctr_drbg_random_with_add>
 8009198:	6138      	str	r0, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800919a:	693b      	ldr	r3, [r7, #16]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b6:	3307      	adds	r3, #7
 80091b8:	08db      	lsrs	r3, r3, #3
 80091ba:	61bb      	str	r3, [r7, #24]
    size_t use_size = blen > n_size ? n_size : blen;
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	bf28      	it	cs
 80091c4:	4613      	movcs	r3, r2
 80091c6:	617b      	str	r3, [r7, #20]

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	68b8      	ldr	r0, [r7, #8]
 80091ce:	f7fc faa9 	bl	8005724 <mbedtls_mpi_read_binary>
 80091d2:	61f8      	str	r0, [r7, #28]
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d126      	bne.n	8009228 <derive_mpi+0x84>
    if( use_size * 8 > grp->nbits )
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	00da      	lsls	r2, r3, #3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d90c      	bls.n	8009200 <derive_mpi+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	00da      	lsls	r2, r3, #3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	68b8      	ldr	r0, [r7, #8]
 80091f4:	f7fc fbf0 	bl	80059d8 <mbedtls_mpi_shift_r>
 80091f8:	61f8      	str	r0, [r7, #28]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d115      	bne.n	800922c <derive_mpi+0x88>

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	334c      	adds	r3, #76	; 0x4c
 8009204:	4619      	mov	r1, r3
 8009206:	68b8      	ldr	r0, [r7, #8]
 8009208:	f7fc fd03 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	db0e      	blt.n	8009230 <derive_mpi+0x8c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	334c      	adds	r3, #76	; 0x4c
 8009216:	461a      	mov	r2, r3
 8009218:	68b9      	ldr	r1, [r7, #8]
 800921a:	68b8      	ldr	r0, [r7, #8]
 800921c:	f7fc ff71 	bl	8006102 <mbedtls_mpi_sub_mpi>
 8009220:	61f8      	str	r0, [r7, #28]
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	2b00      	cmp	r3, #0

cleanup:
 8009226:	e003      	b.n	8009230 <derive_mpi+0x8c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8009228:	bf00      	nop
 800922a:	e002      	b.n	8009232 <derive_mpi+0x8e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 800922c:	bf00      	nop
 800922e:	e000      	b.n	8009232 <derive_mpi+0x8e>
cleanup:
 8009230:	bf00      	nop
    return( ret );
 8009232:	69fb      	ldr	r3, [r7, #28]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <ecdsa_sign_restartable>:
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
                mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b0a2      	sub	sp, #136	; 0x88
 8009240:	af04      	add	r7, sp, #16
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
    int ret, key_tries, sign_tries;
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
 800924a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800924e:	673b      	str	r3, [r7, #112]	; 0x70
 8009250:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009254:	66fb      	str	r3, [r7, #108]	; 0x6c
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;
 8009256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800925a:	66bb      	str	r3, [r7, #104]	; 0x68
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	667b      	str	r3, [r7, #100]	; 0x64

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <ecdsa_sign_restartable+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8009268:	4b8c      	ldr	r3, [pc, #560]	; (800949c <ecdsa_sign_restartable+0x260>)
 800926a:	e112      	b.n	8009492 <ecdsa_sign_restartable+0x256>

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800926c:	2101      	movs	r1, #1
 800926e:	6838      	ldr	r0, [r7, #0]
 8009270:	f7fc fd6a 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	db08      	blt.n	800928c <ecdsa_sign_restartable+0x50>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	334c      	adds	r3, #76	; 0x4c
 800927e:	4619      	mov	r1, r3
 8009280:	6838      	ldr	r0, [r7, #0]
 8009282:	f7fc fcc6 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	db01      	blt.n	8009290 <ecdsa_sign_restartable+0x54>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800928c:	4b84      	ldr	r3, [pc, #528]	; (80094a0 <ecdsa_sign_restartable+0x264>)
 800928e:	e100      	b.n	8009492 <ecdsa_sign_restartable+0x256>

    mbedtls_ecp_point_init( &R );
 8009290:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fbe3 	bl	8009a60 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 800929a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fb fd55 	bl	8004d4e <mbedtls_mpi_init>
 80092a4:	f107 0320 	add.w	r3, r7, #32
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fb fd50 	bl	8004d4e <mbedtls_mpi_init>
 80092ae:	f107 0314 	add.w	r3, r7, #20
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fb fd4b 	bl	8004d4e <mbedtls_mpi_init>
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
 80092b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
    do
    {
        if( *p_sign_tries++ > 10 )
 80092be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092c0:	1d1a      	adds	r2, r3, #4
 80092c2:	673a      	str	r2, [r7, #112]	; 0x70
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b0a      	cmp	r3, #10
 80092c8:	dd02      	ble.n	80092d0 <ecdsa_sign_restartable+0x94>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 80092ca:	4b76      	ldr	r3, [pc, #472]	; (80094a4 <ecdsa_sign_restartable+0x268>)
 80092cc:	677b      	str	r3, [r7, #116]	; 0x74
            goto cleanup;
 80092ce:	e0cb      	b.n	8009468 <ecdsa_sign_restartable+0x22c>

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
 80092d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
        do
        {
            if( *p_key_tries++ > 10 )
 80092d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d8:	1d1a      	adds	r2, r3, #4
 80092da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b0a      	cmp	r3, #10
 80092e0:	dd02      	ble.n	80092e8 <ecdsa_sign_restartable+0xac>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 80092e2:	4b70      	ldr	r3, [pc, #448]	; (80094a4 <ecdsa_sign_restartable+0x268>)
 80092e4:	677b      	str	r3, [r7, #116]	; 0x74
                goto cleanup;
 80092e6:	e0bf      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
            }

            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 80092e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80092f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f003 fc9c 	bl	800cc30 <mbedtls_ecp_gen_privkey>
 80092f8:	6778      	str	r0, [r7, #116]	; 0x74
 80092fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 809c 	bne.w	800943a <ecdsa_sign_restartable+0x1fe>
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009308:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800930c:	2300      	movs	r3, #0
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	4613      	mov	r3, r2
 800931e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f003 f99b 	bl	800c65c <mbedtls_ecp_mul_restartable>
 8009326:	6778      	str	r0, [r7, #116]	; 0x74
 8009328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800932a:	2b00      	cmp	r3, #0
 800932c:	f040 8087 	bne.w	800943e <ecdsa_sign_restartable+0x202>
                                                  f_rng, p_rng, ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8009336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800933a:	4619      	mov	r1, r3
 800933c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800933e:	f7fe ff86 	bl	800824e <mbedtls_mpi_mod_mpi>
 8009342:	6778      	str	r0, [r7, #116]	; 0x74
 8009344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009346:	2b00      	cmp	r3, #0
 8009348:	d17b      	bne.n	8009442 <ecdsa_sign_restartable+0x206>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 800934a:	2100      	movs	r1, #0
 800934c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800934e:	f7fc fcfb 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0be      	beq.n	80092d6 <ecdsa_sign_restartable+0x9a>
        ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8009358:	f107 0120 	add.w	r1, r7, #32
 800935c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009360:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff ff1d 	bl	80091a4 <derive_mpi>
 800936a:	6778      	str	r0, [r7, #116]	; 0x74
 800936c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800936e:	2b00      	cmp	r3, #0
 8009370:	d169      	bne.n	8009446 <ecdsa_sign_restartable+0x20a>

        /*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 8009372:	f107 0114 	add.w	r1, r7, #20
 8009376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800937a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f003 fc56 	bl	800cc30 <mbedtls_ecp_gen_privkey>
 8009384:	6778      	str	r0, [r7, #116]	; 0x74
 8009386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009388:	2b00      	cmp	r3, #0
 800938a:	d15e      	bne.n	800944a <ecdsa_sign_restartable+0x20e>

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fe faf0 	bl	8007976 <mbedtls_mpi_mul_mpi>
 8009396:	6778      	str	r0, [r7, #116]	; 0x74
 8009398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800939a:	2b00      	cmp	r3, #0
 800939c:	d157      	bne.n	800944e <ecdsa_sign_restartable+0x212>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 800939e:	f107 0120 	add.w	r1, r7, #32
 80093a2:	f107 0320 	add.w	r3, r7, #32
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fc fe60 	bl	800606e <mbedtls_mpi_add_mpi>
 80093ae:	6778      	str	r0, [r7, #116]	; 0x74
 80093b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d14d      	bne.n	8009452 <ecdsa_sign_restartable+0x216>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 80093b6:	f107 0214 	add.w	r2, r7, #20
 80093ba:	f107 0120 	add.w	r1, r7, #32
 80093be:	f107 0320 	add.w	r3, r7, #32
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fad7 	bl	8007976 <mbedtls_mpi_mul_mpi>
 80093c8:	6778      	str	r0, [r7, #116]	; 0x74
 80093ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d142      	bne.n	8009456 <ecdsa_sign_restartable+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 80093d0:	f107 0314 	add.w	r3, r7, #20
 80093d4:	461a      	mov	r2, r3
 80093d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093d8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80093da:	f7fe facc 	bl	8007976 <mbedtls_mpi_mul_mpi>
 80093de:	6778      	str	r0, [r7, #116]	; 0x74
 80093e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d139      	bne.n	800945a <ecdsa_sign_restartable+0x21e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	334c      	adds	r3, #76	; 0x4c
 80093ea:	461a      	mov	r2, r3
 80093ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff f8b6 	bl	8008560 <mbedtls_mpi_inv_mod>
 80093f4:	6778      	str	r0, [r7, #116]	; 0x74
 80093f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d130      	bne.n	800945e <ecdsa_sign_restartable+0x222>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 80093fc:	f107 0320 	add.w	r3, r7, #32
 8009400:	461a      	mov	r2, r3
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7fe fab6 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800940a:	6778      	str	r0, [r7, #116]	; 0x74
 800940c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800940e:	2b00      	cmp	r3, #0
 8009410:	d127      	bne.n	8009462 <ecdsa_sign_restartable+0x226>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	334c      	adds	r3, #76	; 0x4c
 8009416:	461a      	mov	r2, r3
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7fe ff17 	bl	800824e <mbedtls_mpi_mod_mpi>
 8009420:	6778      	str	r0, [r7, #116]	; 0x74
 8009422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009424:	2b00      	cmp	r3, #0
 8009426:	d11e      	bne.n	8009466 <ecdsa_sign_restartable+0x22a>
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 8009428:	2100      	movs	r1, #0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7fc fc8c 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	f43f af43 	beq.w	80092be <ecdsa_sign_restartable+0x82>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
 8009438:	e016      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 800943a:	bf00      	nop
 800943c:	e014      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 800943e:	bf00      	nop
 8009440:	e012      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 8009442:	bf00      	nop
 8009444:	e010      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8009446:	bf00      	nop
 8009448:	e00e      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 800944a:	bf00      	nop
 800944c:	e00c      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 800944e:	bf00      	nop
 8009450:	e00a      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 8009452:	bf00      	nop
 8009454:	e008      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 8009456:	bf00      	nop
 8009458:	e006      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 800945a:	bf00      	nop
 800945c:	e004      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 800945e:	bf00      	nop
 8009460:	e002      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8009466:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 8009468:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fb62 	bl	8009b36 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 8009472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009476:	4618      	mov	r0, r3
 8009478:	f7fb fc7c 	bl	8004d74 <mbedtls_mpi_free>
 800947c:	f107 0320 	add.w	r3, r7, #32
 8009480:	4618      	mov	r0, r3
 8009482:	f7fb fc77 	bl	8004d74 <mbedtls_mpi_free>
 8009486:	f107 0314 	add.w	r3, r7, #20
 800948a:	4618      	mov	r0, r3
 800948c:	f7fb fc72 	bl	8004d74 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
 8009490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8009492:	4618      	mov	r0, r3
 8009494:	3778      	adds	r7, #120	; 0x78
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	ffffb080 	.word	0xffffb080
 80094a0:	ffffb380 	.word	0xffffb380
 80094a4:	ffffb300 	.word	0xffffb300

080094a8 <ecdsa_verify_restartable>:
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
                                     const unsigned char *buf, size_t blen,
                                     const mbedtls_ecp_point *Q,
                                     const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b0a0      	sub	sp, #128	; 0x80
 80094ac:	af04      	add	r7, sp, #16
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;
 80094b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80094bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094c0:	667b      	str	r3, [r7, #100]	; 0x64

    mbedtls_ecp_point_init( &R );
 80094c2:	f107 0310 	add.w	r3, r7, #16
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 faca 	bl	8009a60 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 80094cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fb fc3c 	bl	8004d4e <mbedtls_mpi_init>
 80094d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fb fc37 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 80094e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fb fc32 	bl	8004d4e <mbedtls_mpi_init>
 80094ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fb fc2d 	bl	8004d4e <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <ecdsa_verify_restartable+0x58>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80094fc:	4b68      	ldr	r3, [pc, #416]	; (80096a0 <ecdsa_verify_restartable+0x1f8>)
 80094fe:	e0cb      	b.n	8009698 <ecdsa_verify_restartable+0x1f0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 8009500:	2101      	movs	r1, #1
 8009502:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009504:	f7fc fc20 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	db18      	blt.n	8009540 <ecdsa_verify_restartable+0x98>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	334c      	adds	r3, #76	; 0x4c
 8009512:	4619      	mov	r1, r3
 8009514:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009516:	f7fc fb7c 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	da0f      	bge.n	8009540 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8009520:	2101      	movs	r1, #1
 8009522:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009524:	f7fc fc10 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009528:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800952a:	2b00      	cmp	r3, #0
 800952c:	db08      	blt.n	8009540 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	334c      	adds	r3, #76	; 0x4c
 8009532:	4619      	mov	r1, r3
 8009534:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009536:	f7fc fb6c 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	db02      	blt.n	8009546 <ecdsa_verify_restartable+0x9e>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 8009540:	4b58      	ldr	r3, [pc, #352]	; (80096a4 <ecdsa_verify_restartable+0x1fc>)
 8009542:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 8009544:	e08e      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8009546:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7ff fe28 	bl	80091a4 <derive_mpi>
 8009554:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d172      	bne.n	8009642 <ecdsa_verify_restartable+0x19a>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8009562:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009566:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fff9 	bl	8008560 <mbedtls_mpi_inv_mod>
 800956e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d167      	bne.n	8009646 <ecdsa_verify_restartable+0x19e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 8009576:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800957a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800957e:	4619      	mov	r1, r3
 8009580:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009582:	f7fe f9f8 	bl	8007976 <mbedtls_mpi_mul_mpi>
 8009586:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d15d      	bne.n	800964a <ecdsa_verify_restartable+0x1a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	334c      	adds	r3, #76	; 0x4c
 8009592:	461a      	mov	r2, r3
 8009594:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009596:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009598:	f7fe fe59 	bl	800824e <mbedtls_mpi_mod_mpi>
 800959c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800959e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d154      	bne.n	800964e <ecdsa_verify_restartable+0x1a6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 80095a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80095a8:	461a      	mov	r2, r3
 80095aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80095ac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80095ae:	f7fe f9e2 	bl	8007976 <mbedtls_mpi_mul_mpi>
 80095b2:	66f8      	str	r0, [r7, #108]	; 0x6c
 80095b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d14b      	bne.n	8009652 <ecdsa_verify_restartable+0x1aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	334c      	adds	r3, #76	; 0x4c
 80095be:	461a      	mov	r2, r3
 80095c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80095c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80095c4:	f7fe fe43 	bl	800824e <mbedtls_mpi_mod_mpi>
 80095c8:	66f8      	str	r0, [r7, #108]	; 0x6c
 80095ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d142      	bne.n	8009656 <ecdsa_verify_restartable+0x1ae>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80095d6:	f107 0110 	add.w	r1, r7, #16
 80095da:	2300      	movs	r3, #0
 80095dc:	9302      	str	r3, [sp, #8]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	4613      	mov	r3, r2
 80095e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f003 fa2a 	bl	800ca44 <mbedtls_ecp_muladd_restartable>
 80095f0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80095f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d130      	bne.n	800965a <ecdsa_verify_restartable+0x1b2>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 80095f8:	f107 0310 	add.w	r3, r7, #16
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 fb84 	bl	8009d0a <mbedtls_ecp_is_zero>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <ecdsa_verify_restartable+0x166>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 8009608:	4b26      	ldr	r3, [pc, #152]	; (80096a4 <ecdsa_verify_restartable+0x1fc>)
 800960a:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 800960c:	e02a      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8009614:	f107 0110 	add.w	r1, r7, #16
 8009618:	f107 0310 	add.w	r3, r7, #16
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fe16 	bl	800824e <mbedtls_mpi_mod_mpi>
 8009622:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d119      	bne.n	800965e <ecdsa_verify_restartable+0x1b6>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 800962a:	f107 0310 	add.w	r3, r7, #16
 800962e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009630:	4618      	mov	r0, r3
 8009632:	f7fc faee 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d012      	beq.n	8009662 <ecdsa_verify_restartable+0x1ba>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800963c:	4b19      	ldr	r3, [pc, #100]	; (80096a4 <ecdsa_verify_restartable+0x1fc>)
 800963e:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 8009640:	e010      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8009642:	bf00      	nop
 8009644:	e00e      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 8009646:	bf00      	nop
 8009648:	e00c      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800964a:	bf00      	nop
 800964c:	e00a      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 800964e:	bf00      	nop
 8009650:	e008      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 8009652:	bf00      	nop
 8009654:	e006      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 8009656:	bf00      	nop
 8009658:	e004      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 800965a:	bf00      	nop
 800965c:	e002      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 800965e:	bf00      	nop
 8009660:	e000      	b.n	8009664 <ecdsa_verify_restartable+0x1bc>
    }

cleanup:
 8009662:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 8009664:	f107 0310 	add.w	r3, r7, #16
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fa64 	bl	8009b36 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 800966e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009672:	4618      	mov	r0, r3
 8009674:	f7fb fb7e 	bl	8004d74 <mbedtls_mpi_free>
 8009678:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800967c:	4618      	mov	r0, r3
 800967e:	f7fb fb79 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 8009682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009686:	4618      	mov	r0, r3
 8009688:	f7fb fb74 	bl	8004d74 <mbedtls_mpi_free>
 800968c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009690:	4618      	mov	r0, r3
 8009692:	f7fb fb6f 	bl	8004d74 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
 8009696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8009698:	4618      	mov	r0, r3
 800969a:	3770      	adds	r7, #112	; 0x70
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	ffffb080 	.word	0xffffb080
 80096a4:	ffffb200 	.word	0xffffb200

080096a8 <ecdsa_signature_to_asn1>:
/*
 * Convert a signature (given by context) to ASN.1
 */
static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                    unsigned char *sig, size_t *slen )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b0a2      	sub	sp, #136	; 0x88
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    unsigned char *p = buf + sizeof( buf );
 80096b6:	f107 0314 	add.w	r3, r7, #20
 80096ba:	3369      	adds	r3, #105	; 0x69
 80096bc:	613b      	str	r3, [r7, #16]
    size_t len = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 80096c4:	f107 0114 	add.w	r1, r7, #20
 80096c8:	f107 0310 	add.w	r3, r7, #16
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fb f99b 	bl	8004a0a <mbedtls_asn1_write_mpi>
 80096d4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80096d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096dc:	2b00      	cmp	r3, #0
 80096de:	da02      	bge.n	80096e6 <ecdsa_signature_to_asn1+0x3e>
 80096e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096e4:	e05b      	b.n	800979e <ecdsa_signature_to_asn1+0xf6>
 80096e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80096ee:	4413      	add	r3, r2
 80096f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 80096f4:	f107 0114 	add.w	r1, r7, #20
 80096f8:	f107 0310 	add.w	r3, r7, #16
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fb f983 	bl	8004a0a <mbedtls_asn1_write_mpi>
 8009704:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8009708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800970c:	2b00      	cmp	r3, #0
 800970e:	da02      	bge.n	8009716 <ecdsa_signature_to_asn1+0x6e>
 8009710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009714:	e043      	b.n	800979e <ecdsa_signature_to_asn1+0xf6>
 8009716:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800971a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800971e:	4413      	add	r3, r2
 8009720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8009724:	f107 0114 	add.w	r1, r7, #20
 8009728:	f107 0310 	add.w	r3, r7, #16
 800972c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009730:	4618      	mov	r0, r3
 8009732:	f7fb f85c 	bl	80047ee <mbedtls_asn1_write_len>
 8009736:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800973a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800973e:	2b00      	cmp	r3, #0
 8009740:	da02      	bge.n	8009748 <ecdsa_signature_to_asn1+0xa0>
 8009742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009746:	e02a      	b.n	800979e <ecdsa_signature_to_asn1+0xf6>
 8009748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800974c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009750:	4413      	add	r3, r2
 8009752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8009756:	f107 0114 	add.w	r1, r7, #20
 800975a:	f107 0310 	add.w	r3, r7, #16
 800975e:	2230      	movs	r2, #48	; 0x30
 8009760:	4618      	mov	r0, r3
 8009762:	f7fb f931 	bl	80049c8 <mbedtls_asn1_write_tag>
 8009766:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800976a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800976e:	2b00      	cmp	r3, #0
 8009770:	da02      	bge.n	8009778 <ecdsa_signature_to_asn1+0xd0>
 8009772:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009776:	e012      	b.n	800979e <ecdsa_signature_to_asn1+0xf6>
 8009778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800977c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009780:	4413      	add	r3, r2
 8009782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    memcpy( sig, p, len );
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f00a ff07 	bl	80145a2 <memcpy>
    *slen = len;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800979a:	601a      	str	r2, [r3, #0]

    return( 0 );
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3788      	adds	r7, #136	; 0x88
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80097a6:	b590      	push	{r4, r7, lr}
 80097a8:	b093      	sub	sp, #76	; 0x4c
 80097aa:	af06      	add	r7, sp, #24
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
 80097b2:	460b      	mov	r3, r1
 80097b4:	72fb      	strb	r3, [r7, #11]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 80097b6:	f107 0320 	add.w	r3, r7, #32
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fb fac7 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80097c0:	f107 0314 	add.w	r3, r7, #20
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fb fac2 	bl	8004d4e <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80097d2:	f107 0214 	add.w	r2, r7, #20
 80097d6:	f107 0120 	add.w	r1, r7, #32
 80097da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e0:	9303      	str	r3, [sp, #12]
 80097e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097e4:	9302      	str	r3, [sp, #8]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	4623      	mov	r3, r4
 80097f0:	f7ff fd24 	bl	800923c <ecdsa_sign_restartable>
 80097f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10b      	bne.n	8009814 <mbedtls_ecdsa_write_signature_restartable+0x6e>
                         hash, hlen, f_rng, p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 80097fc:	f107 0114 	add.w	r1, r7, #20
 8009800:	f107 0020 	add.w	r0, r7, #32
 8009804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009808:	f7ff ff4e 	bl	80096a8 <ecdsa_signature_to_asn1>
 800980c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	2b00      	cmp	r3, #0

cleanup:
 8009812:	e000      	b.n	8009816 <mbedtls_ecdsa_write_signature_restartable+0x70>
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 8009814:	bf00      	nop
    mbedtls_mpi_free( &r );
 8009816:	f107 0320 	add.w	r3, r7, #32
 800981a:	4618      	mov	r0, r3
 800981c:	f7fb faaa 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8009820:	f107 0314 	add.w	r3, r7, #20
 8009824:	4618      	mov	r0, r3
 8009826:	f7fb faa5 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800982c:	4618      	mov	r0, r3
 800982e:	3734      	adds	r7, #52	; 0x34
 8009830:	46bd      	mov	sp, r7
 8009832:	bd90      	pop	{r4, r7, pc}

08009834 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b08a      	sub	sp, #40	; 0x28
 8009838:	af06      	add	r7, sp, #24
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	607a      	str	r2, [r7, #4]
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	460b      	mov	r3, r1
 8009842:	72fb      	strb	r3, [r7, #11]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
 8009844:	7af9      	ldrb	r1, [r7, #11]
 8009846:	2300      	movs	r3, #0
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	9302      	str	r3, [sp, #8]
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff ffa1 	bl	80097a6 <mbedtls_ecdsa_write_signature_restartable>
 8009864:	4603      	mov	r3, r0
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b086      	sub	sp, #24
 8009872:	af02      	add	r7, sp, #8
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	603b      	str	r3, [r7, #0]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    return( mbedtls_ecdsa_read_signature_restartable(
 800987c:	2300      	movs	r3, #0
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 f806 	bl	800989c <mbedtls_ecdsa_read_signature_restartable>
 8009890:	4603      	mov	r3, r0
                ctx, hash, hlen, sig, slen, NULL ) );
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b092      	sub	sp, #72	; 0x48
 80098a0:	af04      	add	r7, sp, #16
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char *p = (unsigned char *) sig;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const unsigned char *end = sig + slen;
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b2:	4413      	add	r3, r2
 80098b4:	633b      	str	r3, [r7, #48]	; 0x30
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 80098b6:	f107 031c 	add.w	r3, r7, #28
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fb fa47 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80098c0:	f107 0310 	add.w	r3, r7, #16
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fb fa42 	bl	8004d4e <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80098ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80098ce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80098d2:	2330      	movs	r3, #48	; 0x30
 80098d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098d6:	f7fa fe59 	bl	800458c <mbedtls_asn1_get_tag>
 80098da:	6378      	str	r0, [r7, #52]	; 0x34
 80098dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <mbedtls_ecdsa_read_signature_restartable+0x50>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e4:	f5a3 439f 	sub.w	r3, r3, #20352	; 0x4f80
 80098e8:	637b      	str	r3, [r7, #52]	; 0x34
        goto cleanup;
 80098ea:	e044      	b.n	8009976 <mbedtls_ecdsa_read_signature_restartable+0xda>
    }

    if( p + len != end )
 80098ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	4413      	add	r3, r2
 80098f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d002      	beq.n	80098fe <mbedtls_ecdsa_read_signature_restartable+0x62>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 80098f8:	4b26      	ldr	r3, [pc, #152]	; (8009994 <mbedtls_ecdsa_read_signature_restartable+0xf8>)
 80098fa:	637b      	str	r3, [r7, #52]	; 0x34
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
 80098fc:	e03b      	b.n	8009976 <mbedtls_ecdsa_read_signature_restartable+0xda>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 80098fe:	f107 021c 	add.w	r2, r7, #28
 8009902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009908:	4618      	mov	r0, r3
 800990a:	f7fa fea6 	bl	800465a <mbedtls_asn1_get_mpi>
 800990e:	6378      	str	r0, [r7, #52]	; 0x34
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10b      	bne.n	800992e <mbedtls_ecdsa_read_signature_restartable+0x92>
 8009916:	f107 0210 	add.w	r2, r7, #16
 800991a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800991e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009920:	4618      	mov	r0, r3
 8009922:	f7fa fe9a 	bl	800465a <mbedtls_asn1_get_mpi>
 8009926:	6378      	str	r0, [r7, #52]	; 0x34
 8009928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992a:	2b00      	cmp	r3, #0
 800992c:	d004      	beq.n	8009938 <mbedtls_ecdsa_read_signature_restartable+0x9c>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800992e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009930:	f5a3 439f 	sub.w	r3, r3, #20352	; 0x4f80
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
        goto cleanup;
 8009936:	e01e      	b.n	8009976 <mbedtls_ecdsa_read_signature_restartable+0xda>
#if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
                                      &ctx->Q, &r, &s ) ) != 0 )
        goto cleanup;
#else
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 8009938:	68f8      	ldr	r0, [r7, #12]
                              &ctx->Q, &r, &s, rs_ctx ) ) != 0 )
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f103 0288 	add.w	r2, r3, #136	; 0x88
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 8009940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009942:	9302      	str	r3, [sp, #8]
 8009944:	f107 0310 	add.w	r3, r7, #16
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	f107 031c 	add.w	r3, r7, #28
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	4613      	mov	r3, r2
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	68b9      	ldr	r1, [r7, #8]
 8009956:	f7ff fda7 	bl	80094a8 <ecdsa_verify_restartable>
 800995a:	6378      	str	r0, [r7, #52]	; 0x34
 800995c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <mbedtls_ecdsa_read_signature_restartable+0xd4>
#endif /* MBEDTLS_ECDSA_VERIFY_ALT */

    /* At this point we know that the buffer starts with a valid signature.
     * Return 0 if the buffer just contains the signature, and a specific
     * error code if the valid signature is followed by more data. */
    if( p != end )
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009966:	429a      	cmp	r2, r3
 8009968:	d004      	beq.n	8009974 <mbedtls_ecdsa_read_signature_restartable+0xd8>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <mbedtls_ecdsa_read_signature_restartable+0xfc>)
 800996c:	637b      	str	r3, [r7, #52]	; 0x34
 800996e:	e002      	b.n	8009976 <mbedtls_ecdsa_read_signature_restartable+0xda>
        goto cleanup;
 8009970:	bf00      	nop
 8009972:	e000      	b.n	8009976 <mbedtls_ecdsa_read_signature_restartable+0xda>

cleanup:
 8009974:	bf00      	nop
    mbedtls_mpi_free( &r );
 8009976:	f107 031c 	add.w	r3, r7, #28
 800997a:	4618      	mov	r0, r3
 800997c:	f7fb f9fa 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8009980:	f107 0310 	add.w	r3, r7, #16
 8009984:	4618      	mov	r0, r3
 8009986:	f7fb f9f5 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800998a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800998c:	4618      	mov	r0, r3
 800998e:	3738      	adds	r7, #56	; 0x38
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	ffffb01a 	.word	0xffffb01a
 8009998:	ffffb400 	.word	0xffffb400

0800999c <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 f973 	bl	8009c98 <mbedtls_ecp_group_copy>
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d119      	bne.n	80099ee <mbedtls_ecdsa_from_keypair+0x52>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	337c      	adds	r3, #124	; 0x7c
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fb faa3 	bl	8004f12 <mbedtls_mpi_copy>
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10c      	bne.n	80099ee <mbedtls_ecdsa_from_keypair+0x52>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	3388      	adds	r3, #136	; 0x88
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f000 f928 	bl	8009c36 <mbedtls_ecp_copy>
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <mbedtls_ecdsa_from_keypair+0x58>
    {
        mbedtls_ecdsa_free( ctx );
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f810 	bl	8009a14 <mbedtls_ecdsa_free>
    }

    return( ret );
 80099f4:	68fb      	ldr	r3, [r7, #12]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <mbedtls_ecdsa_init>:

/*
 * Initialize context
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f87f 	bl	8009b0a <mbedtls_ecp_keypair_init>
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <mbedtls_ecdsa_free>:

/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <mbedtls_ecdsa_free+0x16>
        return;

    mbedtls_ecp_keypair_free( ctx );
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f8ed 	bl	8009c02 <mbedtls_ecp_keypair_free>
 8009a28:	e000      	b.n	8009a2c <mbedtls_ecdsa_free+0x18>
        return;
 8009a2a:	bf00      	nop
}
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <ecp_get_type>:

/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
    if( grp->G.X.p == NULL )
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <ecp_get_type+0x14>
        return( ECP_TYPE_NONE );
 8009a42:	2300      	movs	r3, #0
 8009a44:	e006      	b.n	8009a54 <ecp_get_type+0x22>

    if( grp->G.Y.p == NULL )
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <ecp_get_type+0x20>
        return( ECP_TYPE_MONTGOMERY );
 8009a4e:	2302      	movs	r3, #2
 8009a50:	e000      	b.n	8009a54 <ecp_get_type+0x22>
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 8009a52:	2301      	movs	r3, #1
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fb f96f 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	330c      	adds	r3, #12
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fb f96a 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3318      	adds	r3, #24
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fb f965 	bl	8004d4e <mbedtls_mpi_init>
}
 8009a84:	bf00      	nop
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fb f955 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3310      	adds	r3, #16
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fb f950 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	331c      	adds	r3, #28
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fb f94b 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3328      	adds	r3, #40	; 0x28
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff ffcf 	bl	8009a60 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	334c      	adds	r3, #76	; 0x4c
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fb f941 	bl	8004d4e <mbedtls_mpi_init>
    grp->pbits = 0;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = 0;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	65da      	str	r2, [r3, #92]	; 0x5c
    grp->h = 0;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	661a      	str	r2, [r3, #96]	; 0x60
    grp->modp = NULL;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	665a      	str	r2, [r3, #100]	; 0x64
    grp->t_pre = NULL;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	669a      	str	r2, [r3, #104]	; 0x68
    grp->t_post = NULL;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	66da      	str	r2, [r3, #108]	; 0x6c
    grp->t_data = NULL;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	671a      	str	r2, [r3, #112]	; 0x70
    grp->T = NULL;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	675a      	str	r2, [r3, #116]	; 0x74
    grp->T_size = 0;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff ffb9 	bl	8009a8c <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	337c      	adds	r3, #124	; 0x7c
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fb f915 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3388      	adds	r3, #136	; 0x88
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff ff99 	bl	8009a60 <mbedtls_ecp_point_init>
}
 8009b2e:	bf00      	nop
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00e      	beq.n	8009b62 <mbedtls_ecp_point_free+0x2c>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fb f914 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	330c      	adds	r3, #12
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fb f90f 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3318      	adds	r3, #24
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fb f90a 	bl	8004d74 <mbedtls_mpi_free>
 8009b60:	e000      	b.n	8009b64 <mbedtls_ecp_point_free+0x2e>
        return;
 8009b62:	bf00      	nop
}
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d040      	beq.n	8009bfa <mbedtls_ecp_group_free+0x90>
        return;

    if( grp->h != 1 )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d018      	beq.n	8009bb2 <mbedtls_ecp_group_free+0x48>
    {
        mbedtls_mpi_free( &grp->P );
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fb f8f5 	bl	8004d74 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3310      	adds	r3, #16
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fb f8f0 	bl	8004d74 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	331c      	adds	r3, #28
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fb f8eb 	bl	8004d74 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3328      	adds	r3, #40	; 0x28
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff ffc7 	bl	8009b36 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	334c      	adds	r3, #76	; 0x4c
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fb f8e1 	bl	8004d74 <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01a      	beq.n	8009bf0 <mbedtls_ecp_group_free+0x86>
    {
        for( i = 0; i < grp->T_size; i++ )
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	e00d      	b.n	8009bdc <mbedtls_ecp_group_free+0x72>
            mbedtls_ecp_point_free( &grp->T[i] );
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	440b      	add	r3, r1
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff ffb0 	bl	8009b36 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d3ec      	bcc.n	8009bc0 <mbedtls_ecp_group_free+0x56>
        mbedtls_free( grp->T );
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bea:	4618      	mov	r0, r3
 8009bec:	f00a fcc2 	bl	8014574 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 8009bf0:	217c      	movs	r1, #124	; 0x7c
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f006 fe32 	bl	801085c <mbedtls_platform_zeroize>
 8009bf8:	e000      	b.n	8009bfc <mbedtls_ecp_group_free+0x92>
        return;
 8009bfa:	bf00      	nop
}
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
    if( key == NULL )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00e      	beq.n	8009c2e <mbedtls_ecp_keypair_free+0x2c>
        return;

    mbedtls_ecp_group_free( &key->grp );
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff ffa9 	bl	8009b6a <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	337c      	adds	r3, #124	; 0x7c
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fb f8a9 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3388      	adds	r3, #136	; 0x88
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ff85 	bl	8009b36 <mbedtls_ecp_point_free>
 8009c2c:	e000      	b.n	8009c30 <mbedtls_ecp_keypair_free+0x2e>
        return;
 8009c2e:	bf00      	nop
}
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	6039      	str	r1, [r7, #0]
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	4611      	mov	r1, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fb f963 	bl	8004f12 <mbedtls_mpi_copy>
 8009c4c:	60f8      	str	r0, [r7, #12]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d119      	bne.n	8009c88 <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f103 020c 	add.w	r2, r3, #12
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	330c      	adds	r3, #12
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4610      	mov	r0, r2
 8009c62:	f7fb f956 	bl	8004f12 <mbedtls_mpi_copy>
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10e      	bne.n	8009c8c <mbedtls_ecp_copy+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f103 0218 	add.w	r2, r3, #24
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	3318      	adds	r3, #24
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	f7fb f949 	bl	8004f12 <mbedtls_mpi_copy>
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0

cleanup:
 8009c86:	e002      	b.n	8009c8e <mbedtls_ecp_copy+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8009c88:	bf00      	nop
 8009c8a:	e000      	b.n	8009c8e <mbedtls_ecp_copy+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8009c8c:	bf00      	nop
    return( ret );
 8009c8e:	68fb      	ldr	r3, [r7, #12]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <mbedtls_ecp_group_copy>:

/*
 * Copy the contents of a group object
 */
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( dst != NULL );
    ECP_VALIDATE_RET( src != NULL );

    return( mbedtls_ecp_group_load( dst, src->id ) );
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f003 fa51 	bl	800d150 <mbedtls_ecp_group_load>
 8009cae:	4603      	mov	r3, r0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fb fa87 	bl	80051d8 <mbedtls_mpi_lset>
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d113      	bne.n	8009cfa <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	330c      	adds	r3, #12
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fb fa7d 	bl	80051d8 <mbedtls_mpi_lset>
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10b      	bne.n	8009cfe <mbedtls_ecp_set_zero+0x46>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3318      	adds	r3, #24
 8009cea:	2100      	movs	r1, #0
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fb fa73 	bl	80051d8 <mbedtls_mpi_lset>
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0

cleanup:
 8009cf8:	e002      	b.n	8009d00 <mbedtls_ecp_set_zero+0x48>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 8009cfa:	bf00      	nop
 8009cfc:	e000      	b.n	8009d00 <mbedtls_ecp_set_zero+0x48>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 8009cfe:	bf00      	nop
    return( ret );
 8009d00:	68fb      	ldr	r3, [r7, #12]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3318      	adds	r3, #24
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fc f815 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bf0c      	ite	eq
 8009d24:	2301      	moveq	r3, #1
 8009d26:	2300      	movne	r3, #0
 8009d28:	b2db      	uxtb	r3, r3
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <mbedtls_ecp_point_read_binary>:
 * Import a point from unsigned binary data (SEC1 2.3.4)
 */
int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *pt,
                                   const unsigned char *buf, size_t ilen )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
    size_t plen;
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );
    ECP_VALIDATE_RET( buf != NULL );

    if( ilen < 1 )
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <mbedtls_ecp_point_read_binary+0x18>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8009d48:	4b27      	ldr	r3, [pc, #156]	; (8009de8 <mbedtls_ecp_point_read_binary+0xb4>)
 8009d4a:	e049      	b.n	8009de0 <mbedtls_ecp_point_read_binary+0xac>

    if( buf[0] == 0x00 )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d109      	bne.n	8009d68 <mbedtls_ecp_point_read_binary+0x34>
    {
        if( ilen == 1 )
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d104      	bne.n	8009d64 <mbedtls_ecp_point_read_binary+0x30>
            return( mbedtls_ecp_set_zero( pt ) );
 8009d5a:	68b8      	ldr	r0, [r7, #8]
 8009d5c:	f7ff ffac 	bl	8009cb8 <mbedtls_ecp_set_zero>
 8009d60:	4603      	mov	r3, r0
 8009d62:	e03d      	b.n	8009de0 <mbedtls_ecp_point_read_binary+0xac>
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8009d64:	4b20      	ldr	r3, [pc, #128]	; (8009de8 <mbedtls_ecp_point_read_binary+0xb4>)
 8009d66:	e03b      	b.n	8009de0 <mbedtls_ecp_point_read_binary+0xac>
    }

    plen = mbedtls_mpi_size( &grp->P );
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fb fb61 	bl	8005434 <mbedtls_mpi_size>
 8009d72:	6138      	str	r0, [r7, #16]

    if( buf[0] != 0x04 )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d001      	beq.n	8009d80 <mbedtls_ecp_point_read_binary+0x4c>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8009d7c:	4b1b      	ldr	r3, [pc, #108]	; (8009dec <mbedtls_ecp_point_read_binary+0xb8>)
 8009d7e:	e02f      	b.n	8009de0 <mbedtls_ecp_point_read_binary+0xac>

    if( ilen != 2 * plen + 1 )
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	3301      	adds	r3, #1
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d001      	beq.n	8009d90 <mbedtls_ecp_point_read_binary+0x5c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8009d8c:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <mbedtls_ecp_point_read_binary+0xb4>)
 8009d8e:	e027      	b.n	8009de0 <mbedtls_ecp_point_read_binary+0xac>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 8009d90:	68b8      	ldr	r0, [r7, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3301      	adds	r3, #1
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	f7fb fcc3 	bl	8005724 <mbedtls_mpi_read_binary>
 8009d9e:	6178      	str	r0, [r7, #20]
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d118      	bne.n	8009dd8 <mbedtls_ecp_point_read_binary+0xa4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f103 000c 	add.w	r0, r3, #12
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3301      	adds	r3, #1
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	4413      	add	r3, r2
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4619      	mov	r1, r3
 8009db8:	f7fb fcb4 	bl	8005724 <mbedtls_mpi_read_binary>
 8009dbc:	6178      	str	r0, [r7, #20]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <mbedtls_ecp_point_read_binary+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	3318      	adds	r3, #24
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fb fa04 	bl	80051d8 <mbedtls_mpi_lset>
 8009dd0:	6178      	str	r0, [r7, #20]
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	2b00      	cmp	r3, #0

cleanup:
 8009dd6:	e002      	b.n	8009dde <mbedtls_ecp_point_read_binary+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 8009dd8:	bf00      	nop
 8009dda:	e000      	b.n	8009dde <mbedtls_ecp_point_read_binary+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 8009ddc:	bf00      	nop
    return( ret );
 8009dde:	697b      	ldr	r3, [r7, #20]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	ffffb080 	.word	0xffffb080
 8009dec:	ffffb180 	.word	0xffffb180

08009df0 <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
    int ret;

    if( grp->modp == NULL )
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d108      	bne.n	8009e14 <ecp_modp+0x24>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	3304      	adds	r3, #4
 8009e06:	461a      	mov	r2, r3
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fe fa1f 	bl	800824e <mbedtls_mpi_mod_mpi>
 8009e10:	4603      	mov	r3, r0
 8009e12:	e050      	b.n	8009eb6 <ecp_modp+0xc6>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	da06      	bge.n	8009e2a <ecp_modp+0x3a>
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fb ff92 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d108      	bne.n	8009e3c <ecp_modp+0x4c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7fb face 	bl	80053cc <mbedtls_mpi_bitlen>
 8009e30:	4602      	mov	r2, r0
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	005b      	lsls	r3, r3, #1
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d901      	bls.n	8009e40 <ecp_modp+0x50>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8009e3c:	4b20      	ldr	r3, [pc, #128]	; (8009ec0 <ecp_modp+0xd0>)
 8009e3e:	e03a      	b.n	8009eb6 <ecp_modp+0xc6>
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	4798      	blx	r3
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d12c      	bne.n	8009eaa <ecp_modp+0xba>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 8009e50:	e00a      	b.n	8009e68 <ecp_modp+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	3304      	adds	r3, #4
 8009e56:	461a      	mov	r2, r3
 8009e58:	6879      	ldr	r1, [r7, #4]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fc f907 	bl	800606e <mbedtls_mpi_add_mpi>
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d122      	bne.n	8009eae <ecp_modp+0xbe>
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	da12      	bge.n	8009e96 <ecp_modp+0xa6>
 8009e70:	2100      	movs	r1, #0
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7fb ff68 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e9      	bne.n	8009e52 <ecp_modp+0x62>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 8009e7e:	e00a      	b.n	8009e96 <ecp_modp+0xa6>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	3304      	adds	r3, #4
 8009e84:	461a      	mov	r2, r3
 8009e86:	6879      	ldr	r1, [r7, #4]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7fc f88c 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10d      	bne.n	8009eb2 <ecp_modp+0xc2>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fb feb8 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	daeb      	bge.n	8009e80 <ecp_modp+0x90>

cleanup:
 8009ea8:	e004      	b.n	8009eb4 <ecp_modp+0xc4>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 8009eaa:	bf00      	nop
 8009eac:	e002      	b.n	8009eb4 <ecp_modp+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 8009eae:	bf00      	nop
 8009eb0:	e000      	b.n	8009eb4 <ecp_modp+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8009eb2:	bf00      	nop
    return( ret );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	ffffb080 	.word	0xffffb080

08009ec4 <ecp_normalize_jac>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	3318      	adds	r3, #24
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fb ff37 	bl	8005d48 <mbedtls_mpi_cmp_int>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <ecp_normalize_jac+0x20>
        return( 0 );
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e098      	b.n	800a016 <ecp_normalize_jac+0x152>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8009ee4:	f107 0318 	add.w	r3, r7, #24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fa ff30 	bl	8004d4e <mbedtls_mpi_init>
 8009eee:	f107 030c 	add.w	r3, r7, #12
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fa ff2b 	bl	8004d4e <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f103 0118 	add.w	r1, r3, #24
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	1d1a      	adds	r2, r3, #4
 8009f02:	f107 0318 	add.w	r3, r7, #24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fb2a 	bl	8008560 <mbedtls_mpi_inv_mod>
 8009f0c:	6278      	str	r0, [r7, #36]	; 0x24
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d164      	bne.n	8009fde <ecp_normalize_jac+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8009f14:	f107 0218 	add.w	r2, r7, #24
 8009f18:	f107 0118 	add.w	r1, r7, #24
 8009f1c:	f107 030c 	add.w	r3, r7, #12
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd fd28 	bl	8007976 <mbedtls_mpi_mul_mpi>
 8009f26:	6278      	str	r0, [r7, #36]	; 0x24
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d159      	bne.n	8009fe2 <ecp_normalize_jac+0x11e>
 8009f2e:	f107 030c 	add.w	r3, r7, #12
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff ff5b 	bl	8009df0 <ecp_modp>
 8009f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d151      	bne.n	8009fe6 <ecp_normalize_jac+0x122>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	f107 020c 	add.w	r2, r7, #12
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fd fd13 	bl	8007976 <mbedtls_mpi_mul_mpi>
 8009f50:	6278      	str	r0, [r7, #36]	; 0x24
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d148      	bne.n	8009fea <ecp_normalize_jac+0x126>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff ff47 	bl	8009df0 <ecp_modp>
 8009f62:	6278      	str	r0, [r7, #36]	; 0x24
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d141      	bne.n	8009fee <ecp_normalize_jac+0x12a>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	f103 000c 	add.w	r0, r3, #12
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	330c      	adds	r3, #12
 8009f74:	f107 020c 	add.w	r2, r7, #12
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f7fd fcfc 	bl	8007976 <mbedtls_mpi_mul_mpi>
 8009f7e:	6278      	str	r0, [r7, #36]	; 0x24
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d135      	bne.n	8009ff2 <ecp_normalize_jac+0x12e>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	330c      	adds	r3, #12
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff ff2f 	bl	8009df0 <ecp_modp>
 8009f92:	6278      	str	r0, [r7, #36]	; 0x24
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d12d      	bne.n	8009ff6 <ecp_normalize_jac+0x132>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	f103 000c 	add.w	r0, r3, #12
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	f107 0218 	add.w	r2, r7, #24
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f7fd fce4 	bl	8007976 <mbedtls_mpi_mul_mpi>
 8009fae:	6278      	str	r0, [r7, #36]	; 0x24
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d121      	bne.n	8009ffa <ecp_normalize_jac+0x136>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	330c      	adds	r3, #12
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff ff17 	bl	8009df0 <ecp_modp>
 8009fc2:	6278      	str	r0, [r7, #36]	; 0x24
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d119      	bne.n	8009ffe <ecp_normalize_jac+0x13a>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	3318      	adds	r3, #24
 8009fce:	2101      	movs	r1, #1
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fb f901 	bl	80051d8 <mbedtls_mpi_lset>
 8009fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	2b00      	cmp	r3, #0

cleanup:
 8009fdc:	e010      	b.n	800a000 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8009fde:	bf00      	nop
 8009fe0:	e00e      	b.n	800a000 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8009fe2:	bf00      	nop
 8009fe4:	e00c      	b.n	800a000 <ecp_normalize_jac+0x13c>
 8009fe6:	bf00      	nop
 8009fe8:	e00a      	b.n	800a000 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8009fea:	bf00      	nop
 8009fec:	e008      	b.n	800a000 <ecp_normalize_jac+0x13c>
 8009fee:	bf00      	nop
 8009ff0:	e006      	b.n	800a000 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8009ff2:	bf00      	nop
 8009ff4:	e004      	b.n	800a000 <ecp_normalize_jac+0x13c>
 8009ff6:	bf00      	nop
 8009ff8:	e002      	b.n	800a000 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8009ffa:	bf00      	nop
 8009ffc:	e000      	b.n	800a000 <ecp_normalize_jac+0x13c>
 8009ffe:	bf00      	nop

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800a000:	f107 0318 	add.w	r3, r7, #24
 800a004:	4618      	mov	r0, r3
 800a006:	f7fa feb5 	bl	8004d74 <mbedtls_mpi_free>
 800a00a:	f107 030c 	add.w	r3, r7, #12
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fa feb0 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a016:	4618      	mov	r0, r3
 800a018:	3728      	adds	r7, #40	; 0x28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <ecp_normalize_jac_many>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b090      	sub	sp, #64	; 0x40
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d807      	bhi.n	800a042 <ecp_normalize_jac_many+0x22>
        return( ecp_normalize_jac( grp, *T ) );
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4619      	mov	r1, r3
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff ff43 	bl	8009ec4 <ecp_normalize_jac>
 800a03e:	4603      	mov	r3, r0
 800a040:	e1dc      	b.n	800a3fc <ecp_normalize_jac_many+0x3dc>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800a042:	210c      	movs	r1, #12
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f00a fa5b 	bl	8014500 <calloc>
 800a04a:	4603      	mov	r3, r0
 800a04c:	637b      	str	r3, [r7, #52]	; 0x34
 800a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <ecp_normalize_jac_many+0x38>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 800a054:	4b48      	ldr	r3, [pc, #288]	; (800a178 <ecp_normalize_jac_many+0x158>)
 800a056:	e1d1      	b.n	800a3fc <ecp_normalize_jac_many+0x3dc>

    for( i = 0; i < T_size; i++ )
 800a058:	2300      	movs	r3, #0
 800a05a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a05c:	e00d      	b.n	800a07a <ecp_normalize_jac_many+0x5a>
        mbedtls_mpi_init( &c[i] );
 800a05e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a060:	4613      	mov	r3, r2
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	461a      	mov	r2, r3
 800a06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06c:	4413      	add	r3, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fa fe6d 	bl	8004d4e <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	3301      	adds	r3, #1
 800a078:	63bb      	str	r3, [r7, #56]	; 0x38
 800a07a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d3ed      	bcc.n	800a05e <ecp_normalize_jac_many+0x3e>

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800a082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a086:	4618      	mov	r0, r3
 800a088:	f7fa fe61 	bl	8004d4e <mbedtls_mpi_init>
 800a08c:	f107 031c 	add.w	r3, r7, #28
 800a090:	4618      	mov	r0, r3
 800a092:	f7fa fe5c 	bl	8004d4e <mbedtls_mpi_init>
 800a096:	f107 0310 	add.w	r3, r7, #16
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fa fe57 	bl	8004d4e <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3318      	adds	r3, #24
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a0aa:	f7fa ff32 	bl	8004f12 <mbedtls_mpi_copy>
 800a0ae:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f040 8155 	bne.w	800a362 <ecp_normalize_jac_many+0x342>
    for( i = 1; i < T_size; i++ )
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0bc:	e031      	b.n	800a122 <ecp_normalize_jac_many+0x102>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 800a0be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0cc:	1898      	adds	r0, r3, r2
 800a0ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	3b0c      	subs	r3, #12
 800a0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0dc:	18d1      	adds	r1, r2, r3
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3318      	adds	r3, #24
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f7fd fc43 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a0f0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f040 8136 	bne.w	800a366 <ecp_normalize_jac_many+0x346>
        MOD_MUL( c[i] );
 800a0fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	4413      	add	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	461a      	mov	r2, r3
 800a106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a108:	4413      	add	r3, r2
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fe6f 	bl	8009df0 <ecp_modp>
 800a112:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a116:	2b00      	cmp	r3, #0
 800a118:	f040 8127 	bne.w	800a36a <ecp_normalize_jac_many+0x34a>
    for( i = 1; i < T_size; i++ )
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	3301      	adds	r3, #1
 800a120:	63bb      	str	r3, [r7, #56]	; 0x38
 800a122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d3c9      	bcc.n	800a0be <ecp_normalize_jac_many+0x9e>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	3b0c      	subs	r3, #12
 800a136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a138:	18d1      	adds	r1, r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe fa0c 	bl	8008560 <mbedtls_mpi_inv_mod>
 800a148:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f040 810e 	bne.w	800a36e <ecp_normalize_jac_many+0x34e>

    for( i = T_size - 1; ; i-- )
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3b01      	subs	r3, #1
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10e      	bne.n	800a17c <ecp_normalize_jac_many+0x15c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 800a15e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a162:	f107 031c 	add.w	r3, r7, #28
 800a166:	4611      	mov	r1, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fa fed2 	bl	8004f12 <mbedtls_mpi_copy>
 800a16e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d03f      	beq.n	800a1f6 <ecp_normalize_jac_many+0x1d6>
 800a176:	e119      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
 800a178:	ffffb280 	.word	0xffffb280
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 800a17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a17e:	4613      	mov	r3, r2
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	4413      	add	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	3b0c      	subs	r3, #12
 800a188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a18a:	441a      	add	r2, r3
 800a18c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a190:	f107 031c 	add.w	r3, r7, #28
 800a194:	4618      	mov	r0, r3
 800a196:	f7fd fbee 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a19a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f040 80e7 	bne.w	800a372 <ecp_normalize_jac_many+0x352>
 800a1a4:	f107 031c 	add.w	r3, r7, #28
 800a1a8:	68f9      	ldr	r1, [r7, #12]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff fe20 	bl	8009df0 <ecp_modp>
 800a1b0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f040 80de 	bne.w	800a376 <ecp_normalize_jac_many+0x356>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f103 0218 	add.w	r2, r3, #24
 800a1c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a1cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fd fbd0 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a1d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 80cd 	bne.w	800a37a <ecp_normalize_jac_many+0x35a>
 800a1e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1e4:	68f9      	ldr	r1, [r7, #12]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff fe02 	bl	8009df0 <ecp_modp>
 800a1ec:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f040 80c4 	bne.w	800a37e <ecp_normalize_jac_many+0x35e>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800a1f6:	f107 021c 	add.w	r2, r7, #28
 800a1fa:	f107 011c 	add.w	r1, r7, #28
 800a1fe:	f107 0310 	add.w	r3, r7, #16
 800a202:	4618      	mov	r0, r3
 800a204:	f7fd fbb7 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a208:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f040 80b8 	bne.w	800a382 <ecp_normalize_jac_many+0x362>
 800a212:	f107 0310 	add.w	r3, r7, #16
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	4618      	mov	r0, r3
 800a21a:	f7ff fde9 	bl	8009df0 <ecp_modp>
 800a21e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a222:	2b00      	cmp	r3, #0
 800a224:	f040 80af 	bne.w	800a386 <ecp_normalize_jac_many+0x366>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4413      	add	r3, r2
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4618      	mov	r0, r3
 800a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	4413      	add	r3, r2
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4619      	mov	r1, r3
 800a240:	f107 0310 	add.w	r3, r7, #16
 800a244:	461a      	mov	r2, r3
 800a246:	f7fd fb96 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a24a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f040 809b 	bne.w	800a38a <ecp_normalize_jac_many+0x36a>
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	4413      	add	r3, r2
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fdc5 	bl	8009df0 <ecp_modp>
 800a266:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f040 808f 	bne.w	800a38e <ecp_normalize_jac_many+0x36e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	4413      	add	r3, r2
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f103 000c 	add.w	r0, r3, #12
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	4413      	add	r3, r2
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	330c      	adds	r3, #12
 800a28a:	f107 0210 	add.w	r2, r7, #16
 800a28e:	4619      	mov	r1, r3
 800a290:	f7fd fb71 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a294:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d17a      	bne.n	800a392 <ecp_normalize_jac_many+0x372>
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	330c      	adds	r3, #12
 800a2a8:	68f9      	ldr	r1, [r7, #12]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff fda0 	bl	8009df0 <ecp_modp>
 800a2b0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d16e      	bne.n	800a396 <ecp_normalize_jac_many+0x376>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	4413      	add	r3, r2
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f103 000c 	add.w	r0, r3, #12
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	330c      	adds	r3, #12
 800a2d2:	f107 021c 	add.w	r2, r7, #28
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	f7fd fb4d 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a2dc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d15a      	bne.n	800a39a <ecp_normalize_jac_many+0x37a>
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	330c      	adds	r3, #12
 800a2f0:	68f9      	ldr	r1, [r7, #12]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff fd7c 	bl	8009df0 <ecp_modp>
 800a2f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d14e      	bne.n	800a39e <ecp_normalize_jac_many+0x37e>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	4413      	add	r3, r2
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	4619      	mov	r1, r3
 800a312:	4610      	mov	r0, r2
 800a314:	f7fa fd97 	bl	8004e46 <mbedtls_mpi_shrink>
 800a318:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d140      	bne.n	800a3a2 <ecp_normalize_jac_many+0x382>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	4413      	add	r3, r2
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f103 020c 	add.w	r2, r3, #12
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fa fd86 	bl	8004e46 <mbedtls_mpi_shrink>
 800a33a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d131      	bne.n	800a3a6 <ecp_normalize_jac_many+0x386>
        mbedtls_mpi_free( &T[i]->Z );
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	4413      	add	r3, r2
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3318      	adds	r3, #24
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fa fd10 	bl	8004d74 <mbedtls_mpi_free>

        if( i == 0 )
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	2b00      	cmp	r3, #0
 800a358:	d027      	beq.n	800a3aa <ecp_normalize_jac_many+0x38a>
    for( i = T_size - 1; ; i-- )
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	3b01      	subs	r3, #1
 800a35e:	63bb      	str	r3, [r7, #56]	; 0x38
        if( i == 0 ) {
 800a360:	e6fa      	b.n	800a158 <ecp_normalize_jac_many+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800a362:	bf00      	nop
 800a364:	e022      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 800a366:	bf00      	nop
 800a368:	e020      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MOD_MUL( c[i] );
 800a36a:	bf00      	nop
 800a36c:	e01e      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800a36e:	bf00      	nop
 800a370:	e01c      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 800a372:	bf00      	nop
 800a374:	e01a      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
 800a376:	bf00      	nop
 800a378:	e018      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 800a37a:	bf00      	nop
 800a37c:	e016      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
 800a37e:	bf00      	nop
 800a380:	e014      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800a382:	bf00      	nop
 800a384:	e012      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
 800a386:	bf00      	nop
 800a388:	e010      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 800a38a:	bf00      	nop
 800a38c:	e00e      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
 800a38e:	bf00      	nop
 800a390:	e00c      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 800a392:	bf00      	nop
 800a394:	e00a      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
 800a396:	bf00      	nop
 800a398:	e008      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 800a39a:	bf00      	nop
 800a39c:	e006      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
 800a39e:	bf00      	nop
 800a3a0:	e004      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800a3a2:	bf00      	nop
 800a3a4:	e002      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800a3a6:	bf00      	nop
 800a3a8:	e000      	b.n	800a3ac <ecp_normalize_jac_many+0x38c>
            break;
 800a3aa:	bf00      	nop
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800a3ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fa fcdf 	bl	8004d74 <mbedtls_mpi_free>
 800a3b6:	f107 031c 	add.w	r3, r7, #28
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fa fcda 	bl	8004d74 <mbedtls_mpi_free>
 800a3c0:	f107 0310 	add.w	r3, r7, #16
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fa fcd5 	bl	8004d74 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3ce:	e00d      	b.n	800a3ec <ecp_normalize_jac_many+0x3cc>
        mbedtls_mpi_free( &c[i] );
 800a3d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3de:	4413      	add	r3, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fa fcc7 	bl	8004d74 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d3ed      	bcc.n	800a3d0 <ecp_normalize_jac_many+0x3b0>
    mbedtls_free( c );
 800a3f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a3f6:	f00a f8bd 	bl	8014574 <free>

    return( ret );
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3740      	adds	r7, #64	; 0x40
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	; 0x28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	4613      	mov	r3, r2
 800a410:	71fb      	strb	r3, [r7, #7]
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 800a412:	f107 0314 	add.w	r3, r7, #20
 800a416:	4618      	mov	r0, r3
 800a418:	f7fa fc99 	bl	8004d4e <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	1d19      	adds	r1, r3, #4
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f103 020c 	add.w	r2, r3, #12
 800a426:	f107 0314 	add.w	r3, r7, #20
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fb fe69 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800a430:	6278      	str	r0, [r7, #36]	; 0x24
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	2b00      	cmp	r3, #0
 800a436:	d11e      	bne.n	800a476 <ecp_safe_invert_jac+0x72>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	330c      	adds	r3, #12
 800a43c:	2100      	movs	r1, #0
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fb fc82 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	bf14      	ite	ne
 800a44a:	2301      	movne	r3, #1
 800a44c:	2300      	moveq	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f103 000c 	add.w	r0, r3, #12
 800a45a:	79fa      	ldrb	r2, [r7, #7]
 800a45c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a460:	4013      	ands	r3, r2
 800a462:	b2da      	uxtb	r2, r3
 800a464:	f107 0314 	add.w	r3, r7, #20
 800a468:	4619      	mov	r1, r3
 800a46a:	f7fa fdae 	bl	8004fca <mbedtls_mpi_safe_cond_assign>
 800a46e:	6278      	str	r0, [r7, #36]	; 0x24
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	2b00      	cmp	r3, #0

cleanup:
 800a474:	e000      	b.n	800a478 <ecp_safe_invert_jac+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800a476:	bf00      	nop
    mbedtls_mpi_free( &mQY );
 800a478:	f107 0314 	add.w	r3, r7, #20
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fa fc79 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a484:	4618      	mov	r0, r3
 800a486:	3728      	adds	r7, #40	; 0x28
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b092      	sub	sp, #72	; 0x48
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800a498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fa fc56 	bl	8004d4e <mbedtls_mpi_init>
 800a4a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fa fc51 	bl	8004d4e <mbedtls_mpi_init>
 800a4ac:	f107 0320 	add.w	r3, r7, #32
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fa fc4c 	bl	8004d4e <mbedtls_mpi_init>
 800a4b6:	f107 0314 	add.w	r3, r7, #20
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fa fc47 	bl	8004d4e <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 80ab 	bne.w	800a620 <ecp_double_jac+0x194>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f103 0118 	add.w	r1, r3, #24
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f103 0218 	add.w	r2, r3, #24
 800a4d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fd fa4b 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a4e0:	6478      	str	r0, [r7, #68]	; 0x44
 800a4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f040 834c 	bne.w	800ab82 <ecp_double_jac+0x6f6>
 800a4ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4ee:	68f9      	ldr	r1, [r7, #12]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fc7d 	bl	8009df0 <ecp_modp>
 800a4f6:	6478      	str	r0, [r7, #68]	; 0x44
 800a4f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f040 8343 	bne.w	800ab86 <ecp_double_jac+0x6fa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a506:	f107 0320 	add.w	r3, r7, #32
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fb fdaf 	bl	800606e <mbedtls_mpi_add_mpi>
 800a510:	6478      	str	r0, [r7, #68]	; 0x44
 800a512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 8338 	bne.w	800ab8a <ecp_double_jac+0x6fe>
 800a51a:	e00d      	b.n	800a538 <ecp_double_jac+0xac>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	1d1a      	adds	r2, r3, #4
 800a520:	f107 0120 	add.w	r1, r7, #32
 800a524:	f107 0320 	add.w	r3, r7, #32
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fb fd3c 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800a52e:	6478      	str	r0, [r7, #68]	; 0x44
 800a530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a532:	2b00      	cmp	r3, #0
 800a534:	f040 832b 	bne.w	800ab8e <ecp_double_jac+0x702>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	1d1a      	adds	r2, r3, #4
 800a53c:	f107 0320 	add.w	r3, r7, #32
 800a540:	4611      	mov	r1, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f7fb fb65 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dae6      	bge.n	800a51c <ecp_double_jac+0x90>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a554:	f107 0314 	add.w	r3, r7, #20
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fb fdd2 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800a55e:	6478      	str	r0, [r7, #68]	; 0x44
 800a560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a562:	2b00      	cmp	r3, #0
 800a564:	f040 8315 	bne.w	800ab92 <ecp_double_jac+0x706>
 800a568:	e00d      	b.n	800a586 <ecp_double_jac+0xfa>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	1d1a      	adds	r2, r3, #4
 800a56e:	f107 0114 	add.w	r1, r7, #20
 800a572:	f107 0314 	add.w	r3, r7, #20
 800a576:	4618      	mov	r0, r3
 800a578:	f7fb fd79 	bl	800606e <mbedtls_mpi_add_mpi>
 800a57c:	6478      	str	r0, [r7, #68]	; 0x44
 800a57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 8308 	bne.w	800ab96 <ecp_double_jac+0x70a>
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	da08      	bge.n	800a59e <ecp_double_jac+0x112>
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f7fb fbd8 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1e5      	bne.n	800a56a <ecp_double_jac+0xde>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800a59e:	f107 0214 	add.w	r2, r7, #20
 800a5a2:	f107 0120 	add.w	r1, r7, #32
 800a5a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fd f9e3 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a5b0:	6478      	str	r0, [r7, #68]	; 0x44
 800a5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 82f0 	bne.w	800ab9a <ecp_double_jac+0x70e>
 800a5ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5be:	68f9      	ldr	r1, [r7, #12]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fc15 	bl	8009df0 <ecp_modp>
 800a5c6:	6478      	str	r0, [r7, #68]	; 0x44
 800a5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f040 82e7 	bne.w	800ab9e <ecp_double_jac+0x712>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800a5d0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a5d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a5d8:	2203      	movs	r2, #3
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fd fa7b 	bl	8007ad6 <mbedtls_mpi_mul_int>
 800a5e0:	6478      	str	r0, [r7, #68]	; 0x44
 800a5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f040 82dc 	bne.w	800aba2 <ecp_double_jac+0x716>
 800a5ea:	e00d      	b.n	800a608 <ecp_double_jac+0x17c>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	1d1a      	adds	r2, r3, #4
 800a5f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a5f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fb fcd4 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800a5fe:	6478      	str	r0, [r7, #68]	; 0x44
 800a600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a602:	2b00      	cmp	r3, #0
 800a604:	f040 82cf 	bne.w	800aba6 <ecp_double_jac+0x71a>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	1d1a      	adds	r2, r3, #4
 800a60c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7fb fafd 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dae6      	bge.n	800a5ec <ecp_double_jac+0x160>
 800a61e:	e0bc      	b.n	800a79a <ecp_double_jac+0x30e>
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fd f9a4 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a62e:	6478      	str	r0, [r7, #68]	; 0x44
 800a630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a632:	2b00      	cmp	r3, #0
 800a634:	f040 82b9 	bne.w	800abaa <ecp_double_jac+0x71e>
 800a638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a63c:	68f9      	ldr	r1, [r7, #12]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff fbd6 	bl	8009df0 <ecp_modp>
 800a644:	6478      	str	r0, [r7, #68]	; 0x44
 800a646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f040 82b0 	bne.w	800abae <ecp_double_jac+0x722>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800a64e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a652:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a656:	2203      	movs	r2, #3
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fd fa3c 	bl	8007ad6 <mbedtls_mpi_mul_int>
 800a65e:	6478      	str	r0, [r7, #68]	; 0x44
 800a660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a662:	2b00      	cmp	r3, #0
 800a664:	f040 82a5 	bne.w	800abb2 <ecp_double_jac+0x726>
 800a668:	e00d      	b.n	800a686 <ecp_double_jac+0x1fa>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a672:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a676:	4618      	mov	r0, r3
 800a678:	f7fb fc95 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800a67c:	6478      	str	r0, [r7, #68]	; 0x44
 800a67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a680:	2b00      	cmp	r3, #0
 800a682:	f040 8298 	bne.w	800abb6 <ecp_double_jac+0x72a>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	1d1a      	adds	r2, r3, #4
 800a68a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f7fb fabe 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dae6      	bge.n	800a66a <ecp_double_jac+0x1de>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3310      	adds	r3, #16
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fb fb50 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d075      	beq.n	800a79a <ecp_double_jac+0x30e>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f103 0118 	add.w	r1, r3, #24
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f103 0218 	add.w	r2, r3, #24
 800a6ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fd f959 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a6c4:	6478      	str	r0, [r7, #68]	; 0x44
 800a6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f040 8276 	bne.w	800abba <ecp_double_jac+0x72e>
 800a6ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6d2:	68f9      	ldr	r1, [r7, #12]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff fb8b 	bl	8009df0 <ecp_modp>
 800a6da:	6478      	str	r0, [r7, #68]	; 0x44
 800a6dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f040 826d 	bne.w	800abbe <ecp_double_jac+0x732>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800a6e4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a6e8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a6ec:	f107 0320 	add.w	r3, r7, #32
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fd f940 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a6f6:	6478      	str	r0, [r7, #68]	; 0x44
 800a6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f040 8261 	bne.w	800abc2 <ecp_double_jac+0x736>
 800a700:	f107 0320 	add.w	r3, r7, #32
 800a704:	68f9      	ldr	r1, [r7, #12]
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fb72 	bl	8009df0 <ecp_modp>
 800a70c:	6478      	str	r0, [r7, #68]	; 0x44
 800a70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a710:	2b00      	cmp	r3, #0
 800a712:	f040 8258 	bne.w	800abc6 <ecp_double_jac+0x73a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f103 0210 	add.w	r2, r3, #16
 800a71c:	f107 0120 	add.w	r1, r7, #32
 800a720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a724:	4618      	mov	r0, r3
 800a726:	f7fd f926 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a72a:	6478      	str	r0, [r7, #68]	; 0x44
 800a72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f040 824b 	bne.w	800abca <ecp_double_jac+0x73e>
 800a734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a738:	68f9      	ldr	r1, [r7, #12]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fb58 	bl	8009df0 <ecp_modp>
 800a740:	6478      	str	r0, [r7, #68]	; 0x44
 800a742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 8242 	bne.w	800abce <ecp_double_jac+0x742>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800a74a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a74e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a752:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a756:	4618      	mov	r0, r3
 800a758:	f7fb fc89 	bl	800606e <mbedtls_mpi_add_mpi>
 800a75c:	6478      	str	r0, [r7, #68]	; 0x44
 800a75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a760:	2b00      	cmp	r3, #0
 800a762:	f040 8236 	bne.w	800abd2 <ecp_double_jac+0x746>
 800a766:	e00d      	b.n	800a784 <ecp_double_jac+0x2f8>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a770:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a774:	4618      	mov	r0, r3
 800a776:	f7fb fc16 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800a77a:	6478      	str	r0, [r7, #68]	; 0x44
 800a77c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f040 8229 	bne.w	800abd6 <ecp_double_jac+0x74a>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fb fa3f 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	dae6      	bge.n	800a768 <ecp_double_jac+0x2dc>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f103 010c 	add.w	r1, r3, #12
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f103 020c 	add.w	r2, r3, #12
 800a7a6:	f107 0320 	add.w	r3, r7, #32
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fd f8e3 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a7b0:	6478      	str	r0, [r7, #68]	; 0x44
 800a7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f040 8210 	bne.w	800abda <ecp_double_jac+0x74e>
 800a7ba:	f107 0320 	add.w	r3, r7, #32
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff fb15 	bl	8009df0 <ecp_modp>
 800a7c6:	6478      	str	r0, [r7, #68]	; 0x44
 800a7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f040 8207 	bne.w	800abde <ecp_double_jac+0x752>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800a7d0:	f107 0320 	add.w	r3, r7, #32
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fb f859 	bl	800588e <mbedtls_mpi_shift_l>
 800a7dc:	6478      	str	r0, [r7, #68]	; 0x44
 800a7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f040 81fe 	bne.w	800abe2 <ecp_double_jac+0x756>
 800a7e6:	e00d      	b.n	800a804 <ecp_double_jac+0x378>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	1d1a      	adds	r2, r3, #4
 800a7ec:	f107 0120 	add.w	r1, r7, #32
 800a7f0:	f107 0320 	add.w	r3, r7, #32
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fb fbd6 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800a7fa:	6478      	str	r0, [r7, #68]	; 0x44
 800a7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 81f1 	bne.w	800abe6 <ecp_double_jac+0x75a>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	1d1a      	adds	r2, r3, #4
 800a808:	f107 0320 	add.w	r3, r7, #32
 800a80c:	4611      	mov	r1, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fb f9ff 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	dae6      	bge.n	800a7e8 <ecp_double_jac+0x35c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	f107 0220 	add.w	r2, r7, #32
 800a820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a824:	4618      	mov	r0, r3
 800a826:	f7fd f8a6 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a82a:	6478      	str	r0, [r7, #68]	; 0x44
 800a82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f040 81db 	bne.w	800abea <ecp_double_jac+0x75e>
 800a834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff fad8 	bl	8009df0 <ecp_modp>
 800a840:	6478      	str	r0, [r7, #68]	; 0x44
 800a842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a844:	2b00      	cmp	r3, #0
 800a846:	f040 81d2 	bne.w	800abee <ecp_double_jac+0x762>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800a84a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a84e:	2101      	movs	r1, #1
 800a850:	4618      	mov	r0, r3
 800a852:	f7fb f81c 	bl	800588e <mbedtls_mpi_shift_l>
 800a856:	6478      	str	r0, [r7, #68]	; 0x44
 800a858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f040 81c9 	bne.w	800abf2 <ecp_double_jac+0x766>
 800a860:	e00d      	b.n	800a87e <ecp_double_jac+0x3f2>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1d1a      	adds	r2, r3, #4
 800a866:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a86a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fb fb99 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800a874:	6478      	str	r0, [r7, #68]	; 0x44
 800a876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f040 81bc 	bne.w	800abf6 <ecp_double_jac+0x76a>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	1d1a      	adds	r2, r3, #4
 800a882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a886:	4611      	mov	r1, r2
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fb f9c2 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	dae6      	bge.n	800a862 <ecp_double_jac+0x3d6>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800a894:	f107 0220 	add.w	r2, r7, #32
 800a898:	f107 0120 	add.w	r1, r7, #32
 800a89c:	f107 0314 	add.w	r3, r7, #20
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fd f868 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a8a6:	6478      	str	r0, [r7, #68]	; 0x44
 800a8a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f040 81a5 	bne.w	800abfa <ecp_double_jac+0x76e>
 800a8b0:	f107 0314 	add.w	r3, r7, #20
 800a8b4:	68f9      	ldr	r1, [r7, #12]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff fa9a 	bl	8009df0 <ecp_modp>
 800a8bc:	6478      	str	r0, [r7, #68]	; 0x44
 800a8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f040 819c 	bne.w	800abfe <ecp_double_jac+0x772>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800a8c6:	f107 0314 	add.w	r3, r7, #20
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fa ffde 	bl	800588e <mbedtls_mpi_shift_l>
 800a8d2:	6478      	str	r0, [r7, #68]	; 0x44
 800a8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 8193 	bne.w	800ac02 <ecp_double_jac+0x776>
 800a8dc:	e00d      	b.n	800a8fa <ecp_double_jac+0x46e>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	1d1a      	adds	r2, r3, #4
 800a8e2:	f107 0114 	add.w	r1, r7, #20
 800a8e6:	f107 0314 	add.w	r3, r7, #20
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fb fb5b 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800a8f0:	6478      	str	r0, [r7, #68]	; 0x44
 800a8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 8186 	bne.w	800ac06 <ecp_double_jac+0x77a>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	1d1a      	adds	r2, r3, #4
 800a8fe:	f107 0314 	add.w	r3, r7, #20
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f7fb f984 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dae6      	bge.n	800a8de <ecp_double_jac+0x452>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800a910:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a914:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a918:	f107 0320 	add.w	r3, r7, #32
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fd f82a 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800a922:	6478      	str	r0, [r7, #68]	; 0x44
 800a924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a926:	2b00      	cmp	r3, #0
 800a928:	f040 816f 	bne.w	800ac0a <ecp_double_jac+0x77e>
 800a92c:	f107 0320 	add.w	r3, r7, #32
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff fa5c 	bl	8009df0 <ecp_modp>
 800a938:	6478      	str	r0, [r7, #68]	; 0x44
 800a93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f040 8166 	bne.w	800ac0e <ecp_double_jac+0x782>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800a942:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a946:	f107 0120 	add.w	r1, r7, #32
 800a94a:	f107 0320 	add.w	r3, r7, #32
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fb fbd7 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800a954:	6478      	str	r0, [r7, #68]	; 0x44
 800a956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f040 815a 	bne.w	800ac12 <ecp_double_jac+0x786>
 800a95e:	e00d      	b.n	800a97c <ecp_double_jac+0x4f0>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	1d1a      	adds	r2, r3, #4
 800a964:	f107 0120 	add.w	r1, r7, #32
 800a968:	f107 0320 	add.w	r3, r7, #32
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fb fb7e 	bl	800606e <mbedtls_mpi_add_mpi>
 800a972:	6478      	str	r0, [r7, #68]	; 0x44
 800a974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a976:	2b00      	cmp	r3, #0
 800a978:	f040 814d 	bne.w	800ac16 <ecp_double_jac+0x78a>
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	da08      	bge.n	800a994 <ecp_double_jac+0x508>
 800a982:	f107 0320 	add.w	r3, r7, #32
 800a986:	2100      	movs	r1, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fb f9dd 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e5      	bne.n	800a960 <ecp_double_jac+0x4d4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800a994:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a998:	f107 0120 	add.w	r1, r7, #32
 800a99c:	f107 0320 	add.w	r3, r7, #32
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fb fbae 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800a9a6:	6478      	str	r0, [r7, #68]	; 0x44
 800a9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f040 8135 	bne.w	800ac1a <ecp_double_jac+0x78e>
 800a9b0:	e00d      	b.n	800a9ce <ecp_double_jac+0x542>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	1d1a      	adds	r2, r3, #4
 800a9b6:	f107 0120 	add.w	r1, r7, #32
 800a9ba:	f107 0320 	add.w	r3, r7, #32
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fb fb55 	bl	800606e <mbedtls_mpi_add_mpi>
 800a9c4:	6478      	str	r0, [r7, #68]	; 0x44
 800a9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f040 8128 	bne.w	800ac1e <ecp_double_jac+0x792>
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	da08      	bge.n	800a9e6 <ecp_double_jac+0x55a>
 800a9d4:	f107 0320 	add.w	r3, r7, #32
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fb f9b4 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1e5      	bne.n	800a9b2 <ecp_double_jac+0x526>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800a9e6:	f107 0220 	add.w	r2, r7, #32
 800a9ea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a9ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fb fb85 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800a9f8:	6478      	str	r0, [r7, #68]	; 0x44
 800a9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f040 8110 	bne.w	800ac22 <ecp_double_jac+0x796>
 800aa02:	e00d      	b.n	800aa20 <ecp_double_jac+0x594>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	1d1a      	adds	r2, r3, #4
 800aa08:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800aa0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fb fb2c 	bl	800606e <mbedtls_mpi_add_mpi>
 800aa16:	6478      	str	r0, [r7, #68]	; 0x44
 800aa18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f040 8103 	bne.w	800ac26 <ecp_double_jac+0x79a>
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da08      	bge.n	800aa38 <ecp_double_jac+0x5ac>
 800aa26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fb f98b 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e5      	bne.n	800aa04 <ecp_double_jac+0x578>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800aa38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800aa3c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800aa40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fc ff96 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800aa4a:	6478      	str	r0, [r7, #68]	; 0x44
 800aa4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f040 80eb 	bne.w	800ac2a <ecp_double_jac+0x79e>
 800aa54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa58:	68f9      	ldr	r1, [r7, #12]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff f9c8 	bl	8009df0 <ecp_modp>
 800aa60:	6478      	str	r0, [r7, #68]	; 0x44
 800aa62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f040 80e2 	bne.w	800ac2e <ecp_double_jac+0x7a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800aa6a:	f107 0214 	add.w	r2, r7, #20
 800aa6e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800aa72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fb fb43 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800aa7c:	6478      	str	r0, [r7, #68]	; 0x44
 800aa7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f040 80d6 	bne.w	800ac32 <ecp_double_jac+0x7a6>
 800aa86:	e00d      	b.n	800aaa4 <ecp_double_jac+0x618>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	1d1a      	adds	r2, r3, #4
 800aa8c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800aa90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fb faea 	bl	800606e <mbedtls_mpi_add_mpi>
 800aa9a:	6478      	str	r0, [r7, #68]	; 0x44
 800aa9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f040 80c9 	bne.w	800ac36 <ecp_double_jac+0x7aa>
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da08      	bge.n	800aabc <ecp_double_jac+0x630>
 800aaaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaae:	2100      	movs	r1, #0
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fb f949 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e5      	bne.n	800aa88 <ecp_double_jac+0x5fc>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f103 010c 	add.w	r1, r3, #12
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f103 0218 	add.w	r2, r3, #24
 800aac8:	f107 0314 	add.w	r3, r7, #20
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fc ff52 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800aad2:	6478      	str	r0, [r7, #68]	; 0x44
 800aad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f040 80af 	bne.w	800ac3a <ecp_double_jac+0x7ae>
 800aadc:	f107 0314 	add.w	r3, r7, #20
 800aae0:	68f9      	ldr	r1, [r7, #12]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff f984 	bl	8009df0 <ecp_modp>
 800aae8:	6478      	str	r0, [r7, #68]	; 0x44
 800aaea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f040 80a6 	bne.w	800ac3e <ecp_double_jac+0x7b2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800aaf2:	f107 0314 	add.w	r3, r7, #20
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fa fec8 	bl	800588e <mbedtls_mpi_shift_l>
 800aafe:	6478      	str	r0, [r7, #68]	; 0x44
 800ab00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f040 809d 	bne.w	800ac42 <ecp_double_jac+0x7b6>
 800ab08:	e00d      	b.n	800ab26 <ecp_double_jac+0x69a>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	1d1a      	adds	r2, r3, #4
 800ab0e:	f107 0114 	add.w	r1, r7, #20
 800ab12:	f107 0314 	add.w	r3, r7, #20
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fb fa45 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800ab1c:	6478      	str	r0, [r7, #68]	; 0x44
 800ab1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f040 8090 	bne.w	800ac46 <ecp_double_jac+0x7ba>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fb f86e 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	dae6      	bge.n	800ab0a <ecp_double_jac+0x67e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f107 0220 	add.w	r2, r7, #32
 800ab42:	4611      	mov	r1, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fa f9e4 	bl	8004f12 <mbedtls_mpi_copy>
 800ab4a:	6478      	str	r0, [r7, #68]	; 0x44
 800ab4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d17b      	bne.n	800ac4a <ecp_double_jac+0x7be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	330c      	adds	r3, #12
 800ab56:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fa f9d8 	bl	8004f12 <mbedtls_mpi_copy>
 800ab62:	6478      	str	r0, [r7, #68]	; 0x44
 800ab64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d171      	bne.n	800ac4e <ecp_double_jac+0x7c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	3318      	adds	r3, #24
 800ab6e:	f107 0214 	add.w	r2, r7, #20
 800ab72:	4611      	mov	r1, r2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fa f9cc 	bl	8004f12 <mbedtls_mpi_copy>
 800ab7a:	6478      	str	r0, [r7, #68]	; 0x44
 800ab7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab7e:	2b00      	cmp	r3, #0

cleanup:
 800ab80:	e066      	b.n	800ac50 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800ab82:	bf00      	nop
 800ab84:	e064      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ab86:	bf00      	nop
 800ab88:	e062      	b.n	800ac50 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800ab8a:	bf00      	nop
 800ab8c:	e060      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ab8e:	bf00      	nop
 800ab90:	e05e      	b.n	800ac50 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800ab92:	bf00      	nop
 800ab94:	e05c      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ab96:	bf00      	nop
 800ab98:	e05a      	b.n	800ac50 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800ab9a:	bf00      	nop
 800ab9c:	e058      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ab9e:	bf00      	nop
 800aba0:	e056      	b.n	800ac50 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800aba2:	bf00      	nop
 800aba4:	e054      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800aba6:	bf00      	nop
 800aba8:	e052      	b.n	800ac50 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800abaa:	bf00      	nop
 800abac:	e050      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abae:	bf00      	nop
 800abb0:	e04e      	b.n	800ac50 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800abb2:	bf00      	nop
 800abb4:	e04c      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abb6:	bf00      	nop
 800abb8:	e04a      	b.n	800ac50 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800abba:	bf00      	nop
 800abbc:	e048      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abbe:	bf00      	nop
 800abc0:	e046      	b.n	800ac50 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800abc2:	bf00      	nop
 800abc4:	e044      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abc6:	bf00      	nop
 800abc8:	e042      	b.n	800ac50 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800abca:	bf00      	nop
 800abcc:	e040      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abce:	bf00      	nop
 800abd0:	e03e      	b.n	800ac50 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800abd2:	bf00      	nop
 800abd4:	e03c      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abd6:	bf00      	nop
 800abd8:	e03a      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800abda:	bf00      	nop
 800abdc:	e038      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abde:	bf00      	nop
 800abe0:	e036      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800abe2:	bf00      	nop
 800abe4:	e034      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abe6:	bf00      	nop
 800abe8:	e032      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800abea:	bf00      	nop
 800abec:	e030      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abee:	bf00      	nop
 800abf0:	e02e      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800abf2:	bf00      	nop
 800abf4:	e02c      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abf6:	bf00      	nop
 800abf8:	e02a      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800abfa:	bf00      	nop
 800abfc:	e028      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800abfe:	bf00      	nop
 800ac00:	e026      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ac02:	bf00      	nop
 800ac04:	e024      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac06:	bf00      	nop
 800ac08:	e022      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800ac0a:	bf00      	nop
 800ac0c:	e020      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac0e:	bf00      	nop
 800ac10:	e01e      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800ac12:	bf00      	nop
 800ac14:	e01c      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac16:	bf00      	nop
 800ac18:	e01a      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800ac1a:	bf00      	nop
 800ac1c:	e018      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac1e:	bf00      	nop
 800ac20:	e016      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800ac22:	bf00      	nop
 800ac24:	e014      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac26:	bf00      	nop
 800ac28:	e012      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800ac2a:	bf00      	nop
 800ac2c:	e010      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac2e:	bf00      	nop
 800ac30:	e00e      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800ac32:	bf00      	nop
 800ac34:	e00c      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac36:	bf00      	nop
 800ac38:	e00a      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800ac3a:	bf00      	nop
 800ac3c:	e008      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac3e:	bf00      	nop
 800ac40:	e006      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ac42:	bf00      	nop
 800ac44:	e004      	b.n	800ac50 <ecp_double_jac+0x7c4>
 800ac46:	bf00      	nop
 800ac48:	e002      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800ac4a:	bf00      	nop
 800ac4c:	e000      	b.n	800ac50 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800ac4e:	bf00      	nop
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800ac50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fa f88d 	bl	8004d74 <mbedtls_mpi_free>
 800ac5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fa f888 	bl	8004d74 <mbedtls_mpi_free>
 800ac64:	f107 0320 	add.w	r3, r7, #32
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fa f883 	bl	8004d74 <mbedtls_mpi_free>
 800ac6e:	f107 0314 	add.w	r3, r7, #20
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fa f87e 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800ac78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3748      	adds	r7, #72	; 0x48
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <ecp_add_mixed>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b09a      	sub	sp, #104	; 0x68
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3318      	adds	r3, #24
 800ac96:	2100      	movs	r1, #0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fb f855 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d105      	bne.n	800acb0 <ecp_add_mixed+0x2c>
        return( mbedtls_ecp_copy( R, Q ) );
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	68b8      	ldr	r0, [r7, #8]
 800aca8:	f7fe ffc5 	bl	8009c36 <mbedtls_ecp_copy>
 800acac:	4603      	mov	r3, r0
 800acae:	e329      	b.n	800b304 <ecp_add_mixed+0x680>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00e      	beq.n	800acd6 <ecp_add_mixed+0x52>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	3318      	adds	r3, #24
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fb f842 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d105      	bne.n	800acd6 <ecp_add_mixed+0x52>
        return( mbedtls_ecp_copy( R, P ) );
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	68b8      	ldr	r0, [r7, #8]
 800acce:	f7fe ffb2 	bl	8009c36 <mbedtls_ecp_copy>
 800acd2:	4603      	mov	r3, r0
 800acd4:	e316      	b.n	800b304 <ecp_add_mixed+0x680>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <ecp_add_mixed+0x70>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	3318      	adds	r3, #24
 800ace2:	2101      	movs	r1, #1
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fb f82f 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <ecp_add_mixed+0x70>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800acf0:	4bb6      	ldr	r3, [pc, #728]	; (800afcc <ecp_add_mixed+0x348>)
 800acf2:	e307      	b.n	800b304 <ecp_add_mixed+0x680>

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800acf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fa f828 	bl	8004d4e <mbedtls_mpi_init>
 800acfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fa f823 	bl	8004d4e <mbedtls_mpi_init>
 800ad08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fa f81e 	bl	8004d4e <mbedtls_mpi_init>
 800ad12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fa f819 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800ad1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fa f814 	bl	8004d4e <mbedtls_mpi_init>
 800ad26:	f107 031c 	add.w	r3, r7, #28
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fa f80f 	bl	8004d4e <mbedtls_mpi_init>
 800ad30:	f107 0310 	add.w	r3, r7, #16
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fa f80a 	bl	8004d4e <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f103 0118 	add.w	r1, r3, #24
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f103 0218 	add.w	r2, r3, #24
 800ad46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fc fe13 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800ad50:	6678      	str	r0, [r7, #100]	; 0x64
 800ad52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f040 8266 	bne.w	800b226 <ecp_add_mixed+0x5a2>
 800ad5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ad5e:	68f9      	ldr	r1, [r7, #12]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff f845 	bl	8009df0 <ecp_modp>
 800ad66:	6678      	str	r0, [r7, #100]	; 0x64
 800ad68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f040 825d 	bne.w	800b22a <ecp_add_mixed+0x5a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f103 0218 	add.w	r2, r3, #24
 800ad76:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ad7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fc fdf9 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800ad84:	6678      	str	r0, [r7, #100]	; 0x64
 800ad86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f040 8250 	bne.w	800b22e <ecp_add_mixed+0x5aa>
 800ad8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ad92:	68f9      	ldr	r1, [r7, #12]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff f82b 	bl	8009df0 <ecp_modp>
 800ad9a:	6678      	str	r0, [r7, #100]	; 0x64
 800ad9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f040 8247 	bne.w	800b232 <ecp_add_mixed+0x5ae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800adaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fc fde1 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800adb4:	6678      	str	r0, [r7, #100]	; 0x64
 800adb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f040 823c 	bne.w	800b236 <ecp_add_mixed+0x5b2>
 800adbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800adc2:	68f9      	ldr	r1, [r7, #12]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff f813 	bl	8009df0 <ecp_modp>
 800adca:	6678      	str	r0, [r7, #100]	; 0x64
 800adcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adce:	2b00      	cmp	r3, #0
 800add0:	f040 8233 	bne.w	800b23a <ecp_add_mixed+0x5b6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	f103 020c 	add.w	r2, r3, #12
 800adda:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800adde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fc fdc7 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800ade8:	6678      	str	r0, [r7, #100]	; 0x64
 800adea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 8226 	bne.w	800b23e <ecp_add_mixed+0x5ba>
 800adf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800adf6:	68f9      	ldr	r1, [r7, #12]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe fff9 	bl	8009df0 <ecp_modp>
 800adfe:	6678      	str	r0, [r7, #100]	; 0x64
 800ae00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 821d 	bne.w	800b242 <ecp_add_mixed+0x5be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ae0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fb f975 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800ae18:	6678      	str	r0, [r7, #100]	; 0x64
 800ae1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f040 8212 	bne.w	800b246 <ecp_add_mixed+0x5c2>
 800ae22:	e00d      	b.n	800ae40 <ecp_add_mixed+0x1bc>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	1d1a      	adds	r2, r3, #4
 800ae28:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ae2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fb f91c 	bl	800606e <mbedtls_mpi_add_mpi>
 800ae36:	6678      	str	r0, [r7, #100]	; 0x64
 800ae38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 8205 	bne.w	800b24a <ecp_add_mixed+0x5c6>
 800ae40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	da08      	bge.n	800ae58 <ecp_add_mixed+0x1d4>
 800ae46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fa ff7b 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e5      	bne.n	800ae24 <ecp_add_mixed+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f103 020c 	add.w	r2, r3, #12
 800ae5e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ae62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fb f94b 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800ae6c:	6678      	str	r0, [r7, #100]	; 0x64
 800ae6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f040 81ec 	bne.w	800b24e <ecp_add_mixed+0x5ca>
 800ae76:	e00d      	b.n	800ae94 <ecp_add_mixed+0x210>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	1d1a      	adds	r2, r3, #4
 800ae7c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ae80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fb f8f2 	bl	800606e <mbedtls_mpi_add_mpi>
 800ae8a:	6678      	str	r0, [r7, #100]	; 0x64
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f040 81df 	bne.w	800b252 <ecp_add_mixed+0x5ce>
 800ae94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	da08      	bge.n	800aeac <ecp_add_mixed+0x228>
 800ae9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fa ff51 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e5      	bne.n	800ae78 <ecp_add_mixed+0x1f4>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800aeac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fa ff48 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d114      	bne.n	800aee8 <ecp_add_mixed+0x264>
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800aebe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fa ff3f 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <ecp_add_mixed+0x25a>
        {
            ret = ecp_double_jac( grp, R, P );
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7ff fad9 	bl	800a48c <ecp_double_jac>
 800aeda:	6678      	str	r0, [r7, #100]	; 0x64
            goto cleanup;
 800aedc:	e1ee      	b.n	800b2bc <ecp_add_mixed+0x638>
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 800aede:	68b8      	ldr	r0, [r7, #8]
 800aee0:	f7fe feea 	bl	8009cb8 <mbedtls_ecp_set_zero>
 800aee4:	6678      	str	r0, [r7, #100]	; 0x64
            goto cleanup;
 800aee6:	e1e9      	b.n	800b2bc <ecp_add_mixed+0x638>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f103 0118 	add.w	r1, r3, #24
 800aeee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aef2:	f107 0310 	add.w	r3, r7, #16
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fc fd3d 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800aefc:	6678      	str	r0, [r7, #100]	; 0x64
 800aefe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 81a8 	bne.w	800b256 <ecp_add_mixed+0x5d2>
 800af06:	f107 0310 	add.w	r3, r7, #16
 800af0a:	68f9      	ldr	r1, [r7, #12]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe ff6f 	bl	8009df0 <ecp_modp>
 800af12:	6678      	str	r0, [r7, #100]	; 0x64
 800af14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af16:	2b00      	cmp	r3, #0
 800af18:	f040 819f 	bne.w	800b25a <ecp_add_mixed+0x5d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800af1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800af20:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800af24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fc fd24 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800af2e:	6678      	str	r0, [r7, #100]	; 0x64
 800af30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af32:	2b00      	cmp	r3, #0
 800af34:	f040 8193 	bne.w	800b25e <ecp_add_mixed+0x5da>
 800af38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af3c:	68f9      	ldr	r1, [r7, #12]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe ff56 	bl	8009df0 <ecp_modp>
 800af44:	6678      	str	r0, [r7, #100]	; 0x64
 800af46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f040 818a 	bne.w	800b262 <ecp_add_mixed+0x5de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800af4e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800af52:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800af56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fc fd0b 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800af60:	6678      	str	r0, [r7, #100]	; 0x64
 800af62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 817e 	bne.w	800b266 <ecp_add_mixed+0x5e2>
 800af6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800af6e:	68f9      	ldr	r1, [r7, #12]
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe ff3d 	bl	8009df0 <ecp_modp>
 800af76:	6678      	str	r0, [r7, #100]	; 0x64
 800af78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 8175 	bne.w	800b26a <ecp_add_mixed+0x5e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800af86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fc fcf3 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800af90:	6678      	str	r0, [r7, #100]	; 0x64
 800af92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af94:	2b00      	cmp	r3, #0
 800af96:	f040 816a 	bne.w	800b26e <ecp_add_mixed+0x5ea>
 800af9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af9e:	68f9      	ldr	r1, [r7, #12]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe ff25 	bl	8009df0 <ecp_modp>
 800afa6:	6678      	str	r0, [r7, #100]	; 0x64
 800afa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f040 8161 	bne.w	800b272 <ecp_add_mixed+0x5ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800afb0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800afb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afb8:	2202      	movs	r2, #2
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fc fd8b 	bl	8007ad6 <mbedtls_mpi_mul_int>
 800afc0:	6678      	str	r0, [r7, #100]	; 0x64
 800afc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f040 8156 	bne.w	800b276 <ecp_add_mixed+0x5f2>
 800afca:	e00f      	b.n	800afec <ecp_add_mixed+0x368>
 800afcc:	ffffb080 	.word	0xffffb080
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	1d1a      	adds	r2, r3, #4
 800afd4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800afd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fa ffe2 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800afe2:	6678      	str	r0, [r7, #100]	; 0x64
 800afe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f040 8147 	bne.w	800b27a <ecp_add_mixed+0x5f6>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	1d1a      	adds	r2, r3, #4
 800aff0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fa fe0b 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	dae6      	bge.n	800afd0 <ecp_add_mixed+0x34c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800b002:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b006:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800b00a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fc fcb1 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b014:	6678      	str	r0, [r7, #100]	; 0x64
 800b016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 8130 	bne.w	800b27e <ecp_add_mixed+0x5fa>
 800b01e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b022:	68f9      	ldr	r1, [r7, #12]
 800b024:	4618      	mov	r0, r3
 800b026:	f7fe fee3 	bl	8009df0 <ecp_modp>
 800b02a:	6678      	str	r0, [r7, #100]	; 0x64
 800b02c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f040 8127 	bne.w	800b282 <ecp_add_mixed+0x5fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800b034:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b038:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b03c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b040:	4618      	mov	r0, r3
 800b042:	f7fb f85e 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800b046:	6678      	str	r0, [r7, #100]	; 0x64
 800b048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f040 811b 	bne.w	800b286 <ecp_add_mixed+0x602>
 800b050:	e00d      	b.n	800b06e <ecp_add_mixed+0x3ea>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	1d1a      	adds	r2, r3, #4
 800b056:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b05a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fb f805 	bl	800606e <mbedtls_mpi_add_mpi>
 800b064:	6678      	str	r0, [r7, #100]	; 0x64
 800b066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f040 810e 	bne.w	800b28a <ecp_add_mixed+0x606>
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	2b00      	cmp	r3, #0
 800b072:	da08      	bge.n	800b086 <ecp_add_mixed+0x402>
 800b074:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b078:	2100      	movs	r1, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fa fe64 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e5      	bne.n	800b052 <ecp_add_mixed+0x3ce>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800b086:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b08a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b08e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b092:	4618      	mov	r0, r3
 800b094:	f7fb f835 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800b098:	6678      	str	r0, [r7, #100]	; 0x64
 800b09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f040 80f6 	bne.w	800b28e <ecp_add_mixed+0x60a>
 800b0a2:	e00d      	b.n	800b0c0 <ecp_add_mixed+0x43c>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b0ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fa ffdc 	bl	800606e <mbedtls_mpi_add_mpi>
 800b0b6:	6678      	str	r0, [r7, #100]	; 0x64
 800b0b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f040 80e9 	bne.w	800b292 <ecp_add_mixed+0x60e>
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	da08      	bge.n	800b0d8 <ecp_add_mixed+0x454>
 800b0c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fa fe3b 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e5      	bne.n	800b0a4 <ecp_add_mixed+0x420>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800b0d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b0dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b0e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fb f80c 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800b0ea:	6678      	str	r0, [r7, #100]	; 0x64
 800b0ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f040 80d1 	bne.w	800b296 <ecp_add_mixed+0x612>
 800b0f4:	e00d      	b.n	800b112 <ecp_add_mixed+0x48e>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1d1a      	adds	r2, r3, #4
 800b0fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b0fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b102:	4618      	mov	r0, r3
 800b104:	f7fa ffb3 	bl	800606e <mbedtls_mpi_add_mpi>
 800b108:	6678      	str	r0, [r7, #100]	; 0x64
 800b10a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f040 80c4 	bne.w	800b29a <ecp_add_mixed+0x616>
 800b112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b114:	2b00      	cmp	r3, #0
 800b116:	da08      	bge.n	800b12a <ecp_add_mixed+0x4a6>
 800b118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fa fe12 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e5      	bne.n	800b0f6 <ecp_add_mixed+0x472>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800b12a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b12e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b132:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b136:	4618      	mov	r0, r3
 800b138:	f7fc fc1d 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b13c:	6678      	str	r0, [r7, #100]	; 0x64
 800b13e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b140:	2b00      	cmp	r3, #0
 800b142:	f040 80ac 	bne.w	800b29e <ecp_add_mixed+0x61a>
 800b146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b14a:	68f9      	ldr	r1, [r7, #12]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fe fe4f 	bl	8009df0 <ecp_modp>
 800b152:	6678      	str	r0, [r7, #100]	; 0x64
 800b154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b156:	2b00      	cmp	r3, #0
 800b158:	f040 80a3 	bne.w	800b2a2 <ecp_add_mixed+0x61e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f103 020c 	add.w	r2, r3, #12
 800b162:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b166:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fc fc03 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b170:	6678      	str	r0, [r7, #100]	; 0x64
 800b172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b174:	2b00      	cmp	r3, #0
 800b176:	f040 8096 	bne.w	800b2a6 <ecp_add_mixed+0x622>
 800b17a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b17e:	68f9      	ldr	r1, [r7, #12]
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe fe35 	bl	8009df0 <ecp_modp>
 800b186:	6678      	str	r0, [r7, #100]	; 0x64
 800b188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f040 808d 	bne.w	800b2aa <ecp_add_mixed+0x626>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800b190:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b194:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b198:	f107 031c 	add.w	r3, r7, #28
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fa ffb0 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800b1a2:	6678      	str	r0, [r7, #100]	; 0x64
 800b1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f040 8081 	bne.w	800b2ae <ecp_add_mixed+0x62a>
 800b1ac:	e00c      	b.n	800b1c8 <ecp_add_mixed+0x544>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	f107 011c 	add.w	r1, r7, #28
 800b1b6:	f107 031c 	add.w	r3, r7, #28
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fa ff57 	bl	800606e <mbedtls_mpi_add_mpi>
 800b1c0:	6678      	str	r0, [r7, #100]	; 0x64
 800b1c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d174      	bne.n	800b2b2 <ecp_add_mixed+0x62e>
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	da08      	bge.n	800b1e0 <ecp_add_mixed+0x55c>
 800b1ce:	f107 031c 	add.w	r3, r7, #28
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fa fdb7 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e6      	bne.n	800b1ae <ecp_add_mixed+0x52a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7f9 fe92 	bl	8004f12 <mbedtls_mpi_copy>
 800b1ee:	6678      	str	r0, [r7, #100]	; 0x64
 800b1f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d15f      	bne.n	800b2b6 <ecp_add_mixed+0x632>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	330c      	adds	r3, #12
 800b1fa:	f107 021c 	add.w	r2, r7, #28
 800b1fe:	4611      	mov	r1, r2
 800b200:	4618      	mov	r0, r3
 800b202:	f7f9 fe86 	bl	8004f12 <mbedtls_mpi_copy>
 800b206:	6678      	str	r0, [r7, #100]	; 0x64
 800b208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d155      	bne.n	800b2ba <ecp_add_mixed+0x636>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	3318      	adds	r3, #24
 800b212:	f107 0210 	add.w	r2, r7, #16
 800b216:	4611      	mov	r1, r2
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f9 fe7a 	bl	8004f12 <mbedtls_mpi_copy>
 800b21e:	6678      	str	r0, [r7, #100]	; 0x64
 800b220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b222:	2b00      	cmp	r3, #0

cleanup:
 800b224:	e04a      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800b226:	bf00      	nop
 800b228:	e048      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b22a:	bf00      	nop
 800b22c:	e046      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800b22e:	bf00      	nop
 800b230:	e044      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b232:	bf00      	nop
 800b234:	e042      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800b236:	bf00      	nop
 800b238:	e040      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b23a:	bf00      	nop
 800b23c:	e03e      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800b23e:	bf00      	nop
 800b240:	e03c      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b242:	bf00      	nop
 800b244:	e03a      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800b246:	bf00      	nop
 800b248:	e038      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b24a:	bf00      	nop
 800b24c:	e036      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800b24e:	bf00      	nop
 800b250:	e034      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b252:	bf00      	nop
 800b254:	e032      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800b256:	bf00      	nop
 800b258:	e030      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b25a:	bf00      	nop
 800b25c:	e02e      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800b25e:	bf00      	nop
 800b260:	e02c      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b262:	bf00      	nop
 800b264:	e02a      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800b266:	bf00      	nop
 800b268:	e028      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b26a:	bf00      	nop
 800b26c:	e026      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800b26e:	bf00      	nop
 800b270:	e024      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b272:	bf00      	nop
 800b274:	e022      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800b276:	bf00      	nop
 800b278:	e020      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b27a:	bf00      	nop
 800b27c:	e01e      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800b27e:	bf00      	nop
 800b280:	e01c      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b282:	bf00      	nop
 800b284:	e01a      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800b286:	bf00      	nop
 800b288:	e018      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b28a:	bf00      	nop
 800b28c:	e016      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800b28e:	bf00      	nop
 800b290:	e014      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b292:	bf00      	nop
 800b294:	e012      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800b296:	bf00      	nop
 800b298:	e010      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b29a:	bf00      	nop
 800b29c:	e00e      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800b29e:	bf00      	nop
 800b2a0:	e00c      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b2a2:	bf00      	nop
 800b2a4:	e00a      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800b2a6:	bf00      	nop
 800b2a8:	e008      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b2aa:	bf00      	nop
 800b2ac:	e006      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800b2ae:	bf00      	nop
 800b2b0:	e004      	b.n	800b2bc <ecp_add_mixed+0x638>
 800b2b2:	bf00      	nop
 800b2b4:	e002      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800b2b6:	bf00      	nop
 800b2b8:	e000      	b.n	800b2bc <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800b2ba:	bf00      	nop

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800b2bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7f9 fd57 	bl	8004d74 <mbedtls_mpi_free>
 800b2c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7f9 fd52 	bl	8004d74 <mbedtls_mpi_free>
 800b2d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f9 fd4d 	bl	8004d74 <mbedtls_mpi_free>
 800b2da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f9 fd48 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800b2e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7f9 fd43 	bl	8004d74 <mbedtls_mpi_free>
 800b2ee:	f107 031c 	add.w	r3, r7, #28
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f9 fd3e 	bl	8004d74 <mbedtls_mpi_free>
 800b2f8:	f107 0310 	add.w	r3, r7, #16
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7f9 fd39 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800b302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800b304:	4618      	mov	r0, r3
 800b306:	3768      	adds	r7, #104	; 0x68
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <ecp_randomize_jac>:
 *
 * This countermeasure was first suggested in [2].
 */
static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08e      	sub	sp, #56	; 0x38
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l, ll;
    size_t p_size;
    int count = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b322:	3307      	adds	r3, #7
 800b324:	08db      	lsrs	r3, r3, #3
 800b326:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800b328:	f107 0320 	add.w	r3, r7, #32
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7f9 fd0e 	bl	8004d4e <mbedtls_mpi_init>
 800b332:	f107 0314 	add.w	r3, r7, #20
 800b336:	4618      	mov	r0, r3
 800b338:	f7f9 fd09 	bl	8004d4e <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800b33c:	f107 0020 	add.w	r0, r7, #32
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b346:	f7fd f8bf 	bl	80084c8 <mbedtls_mpi_fill_random>
 800b34a:	6378      	str	r0, [r7, #52]	; 0x34
 800b34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f040 8099 	bne.w	800b486 <ecp_randomize_jac+0x17a>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800b354:	e00a      	b.n	800b36c <ecp_randomize_jac+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800b356:	f107 0320 	add.w	r3, r7, #32
 800b35a:	2101      	movs	r1, #1
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fa fb3b 	bl	80059d8 <mbedtls_mpi_shift_r>
 800b362:	6378      	str	r0, [r7, #52]	; 0x34
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	2b00      	cmp	r3, #0
 800b368:	f040 808f 	bne.w	800b48a <ecp_randomize_jac+0x17e>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	1d1a      	adds	r2, r3, #4
 800b370:	f107 0320 	add.w	r3, r7, #32
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f7fa fc4b 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	dae9      	bge.n	800b356 <ecp_randomize_jac+0x4a>

        if( count++ > 10 )
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	633a      	str	r2, [r7, #48]	; 0x30
 800b388:	2b0a      	cmp	r3, #10
 800b38a:	dd01      	ble.n	800b390 <ecp_randomize_jac+0x84>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800b38c:	4b50      	ldr	r3, [pc, #320]	; (800b4d0 <ecp_randomize_jac+0x1c4>)
 800b38e:	e09a      	b.n	800b4c6 <ecp_randomize_jac+0x1ba>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800b390:	f107 0320 	add.w	r3, r7, #32
 800b394:	2101      	movs	r1, #1
 800b396:	4618      	mov	r0, r3
 800b398:	f7fa fcd6 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	ddcc      	ble.n	800b33c <ecp_randomize_jac+0x30>

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f103 0018 	add.w	r0, r3, #24
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	3318      	adds	r3, #24
 800b3ac:	f107 0220 	add.w	r2, r7, #32
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	f7fc fae0 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b3b6:	6378      	str	r0, [r7, #52]	; 0x34
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d167      	bne.n	800b48e <ecp_randomize_jac+0x182>
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	3318      	adds	r3, #24
 800b3c2:	68f9      	ldr	r1, [r7, #12]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fe fd13 	bl	8009df0 <ecp_modp>
 800b3ca:	6378      	str	r0, [r7, #52]	; 0x34
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d15f      	bne.n	800b492 <ecp_randomize_jac+0x186>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800b3d2:	f107 0220 	add.w	r2, r7, #32
 800b3d6:	f107 0120 	add.w	r1, r7, #32
 800b3da:	f107 0314 	add.w	r3, r7, #20
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fc fac9 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b3e4:	6378      	str	r0, [r7, #52]	; 0x34
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d154      	bne.n	800b496 <ecp_randomize_jac+0x18a>
 800b3ec:	f107 0314 	add.w	r3, r7, #20
 800b3f0:	68f9      	ldr	r1, [r7, #12]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fcfc 	bl	8009df0 <ecp_modp>
 800b3f8:	6378      	str	r0, [r7, #52]	; 0x34
 800b3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d14c      	bne.n	800b49a <ecp_randomize_jac+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	68b9      	ldr	r1, [r7, #8]
 800b404:	f107 0214 	add.w	r2, r7, #20
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fc fab4 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b40e:	6378      	str	r0, [r7, #52]	; 0x34
 800b410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b412:	2b00      	cmp	r3, #0
 800b414:	d143      	bne.n	800b49e <ecp_randomize_jac+0x192>
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	68f9      	ldr	r1, [r7, #12]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe fce8 	bl	8009df0 <ecp_modp>
 800b420:	6378      	str	r0, [r7, #52]	; 0x34
 800b422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b424:	2b00      	cmp	r3, #0
 800b426:	d13c      	bne.n	800b4a2 <ecp_randomize_jac+0x196>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800b428:	f107 0220 	add.w	r2, r7, #32
 800b42c:	f107 0114 	add.w	r1, r7, #20
 800b430:	f107 0314 	add.w	r3, r7, #20
 800b434:	4618      	mov	r0, r3
 800b436:	f7fc fa9e 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b43a:	6378      	str	r0, [r7, #52]	; 0x34
 800b43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d131      	bne.n	800b4a6 <ecp_randomize_jac+0x19a>
 800b442:	f107 0314 	add.w	r3, r7, #20
 800b446:	68f9      	ldr	r1, [r7, #12]
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fcd1 	bl	8009df0 <ecp_modp>
 800b44e:	6378      	str	r0, [r7, #52]	; 0x34
 800b450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b452:	2b00      	cmp	r3, #0
 800b454:	d129      	bne.n	800b4aa <ecp_randomize_jac+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	f103 000c 	add.w	r0, r3, #12
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	330c      	adds	r3, #12
 800b460:	f107 0214 	add.w	r2, r7, #20
 800b464:	4619      	mov	r1, r3
 800b466:	f7fc fa86 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800b46a:	6378      	str	r0, [r7, #52]	; 0x34
 800b46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d11d      	bne.n	800b4ae <ecp_randomize_jac+0x1a2>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	330c      	adds	r3, #12
 800b476:	68f9      	ldr	r1, [r7, #12]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe fcb9 	bl	8009df0 <ecp_modp>
 800b47e:	6378      	str	r0, [r7, #52]	; 0x34
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	2b00      	cmp	r3, #0

cleanup:
 800b484:	e014      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800b486:	bf00      	nop
 800b488:	e012      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800b48a:	bf00      	nop
 800b48c:	e010      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800b48e:	bf00      	nop
 800b490:	e00e      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
 800b492:	bf00      	nop
 800b494:	e00c      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800b496:	bf00      	nop
 800b498:	e00a      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
 800b49a:	bf00      	nop
 800b49c:	e008      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800b49e:	bf00      	nop
 800b4a0:	e006      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
 800b4a2:	bf00      	nop
 800b4a4:	e004      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800b4a6:	bf00      	nop
 800b4a8:	e002      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
 800b4aa:	bf00      	nop
 800b4ac:	e000      	b.n	800b4b0 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800b4ae:	bf00      	nop
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800b4b0:	f107 0320 	add.w	r3, r7, #32
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7f9 fc5d 	bl	8004d74 <mbedtls_mpi_free>
 800b4ba:	f107 0314 	add.w	r3, r7, #20
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f9 fc58 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3738      	adds	r7, #56	; 0x38
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	ffffb300 	.word	0xffffb300

0800b4d4 <ecp_comb_recode_core>:
 * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
 *   (the result will be incorrect if these assumptions are not satisfied)
 */
static void ecp_comb_recode_core( unsigned char x[], size_t d,
                                  unsigned char w, const mbedtls_mpi *m )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	71fb      	strb	r3, [r7, #7]
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f009 f87c 	bl	80145ea <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	61fb      	str	r3, [r7, #28]
 800b4f6:	e027      	b.n	800b548 <ecp_comb_recode_core+0x74>
        for( j = 0; j < w; j++ )
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61bb      	str	r3, [r7, #24]
 800b4fc:	e01d      	b.n	800b53a <ecp_comb_recode_core+0x66>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	fb02 f203 	mul.w	r2, r2, r3
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	4413      	add	r3, r2
 800b50a:	4619      	mov	r1, r3
 800b50c:	6838      	ldr	r0, [r7, #0]
 800b50e:	f7f9 fe91 	bl	8005234 <mbedtls_mpi_get_bit>
 800b512:	4602      	mov	r2, r0
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	fa02 f103 	lsl.w	r1, r2, r3
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	4413      	add	r3, r2
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	b25a      	sxtb	r2, r3
 800b524:	b24b      	sxtb	r3, r1
 800b526:	4313      	orrs	r3, r2
 800b528:	b259      	sxtb	r1, r3
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	4413      	add	r3, r2
 800b530:	b2ca      	uxtb	r2, r1
 800b532:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < w; j++ )
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	3301      	adds	r3, #1
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d3dd      	bcc.n	800b4fe <ecp_comb_recode_core+0x2a>
    for( i = 0; i < d; i++ )
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	3301      	adds	r3, #1
 800b546:	61fb      	str	r3, [r7, #28]
 800b548:	69fa      	ldr	r2, [r7, #28]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d3d3      	bcc.n	800b4f8 <ecp_comb_recode_core+0x24>

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	75fb      	strb	r3, [r7, #23]
    for( i = 1; i <= d; i++ )
 800b554:	2301      	movs	r3, #1
 800b556:	61fb      	str	r3, [r7, #28]
 800b558:	e05f      	b.n	800b61a <ecp_comb_recode_core+0x146>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	4413      	add	r3, r2
 800b560:	781a      	ldrb	r2, [r3, #0]
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	4013      	ands	r3, r2
 800b566:	75bb      	strb	r3, [r7, #22]
        x[i] = x[i] ^ c;
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	7819      	ldrb	r1, [r3, #0]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	4413      	add	r3, r2
 800b576:	7dfa      	ldrb	r2, [r7, #23]
 800b578:	404a      	eors	r2, r1
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]
        c = cc;
 800b57e:	7dbb      	ldrb	r3, [r7, #22]
 800b580:	75fb      	strb	r3, [r7, #23]

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	4413      	add	r3, r2
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	bf0c      	ite	eq
 800b592:	2301      	moveq	r3, #1
 800b594:	2300      	movne	r3, #0
 800b596:	b2db      	uxtb	r3, r3
 800b598:	757b      	strb	r3, [r7, #21]
        c   |= x[i] & ( x[i-1] * adjust );
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	4413      	add	r3, r2
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	b25a      	sxtb	r2, r3
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	68f9      	ldr	r1, [r7, #12]
 800b5aa:	440b      	add	r3, r1
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	7d79      	ldrb	r1, [r7, #21]
 800b5b0:	fb11 f303 	smulbb	r3, r1, r3
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	b25b      	sxtb	r3, r3
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	b25a      	sxtb	r2, r3
 800b5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	b25b      	sxtb	r3, r3
 800b5c4:	75fb      	strb	r3, [r7, #23]
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	b25a      	sxtb	r2, r3
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	68f9      	ldr	r1, [r7, #12]
 800b5d6:	440b      	add	r3, r1
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	7d79      	ldrb	r1, [r7, #21]
 800b5dc:	fb11 f303 	smulbb	r3, r1, r3
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	b25b      	sxtb	r3, r3
 800b5e4:	4053      	eors	r3, r2
 800b5e6:	b259      	sxtb	r1, r3
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	b2ca      	uxtb	r2, r1
 800b5f0:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b25a      	sxtb	r2, r3
 800b5fe:	7d7b      	ldrb	r3, [r7, #21]
 800b600:	01db      	lsls	r3, r3, #7
 800b602:	b25b      	sxtb	r3, r3
 800b604:	4313      	orrs	r3, r2
 800b606:	b259      	sxtb	r1, r3
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	b2ca      	uxtb	r2, r1
 800b612:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= d; i++ )
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	3301      	adds	r3, #1
 800b618:	61fb      	str	r3, [r7, #28]
 800b61a:	69fa      	ldr	r2, [r7, #28]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d99b      	bls.n	800b55a <ecp_comb_recode_core+0x86>
    }
}
 800b622:	bf00      	nop
 800b624:	3720      	adds	r7, #32
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <ecp_precompute_comb>:
 */
static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
                                unsigned char w, size_t d,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b08a      	sub	sp, #40	; 0x28
 800b62e:	af00      	add	r7, sp, #0
 800b630:	60f8      	str	r0, [r7, #12]
 800b632:	60b9      	str	r1, [r7, #8]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char i;
    size_t j = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	61fb      	str	r3, [r7, #28]
    const unsigned char T_size = 1U << ( w - 1 );
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	3b01      	subs	r3, #1
 800b640:	2201      	movs	r2, #1
 800b642:	fa02 f303 	lsl.w	r3, r2, r3
 800b646:	76fb      	strb	r3, [r7, #27]
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800b648:	6879      	ldr	r1, [r7, #4]
 800b64a:	68b8      	ldr	r0, [r7, #8]
 800b64c:	f7fe faf3 	bl	8009c36 <mbedtls_ecp_copy>
 800b650:	6278      	str	r0, [r7, #36]	; 0x24
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	2b00      	cmp	r3, #0
 800b656:	f040 80d9 	bne.w	800b80c <ecp_precompute_comb+0x1e2>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL && rs_ctx->rsm->i != 0 )
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]

    for( ; j < d * ( w - 1 ); j++ )
 800b65e:	e03e      	b.n	800b6de <ecp_precompute_comb+0xb4>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 800b660:	69fa      	ldr	r2, [r7, #28]
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	fbb2 f3f3 	udiv	r3, r2, r3
 800b668:	2201      	movs	r2, #1
 800b66a:	fa02 f303 	lsl.w	r3, r2, r3
 800b66e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        cur = T + i;
 800b672:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b676:	4613      	mov	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	4413      	add	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	461a      	mov	r2, r3
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	4413      	add	r3, r2
 800b684:	617b      	str	r3, [r7, #20]

        if( j % d == 0 )
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b68a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b68e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b690:	fb01 f202 	mul.w	r2, r1, r2
 800b694:	1a9b      	subs	r3, r3, r2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d114      	bne.n	800b6c4 <ecp_precompute_comb+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800b69a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b69e:	085b      	lsrs	r3, r3, #1
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6978      	ldr	r0, [r7, #20]
 800b6b6:	f7fe fabe 	bl	8009c36 <mbedtls_ecp_copy>
 800b6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f040 80a6 	bne.w	800b810 <ecp_precompute_comb+0x1e6>

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	6979      	ldr	r1, [r7, #20]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7fe fedf 	bl	800a48c <ecp_double_jac>
 800b6ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 809e 	bne.w	800b814 <ecp_precompute_comb+0x1ea>
    for( ; j < d * ( w - 1 ); j++ )
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	61fb      	str	r3, [r7, #28]
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	fb03 f302 	mul.w	r3, r3, r2
 800b6ea:	69fa      	ldr	r2, [r7, #28]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d3b7      	bcc.n	800b660 <ecp_precompute_comb+0x36>
#endif
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	61fb      	str	r3, [r7, #28]
    for( i = 1; i < T_size; i <<= 1 )
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6fa:	e016      	b.n	800b72a <ecp_precompute_comb+0x100>
        TT[j++] = T + i;
 800b6fc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b700:	4613      	mov	r3, r2
 800b702:	00db      	lsls	r3, r3, #3
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4619      	mov	r1, r3
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	61fa      	str	r2, [r7, #28]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	440a      	add	r2, r1
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b71a:	440b      	add	r3, r1
 800b71c:	f843 2c18 	str.w	r2, [r3, #-24]
    for( i = 1; i < T_size; i <<= 1 )
 800b720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b72a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b72e:	7efb      	ldrb	r3, [r7, #27]
 800b730:	429a      	cmp	r2, r3
 800b732:	d3e3      	bcc.n	800b6fc <ecp_precompute_comb+0xd2>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800b734:	f107 0310 	add.w	r3, r7, #16
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	4619      	mov	r1, r3
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7fe fc6f 	bl	800a020 <ecp_normalize_jac_many>
 800b742:	6278      	str	r0, [r7, #36]	; 0x24
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	2b00      	cmp	r3, #0
 800b748:	d166      	bne.n	800b818 <ecp_precompute_comb+0x1ee>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 800b74a:	2301      	movs	r3, #1
 800b74c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b750:	e031      	b.n	800b7b6 <ecp_precompute_comb+0x18c>
    {
        j = i;
 800b752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b756:	61fb      	str	r3, [r7, #28]
        while( j-- )
 800b758:	e023      	b.n	800b7a2 <ecp_precompute_comb+0x178>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800b75a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	441a      	add	r2, r3
 800b762:	4613      	mov	r3, r2
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	461a      	mov	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	1899      	adds	r1, r3, r2
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	4613      	mov	r3, r2
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	4413      	add	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	461a      	mov	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	1898      	adds	r0, r3, r2
 800b780:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b784:	4613      	mov	r3, r2
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	461a      	mov	r2, r3
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	4413      	add	r3, r2
 800b792:	4602      	mov	r2, r0
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f7ff fa75 	bl	800ac84 <ecp_add_mixed>
 800b79a:	6278      	str	r0, [r7, #36]	; 0x24
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d13c      	bne.n	800b81c <ecp_precompute_comb+0x1f2>
        while( j-- )
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	61fa      	str	r2, [r7, #28]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1d6      	bne.n	800b75a <ecp_precompute_comb+0x130>
    for( i = 1; i < T_size; i <<= 1 )
 800b7ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b7ba:	7efb      	ldrb	r3, [r7, #27]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d3c8      	bcc.n	800b752 <ecp_precompute_comb+0x128>
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	61fb      	str	r3, [r7, #28]
 800b7c4:	e012      	b.n	800b7ec <ecp_precompute_comb+0x1c2>
        TT[j] = T + j + 1;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	441a      	add	r2, r3
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b7e0:	440b      	add	r3, r1
 800b7e2:	f843 2c18 	str.w	r2, [r3, #-24]
    for( j = 0; j + 1 < T_size; j++ )
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	1c5a      	adds	r2, r3, #1
 800b7f0:	7efb      	ldrb	r3, [r7, #27]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d3e7      	bcc.n	800b7c6 <ecp_precompute_comb+0x19c>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800b7f6:	f107 0310 	add.w	r3, r7, #16
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7fe fc0e 	bl	800a020 <ecp_normalize_jac_many>
 800b804:	6278      	str	r0, [r7, #36]	; 0x24
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	2b00      	cmp	r3, #0

cleanup:
 800b80a:	e008      	b.n	800b81e <ecp_precompute_comb+0x1f4>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800b80c:	bf00      	nop
 800b80e:	e006      	b.n	800b81e <ecp_precompute_comb+0x1f4>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800b810:	bf00      	nop
 800b812:	e004      	b.n	800b81e <ecp_precompute_comb+0x1f4>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800b814:	bf00      	nop
 800b816:	e002      	b.n	800b81e <ecp_precompute_comb+0x1f4>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800b818:	bf00      	nop
 800b81a:	e000      	b.n	800b81e <ecp_precompute_comb+0x1f4>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800b81c:	bf00      	nop
        if( rs_ctx->rsm->state == ecp_rsm_pre_dbl )
            rs_ctx->rsm->i = j;
    }
#endif

    return( ret );
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b820:	4618      	mov	r0, r3
 800b822:	3728      	adds	r7, #40	; 0x28
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800b836:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b83a:	085b      	lsrs	r3, r3, #1
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b842:	74bb      	strb	r3, [r7, #18]

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800b844:	2300      	movs	r3, #0
 800b846:	74fb      	strb	r3, [r7, #19]
 800b848:	e035      	b.n	800b8b6 <ecp_select_comb+0x8e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800b84a:	68b8      	ldr	r0, [r7, #8]
 800b84c:	7cfa      	ldrb	r2, [r7, #19]
 800b84e:	4613      	mov	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	4413      	add	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	461a      	mov	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4413      	add	r3, r2
 800b85c:	4619      	mov	r1, r3
 800b85e:	7cfa      	ldrb	r2, [r7, #19]
 800b860:	7cbb      	ldrb	r3, [r7, #18]
 800b862:	429a      	cmp	r2, r3
 800b864:	bf0c      	ite	eq
 800b866:	2301      	moveq	r3, #1
 800b868:	2300      	movne	r3, #0
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	461a      	mov	r2, r3
 800b86e:	f7f9 fbac 	bl	8004fca <mbedtls_mpi_safe_cond_assign>
 800b872:	6178      	str	r0, [r7, #20]
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d12e      	bne.n	800b8d8 <ecp_select_comb+0xb0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f103 000c 	add.w	r0, r3, #12
 800b880:	7cfa      	ldrb	r2, [r7, #19]
 800b882:	4613      	mov	r3, r2
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	4413      	add	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	461a      	mov	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4413      	add	r3, r2
 800b890:	f103 010c 	add.w	r1, r3, #12
 800b894:	7cfa      	ldrb	r2, [r7, #19]
 800b896:	7cbb      	ldrb	r3, [r7, #18]
 800b898:	429a      	cmp	r2, r3
 800b89a:	bf0c      	ite	eq
 800b89c:	2301      	moveq	r3, #1
 800b89e:	2300      	movne	r3, #0
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f7f9 fb91 	bl	8004fca <mbedtls_mpi_safe_cond_assign>
 800b8a8:	6178      	str	r0, [r7, #20]
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d115      	bne.n	800b8dc <ecp_select_comb+0xb4>
    for( j = 0; j < T_size; j++ )
 800b8b0:	7cfb      	ldrb	r3, [r7, #19]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	74fb      	strb	r3, [r7, #19]
 800b8b6:	7cfa      	ldrb	r2, [r7, #19]
 800b8b8:	78fb      	ldrb	r3, [r7, #3]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d3c5      	bcc.n	800b84a <ecp_select_comb+0x22>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800b8be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8c2:	09db      	lsrs	r3, r3, #7
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	68b9      	ldr	r1, [r7, #8]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7fe fd9a 	bl	800a404 <ecp_safe_invert_jac>
 800b8d0:	6178      	str	r0, [r7, #20]
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b00      	cmp	r3, #0

cleanup:
 800b8d6:	e002      	b.n	800b8de <ecp_select_comb+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <ecp_select_comb+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800b8dc:	bf00      	nop
    return( ret );
 800b8de:	697b      	ldr	r3, [r7, #20]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <ecp_mul_comb_core>:
                              const mbedtls_ecp_point T[], unsigned char T_size,
                              const unsigned char x[], size_t d,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng,
                              mbedtls_ecp_restart_ctx *rs_ctx )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b092      	sub	sp, #72	; 0x48
 800b8ec:	af02      	add	r7, sp, #8
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	70fb      	strb	r3, [r7, #3]
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 800b8f6:	f107 0314 	add.w	r3, r7, #20
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe f8b0 	bl	8009a60 <mbedtls_ecp_point_init>
    }
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
 800b900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b902:	63bb      	str	r3, [r7, #56]	; 0x38
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800b904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	4413      	add	r3, r2
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	78fa      	ldrb	r2, [r7, #3]
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	4613      	mov	r3, r2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	68b9      	ldr	r1, [r7, #8]
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f7ff ff86 	bl	800b828 <ecp_select_comb>
 800b91c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b920:	2b00      	cmp	r3, #0
 800b922:	d143      	bne.n	800b9ac <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3318      	adds	r3, #24
 800b928:	2101      	movs	r1, #1
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7f9 fc54 	bl	80051d8 <mbedtls_mpi_lset>
 800b930:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d13b      	bne.n	800b9b0 <ecp_mul_comb_core+0xc8>
        if( f_rng != 0 )
 800b938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d032      	beq.n	800b9a4 <ecp_mul_comb_core+0xbc>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800b93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b940:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff fce1 	bl	800b30c <ecp_randomize_jac>
 800b94a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d130      	bne.n	800b9b4 <ecp_mul_comb_core+0xcc>
    }

    while( i != 0 )
 800b952:	e027      	b.n	800b9a4 <ecp_mul_comb_core+0xbc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	3b01      	subs	r3, #1
 800b958:	63bb      	str	r3, [r7, #56]	; 0x38

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	68b9      	ldr	r1, [r7, #8]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f7fe fd94 	bl	800a48c <ecp_double_jac>
 800b964:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d125      	bne.n	800b9b8 <ecp_mul_comb_core+0xd0>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800b96c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	4413      	add	r3, r2
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	78fa      	ldrb	r2, [r7, #3]
 800b976:	f107 0114 	add.w	r1, r7, #20
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	4613      	mov	r3, r2
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff ff51 	bl	800b828 <ecp_select_comb>
 800b986:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d116      	bne.n	800b9bc <ecp_mul_comb_core+0xd4>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800b98e:	f107 0314 	add.w	r3, r7, #20
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f7ff f974 	bl	800ac84 <ecp_add_mixed>
 800b99c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10d      	bne.n	800b9c0 <ecp_mul_comb_core+0xd8>
    while( i != 0 )
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1d4      	bne.n	800b954 <ecp_mul_comb_core+0x6c>
    }

cleanup:
 800b9aa:	e00a      	b.n	800b9c2 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800b9ac:	bf00      	nop
 800b9ae:	e008      	b.n	800b9c2 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800b9b0:	bf00      	nop
 800b9b2:	e006      	b.n	800b9c2 <ecp_mul_comb_core+0xda>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800b9b4:	bf00      	nop
 800b9b6:	e004      	b.n	800b9c2 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800b9b8:	bf00      	nop
 800b9ba:	e002      	b.n	800b9c2 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800b9bc:	bf00      	nop
 800b9be:	e000      	b.n	800b9c2 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800b9c0:	bf00      	nop

    mbedtls_ecp_point_free( &Txi );
 800b9c2:	f107 0314 	add.w	r3, r7, #20
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe f8b5 	bl	8009b36 <mbedtls_ecp_point_free>
        rs_ctx->rsm->i = i;
        /* no need to save R, already pointing to rs_ctx->rsm->R */
    }
#endif

    return( ret );
 800b9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3740      	adds	r7, #64	; 0x40
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
	...

0800b9d8 <ecp_comb_recode_scalar>:
                                   const mbedtls_mpi *m,
                                   unsigned char k[COMB_MAX_D + 1],
                                   size_t d,
                                   unsigned char w,
                                   unsigned char *parity_trick )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08c      	sub	sp, #48	; 0x30
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 800b9e6:	f107 0320 	add.w	r3, r7, #32
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7f9 f9af 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800b9f0:	f107 0314 	add.w	r3, r7, #20
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7f9 f9aa 	bl	8004d4e <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	334c      	adds	r3, #76	; 0x4c
 800b9fe:	2100      	movs	r1, #0
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f9 fc17 	bl	8005234 <mbedtls_mpi_get_bit>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d001      	beq.n	800ba10 <ecp_comb_recode_scalar+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800ba0c:	4b27      	ldr	r3, [pc, #156]	; (800baac <ecp_comb_recode_scalar+0xd4>)
 800ba0e:	e049      	b.n	800baa4 <ecp_comb_recode_scalar+0xcc>

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800ba10:	2100      	movs	r1, #0
 800ba12:	68b8      	ldr	r0, [r7, #8]
 800ba14:	f7f9 fc0e 	bl	8005234 <mbedtls_mpi_get_bit>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	bf0c      	ite	eq
 800ba1e:	2301      	moveq	r3, #1
 800ba20:	2300      	movne	r3, #0
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	461a      	mov	r2, r3
 800ba26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba28:	701a      	strb	r2, [r3, #0]

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800ba2a:	f107 0320 	add.w	r3, r7, #32
 800ba2e:	68b9      	ldr	r1, [r7, #8]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7f9 fa6e 	bl	8004f12 <mbedtls_mpi_copy>
 800ba36:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d122      	bne.n	800ba84 <ecp_comb_recode_scalar+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800ba44:	f107 0314 	add.w	r3, r7, #20
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fa fb59 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800ba50:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d117      	bne.n	800ba88 <ecp_comb_recode_scalar+0xb0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800ba58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5a:	781a      	ldrb	r2, [r3, #0]
 800ba5c:	f107 0114 	add.w	r1, r7, #20
 800ba60:	f107 0320 	add.w	r3, r7, #32
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7f9 fab0 	bl	8004fca <mbedtls_mpi_safe_cond_assign>
 800ba6a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10c      	bne.n	800ba8c <ecp_comb_recode_scalar+0xb4>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );
 800ba72:	f107 0320 	add.w	r3, r7, #32
 800ba76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff fd29 	bl	800b4d4 <ecp_comb_recode_core>
 800ba82:	e004      	b.n	800ba8e <ecp_comb_recode_scalar+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800ba84:	bf00      	nop
 800ba86:	e002      	b.n	800ba8e <ecp_comb_recode_scalar+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800ba88:	bf00      	nop
 800ba8a:	e000      	b.n	800ba8e <ecp_comb_recode_scalar+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800ba8c:	bf00      	nop

cleanup:
    mbedtls_mpi_free( &mm );
 800ba8e:	f107 0314 	add.w	r3, r7, #20
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f9 f96e 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800ba98:	f107 0320 	add.w	r3, r7, #32
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7f9 f969 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3730      	adds	r7, #48	; 0x30
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	ffffb080 	.word	0xffffb080

0800bab0 <ecp_mul_comb_after_precomp>:
                                unsigned char w,
                                size_t d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b0be      	sub	sp, #248	; 0xf8
 800bab4:	af06      	add	r7, sp, #24
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char parity_trick;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *RR = R;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800bac4:	f107 0214 	add.w	r2, r7, #20
 800bac8:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bad8:	6879      	ldr	r1, [r7, #4]
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff ff7c 	bl	800b9d8 <ecp_comb_recode_scalar>
 800bae0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800bae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d136      	bne.n	800bb5a <ecp_mul_comb_after_precomp+0xaa>
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800baec:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
 800baf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bafa:	9303      	str	r3, [sp, #12]
 800bafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb00:	9302      	str	r3, [sp, #8]
 800bb02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	f107 0314 	add.w	r3, r7, #20
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f7ff fee6 	bl	800b8e8 <ecp_mul_comb_core>
 800bb1c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800bb20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d11a      	bne.n	800bb5e <ecp_mul_comb_after_precomp+0xae>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800bb28:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7fe fc66 	bl	800a404 <ecp_safe_invert_jac>
 800bb38:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800bb3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10e      	bne.n	800bb62 <ecp_mul_comb_after_precomp+0xb2>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800bb44:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f7fe f9bb 	bl	8009ec4 <ecp_normalize_jac>
 800bb4e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800bb52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb56:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
 800bb58:	e004      	b.n	800bb64 <ecp_mul_comb_after_precomp+0xb4>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800bb5a:	bf00      	nop
 800bb5c:	e002      	b.n	800bb64 <ecp_mul_comb_after_precomp+0xb4>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800bb5e:	bf00      	nop
 800bb60:	e000      	b.n	800bb64 <ecp_mul_comb_after_precomp+0xb4>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800bb62:	bf00      	nop
    return( ret );
 800bb64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	37e0      	adds	r7, #224	; 0xe0
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <ecp_pick_window_size>:
/*
 * Pick window size based on curve size and whether we optimize for base point
 */
static unsigned char ecp_pick_window_size( const mbedtls_ecp_group *grp,
                                           unsigned char p_eq_g )
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	70fb      	strb	r3, [r7, #3]
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb80:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800bb84:	d301      	bcc.n	800bb8a <ecp_pick_window_size+0x1a>
 800bb86:	2305      	movs	r3, #5
 800bb88:	e000      	b.n	800bb8c <ecp_pick_window_size+0x1c>
 800bb8a:	2304      	movs	r3, #4
 800bb8c:	73fb      	strb	r3, [r7, #15]
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 800bb8e:	78fb      	ldrb	r3, [r7, #3]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <ecp_pick_window_size+0x2a>
        w++;
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	3301      	adds	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]

    /*
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d901      	bls.n	800bba4 <ecp_pick_window_size+0x34>
        w = MBEDTLS_ECP_WINDOW_SIZE;
 800bba0:	2302      	movs	r3, #2
 800bba2:	73fb      	strb	r3, [r7, #15]
    if( w >= grp->nbits )
 800bba4:	7bfa      	ldrb	r2, [r7, #15]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d301      	bcc.n	800bbb2 <ecp_pick_window_size+0x42>
        w = 2;
 800bbae:	2302      	movs	r3, #2
 800bbb0:	73fb      	strb	r3, [r7, #15]

    return( w );
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <ecp_mul_comb>:
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b090      	sub	sp, #64	; 0x40
 800bbc4:	af06      	add	r7, sp, #24
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
 800bbcc:	603b      	str	r3, [r7, #0]
    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
#else
    p_eq_g = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	76fb      	strb	r3, [r7, #27]
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
 800bbd2:	7efb      	ldrb	r3, [r7, #27]
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f7ff ffca 	bl	800bb70 <ecp_pick_window_size>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	76bb      	strb	r3, [r7, #26]
    T_size = 1U << ( w - 1 );
 800bbe0:	7ebb      	ldrb	r3, [r7, #26]
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbea:	767b      	strb	r3, [r7, #25]
    d = ( grp->nbits + w - 1 ) / w;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbf0:	7ebb      	ldrb	r3, [r7, #26]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	1e5a      	subs	r2, r3, #1
 800bbf6:	7ebb      	ldrb	r3, [r7, #26]
 800bbf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbfc:	617b      	str	r3, [r7, #20]

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 800bbfe:	7efb      	ldrb	r3, [r7, #27]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00a      	beq.n	800bc1a <ecp_mul_comb+0x5a>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d006      	beq.n	800bc1a <ecp_mul_comb+0x5a>
    {
        /* second pointer to the same table, will be deleted on exit */
        T = grp->T;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc10:	61fb      	str	r3, [r7, #28]
        T_ok = 1;
 800bc12:	2301      	movs	r3, #1
 800bc14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bc18:	e029      	b.n	800bc6e <ecp_mul_comb+0xae>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 800bc1a:	7e7b      	ldrb	r3, [r7, #25]
 800bc1c:	2124      	movs	r1, #36	; 0x24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f008 fc6e 	bl	8014500 <calloc>
 800bc24:	4603      	mov	r3, r0
 800bc26:	61fb      	str	r3, [r7, #28]
        if( T == NULL )
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d102      	bne.n	800bc34 <ecp_mul_comb+0x74>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 800bc2e:	4b42      	ldr	r3, [pc, #264]	; (800bd38 <ecp_mul_comb+0x178>)
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
            goto cleanup;
 800bc32:	e04f      	b.n	800bcd4 <ecp_mul_comb+0x114>
        }

        for( i = 0; i < T_size; i++ )
 800bc34:	2300      	movs	r3, #0
 800bc36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc3a:	e010      	b.n	800bc5e <ecp_mul_comb+0x9e>
            mbedtls_ecp_point_init( &T[i] );
 800bc3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bc40:	4613      	mov	r3, r2
 800bc42:	00db      	lsls	r3, r3, #3
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	461a      	mov	r2, r3
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fd ff06 	bl	8009a60 <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 800bc54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc58:	3301      	adds	r3, #1
 800bc5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bc62:	7e7b      	ldrb	r3, [r7, #25]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d3e9      	bcc.n	800bc3c <ecp_mul_comb+0x7c>

        T_ok = 0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
 800bc6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d117      	bne.n	800bca6 <ecp_mul_comb+0xe6>
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800bc76:	7eba      	ldrb	r2, [r7, #26]
 800bc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	69f9      	ldr	r1, [r7, #28]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f7ff fccf 	bl	800b62a <ecp_precompute_comb>
 800bc8c:	6278      	str	r0, [r7, #36]	; 0x24
 800bc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d11e      	bne.n	800bcd2 <ecp_mul_comb+0x112>

        if( p_eq_g )
 800bc94:	7efb      	ldrb	r3, [r7, #27]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <ecp_mul_comb+0xe6>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	69fa      	ldr	r2, [r7, #28]
 800bc9e:	675a      	str	r2, [r3, #116]	; 0x74
            grp->T_size = T_size;
 800bca0:	7e7a      	ldrb	r2, [r7, #25]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	679a      	str	r2, [r3, #120]	; 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	9305      	str	r3, [sp, #20]
 800bcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcac:	9304      	str	r3, [sp, #16]
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	9302      	str	r3, [sp, #8]
 800bcb6:	7ebb      	ldrb	r3, [r7, #26]
 800bcb8:	9301      	str	r3, [sp, #4]
 800bcba:	7e7b      	ldrb	r3, [r7, #25]
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	68b9      	ldr	r1, [r7, #8]
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f7ff fef3 	bl	800bab0 <ecp_mul_comb_after_precomp>
 800bcca:	6278      	str	r0, [r7, #36]	; 0x24
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	2b00      	cmp	r3, #0
                                                 T, T_size, w, d,
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:
 800bcd0:	e000      	b.n	800bcd4 <ecp_mul_comb+0x114>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800bcd2:	bf00      	nop

    /* does T belong to the group? */
    if( T == grp->T )
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd8:	69fa      	ldr	r2, [r7, #28]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d101      	bne.n	800bce2 <ecp_mul_comb+0x122>
        T = NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	61fb      	str	r3, [r7, #28]
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01c      	beq.n	800bd22 <ecp_mul_comb+0x162>
    {
        for( i = 0; i < T_size; i++ )
 800bce8:	2300      	movs	r3, #0
 800bcea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcee:	e010      	b.n	800bd12 <ecp_mul_comb+0x152>
            mbedtls_ecp_point_free( &T[i] );
 800bcf0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	00db      	lsls	r3, r3, #3
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	4413      	add	r3, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fd ff17 	bl	8009b36 <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 800bd08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bd16:	7e7b      	ldrb	r3, [r7, #25]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d3e9      	bcc.n	800bcf0 <ecp_mul_comb+0x130>
        mbedtls_free( T );
 800bd1c:	69f8      	ldr	r0, [r7, #28]
 800bd1e:	f008 fc29 	bl	8014574 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <ecp_mul_comb+0x16e>
        mbedtls_ecp_point_free( R );
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f7fd ff04 	bl	8009b36 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( rsm );

    return( ret );
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3728      	adds	r7, #40	; 0x28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	ffffb280 	.word	0xffffb280

0800bd3c <ecp_normalize_mxz>:
/*
 * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
 * Cost: 1M + 1I
 */
static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_mxz( grp, P ) );
#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	f103 0018 	add.w	r0, r3, #24
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	f103 0118 	add.w	r1, r3, #24
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3304      	adds	r3, #4
 800bd56:	461a      	mov	r2, r3
 800bd58:	f7fc fc02 	bl	8008560 <mbedtls_mpi_inv_mod>
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d11d      	bne.n	800bda0 <ecp_normalize_mxz+0x64>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 800bd64:	6838      	ldr	r0, [r7, #0]
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	3318      	adds	r3, #24
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	f7fb fe02 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d114      	bne.n	800bda4 <ecp_normalize_mxz+0x68>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe f836 	bl	8009df0 <ecp_modp>
 800bd84:	60f8      	str	r0, [r7, #12]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10d      	bne.n	800bda8 <ecp_normalize_mxz+0x6c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	3318      	adds	r3, #24
 800bd90:	2101      	movs	r1, #1
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7f9 fa20 	bl	80051d8 <mbedtls_mpi_lset>
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2b00      	cmp	r3, #0

cleanup:
 800bd9e:	e004      	b.n	800bdaa <ecp_normalize_mxz+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 800bda0:	bf00      	nop
 800bda2:	e002      	b.n	800bdaa <ecp_normalize_mxz+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 800bda4:	bf00      	nop
 800bda6:	e000      	b.n	800bdaa <ecp_normalize_mxz+0x6e>
 800bda8:	bf00      	nop
    return( ret );
 800bdaa:	68fb      	ldr	r3, [r7, #12]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <ecp_randomize_mxz>:
 * This countermeasure was first suggested in [2].
 * Cost: 2M
 */
static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08a      	sub	sp, #40	; 0x28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l;
    size_t p_size;
    int count = 0;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	623b      	str	r3, [r7, #32]
#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdca:	3307      	adds	r3, #7
 800bdcc:	08db      	lsrs	r3, r3, #3
 800bdce:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi_init( &l );
 800bdd0:	f107 0310 	add.w	r3, r7, #16
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7f8 ffba 	bl	8004d4e <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800bdda:	f107 0010 	add.w	r0, r7, #16
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	69f9      	ldr	r1, [r7, #28]
 800bde4:	f7fc fb70 	bl	80084c8 <mbedtls_mpi_fill_random>
 800bde8:	6278      	str	r0, [r7, #36]	; 0x24
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d151      	bne.n	800be94 <ecp_randomize_mxz+0xe0>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800bdf0:	e009      	b.n	800be06 <ecp_randomize_mxz+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800bdf2:	f107 0310 	add.w	r3, r7, #16
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7f9 fded 	bl	80059d8 <mbedtls_mpi_shift_r>
 800bdfe:	6278      	str	r0, [r7, #36]	; 0x24
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	2b00      	cmp	r3, #0
 800be04:	d148      	bne.n	800be98 <ecp_randomize_mxz+0xe4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	1d1a      	adds	r2, r3, #4
 800be0a:	f107 0310 	add.w	r3, r7, #16
 800be0e:	4611      	mov	r1, r2
 800be10:	4618      	mov	r0, r3
 800be12:	f7f9 fefe 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	daea      	bge.n	800bdf2 <ecp_randomize_mxz+0x3e>

        if( count++ > 10 )
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	623a      	str	r2, [r7, #32]
 800be22:	2b0a      	cmp	r3, #10
 800be24:	dd01      	ble.n	800be2a <ecp_randomize_mxz+0x76>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800be26:	4b25      	ldr	r3, [pc, #148]	; (800bebc <ecp_randomize_mxz+0x108>)
 800be28:	e043      	b.n	800beb2 <ecp_randomize_mxz+0xfe>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800be2a:	f107 0310 	add.w	r3, r7, #16
 800be2e:	2101      	movs	r1, #1
 800be30:	4618      	mov	r0, r3
 800be32:	f7f9 ff89 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	ddce      	ble.n	800bdda <ecp_randomize_mxz+0x26>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	68b9      	ldr	r1, [r7, #8]
 800be40:	f107 0210 	add.w	r2, r7, #16
 800be44:	4618      	mov	r0, r3
 800be46:	f7fb fd96 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800be4a:	6278      	str	r0, [r7, #36]	; 0x24
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d124      	bne.n	800be9c <ecp_randomize_mxz+0xe8>
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	68f9      	ldr	r1, [r7, #12]
 800be56:	4618      	mov	r0, r3
 800be58:	f7fd ffca 	bl	8009df0 <ecp_modp>
 800be5c:	6278      	str	r0, [r7, #36]	; 0x24
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	2b00      	cmp	r3, #0
 800be62:	d11d      	bne.n	800bea0 <ecp_randomize_mxz+0xec>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	f103 0018 	add.w	r0, r3, #24
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	3318      	adds	r3, #24
 800be6e:	f107 0210 	add.w	r2, r7, #16
 800be72:	4619      	mov	r1, r3
 800be74:	f7fb fd7f 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800be78:	6278      	str	r0, [r7, #36]	; 0x24
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d111      	bne.n	800bea4 <ecp_randomize_mxz+0xf0>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	3318      	adds	r3, #24
 800be84:	68f9      	ldr	r1, [r7, #12]
 800be86:	4618      	mov	r0, r3
 800be88:	f7fd ffb2 	bl	8009df0 <ecp_modp>
 800be8c:	6278      	str	r0, [r7, #36]	; 0x24
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	2b00      	cmp	r3, #0

cleanup:
 800be92:	e008      	b.n	800bea6 <ecp_randomize_mxz+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800be94:	bf00      	nop
 800be96:	e006      	b.n	800bea6 <ecp_randomize_mxz+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800be98:	bf00      	nop
 800be9a:	e004      	b.n	800bea6 <ecp_randomize_mxz+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 800be9c:	bf00      	nop
 800be9e:	e002      	b.n	800bea6 <ecp_randomize_mxz+0xf2>
 800bea0:	bf00      	nop
 800bea2:	e000      	b.n	800bea6 <ecp_randomize_mxz+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 800bea4:	bf00      	nop
    mbedtls_mpi_free( &l );
 800bea6:	f107 0310 	add.w	r3, r7, #16
 800beaa:	4618      	mov	r0, r3
 800beac:	f7f8 ff62 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3728      	adds	r7, #40	; 0x28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	ffffb300 	.word	0xffffb300

0800bec0 <ecp_double_add_mxz>:
 */
static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,
                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
                               const mbedtls_mpi *d )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b0a0      	sub	sp, #128	; 0x80
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d ) );
#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */

    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 800bece:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7f8 ff3b 	bl	8004d4e <mbedtls_mpi_init>
 800bed8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800bedc:	4618      	mov	r0, r3
 800bede:	f7f8 ff36 	bl	8004d4e <mbedtls_mpi_init>
 800bee2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f8 ff31 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 800beec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7f8 ff2c 	bl	8004d4e <mbedtls_mpi_init>
 800bef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800befa:	4618      	mov	r0, r3
 800befc:	f7f8 ff27 	bl	8004d4e <mbedtls_mpi_init>
 800bf00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7f8 ff22 	bl	8004d4e <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 800bf0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7f8 ff1d 	bl	8004d4e <mbedtls_mpi_init>
 800bf14:	f107 031c 	add.w	r3, r7, #28
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7f8 ff18 	bl	8004d4e <mbedtls_mpi_init>
 800bf1e:	f107 0310 	add.w	r3, r7, #16
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f8 ff13 	bl	8004d4e <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	f103 0218 	add.w	r2, r3, #24
 800bf30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fa f89a 	bl	800606e <mbedtls_mpi_add_mpi>
 800bf3a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bf3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f040 8227 	bne.w	800c392 <ecp_double_add_mxz+0x4d2>
 800bf44:	e00d      	b.n	800bf62 <ecp_double_add_mxz+0xa2>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800bf4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fa f827 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800bf58:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bf5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f040 821a 	bne.w	800c396 <ecp_double_add_mxz+0x4d6>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	1d1a      	adds	r2, r3, #4
 800bf66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7f9 fe50 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	dae6      	bge.n	800bf46 <ecp_double_add_mxz+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 800bf78:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bf7c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800bf80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fb fcf6 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800bf8a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bf8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f040 8203 	bne.w	800c39a <ecp_double_add_mxz+0x4da>
 800bf94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800bf98:	68f9      	ldr	r1, [r7, #12]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fd ff28 	bl	8009df0 <ecp_modp>
 800bfa0:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bfa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f040 81fa 	bne.w	800c39e <ecp_double_add_mxz+0x4de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f103 0218 	add.w	r2, r3, #24
 800bfb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fa f8a3 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800bfbc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bfbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f040 81ee 	bne.w	800c3a2 <ecp_double_add_mxz+0x4e2>
 800bfc6:	e00d      	b.n	800bfe4 <ecp_double_add_mxz+0x124>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	1d1a      	adds	r2, r3, #4
 800bfcc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bfd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7fa f84a 	bl	800606e <mbedtls_mpi_add_mpi>
 800bfda:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bfdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f040 81e1 	bne.w	800c3a6 <ecp_double_add_mxz+0x4e6>
 800bfe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	da08      	bge.n	800bffc <ecp_double_add_mxz+0x13c>
 800bfea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bfee:	2100      	movs	r1, #0
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7f9 fea9 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e5      	bne.n	800bfc8 <ecp_double_add_mxz+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 800bffc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c000:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fb fcb4 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c00e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c012:	2b00      	cmp	r3, #0
 800c014:	f040 81c9 	bne.w	800c3aa <ecp_double_add_mxz+0x4ea>
 800c018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c01c:	68f9      	ldr	r1, [r7, #12]
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fd fee6 	bl	8009df0 <ecp_modp>
 800c024:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f040 81c0 	bne.w	800c3ae <ecp_double_add_mxz+0x4ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 800c02e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800c032:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800c036:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fa f861 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800c040:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c044:	2b00      	cmp	r3, #0
 800c046:	f040 81b4 	bne.w	800c3b2 <ecp_double_add_mxz+0x4f2>
 800c04a:	e00d      	b.n	800c068 <ecp_double_add_mxz+0x1a8>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	1d1a      	adds	r2, r3, #4
 800c050:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c054:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fa f808 	bl	800606e <mbedtls_mpi_add_mpi>
 800c05e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c062:	2b00      	cmp	r3, #0
 800c064:	f040 81a7 	bne.w	800c3b6 <ecp_double_add_mxz+0x4f6>
 800c068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da08      	bge.n	800c080 <ecp_double_add_mxz+0x1c0>
 800c06e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c072:	2100      	movs	r1, #0
 800c074:	4618      	mov	r0, r3
 800c076:	f7f9 fe67 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e5      	bne.n	800c04c <ecp_double_add_mxz+0x18c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 800c080:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800c084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c088:	f103 0218 	add.w	r2, r3, #24
 800c08c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c090:	4618      	mov	r0, r3
 800c092:	f7f9 ffec 	bl	800606e <mbedtls_mpi_add_mpi>
 800c096:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f040 818d 	bne.w	800c3ba <ecp_double_add_mxz+0x4fa>
 800c0a0:	e00d      	b.n	800c0be <ecp_double_add_mxz+0x1fe>
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	1d1a      	adds	r2, r3, #4
 800c0a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800c0aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7f9 ff79 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800c0b4:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c0b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f040 8180 	bne.w	800c3be <ecp_double_add_mxz+0x4fe>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	1d1a      	adds	r2, r3, #4
 800c0c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7f9 fda2 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dae6      	bge.n	800c0a2 <ecp_double_add_mxz+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 800c0d4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800c0d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0dc:	f103 0218 	add.w	r2, r3, #24
 800c0e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fa f80c 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800c0ea:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c0ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f040 8167 	bne.w	800c3c2 <ecp_double_add_mxz+0x502>
 800c0f4:	e00d      	b.n	800c112 <ecp_double_add_mxz+0x252>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	1d1a      	adds	r2, r3, #4
 800c0fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c0fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c102:	4618      	mov	r0, r3
 800c104:	f7f9 ffb3 	bl	800606e <mbedtls_mpi_add_mpi>
 800c108:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c10a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 815a 	bne.w	800c3c6 <ecp_double_add_mxz+0x506>
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	2b00      	cmp	r3, #0
 800c116:	da08      	bge.n	800c12a <ecp_double_add_mxz+0x26a>
 800c118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c11c:	2100      	movs	r1, #0
 800c11e:	4618      	mov	r0, r3
 800c120:	f7f9 fe12 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1e5      	bne.n	800c0f6 <ecp_double_add_mxz+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 800c12a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c12e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c132:	f107 031c 	add.w	r3, r7, #28
 800c136:	4618      	mov	r0, r3
 800c138:	f7fb fc1d 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c13c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c13e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c140:	2b00      	cmp	r3, #0
 800c142:	f040 8142 	bne.w	800c3ca <ecp_double_add_mxz+0x50a>
 800c146:	f107 031c 	add.w	r3, r7, #28
 800c14a:	68f9      	ldr	r1, [r7, #12]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fd fe4f 	bl	8009df0 <ecp_modp>
 800c152:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c156:	2b00      	cmp	r3, #0
 800c158:	f040 8139 	bne.w	800c3ce <ecp_double_add_mxz+0x50e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 800c15c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c160:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800c164:	f107 0310 	add.w	r3, r7, #16
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fb fc04 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c16e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c172:	2b00      	cmp	r3, #0
 800c174:	f040 812d 	bne.w	800c3d2 <ecp_double_add_mxz+0x512>
 800c178:	f107 0310 	add.w	r3, r7, #16
 800c17c:	68f9      	ldr	r1, [r7, #12]
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fd fe36 	bl	8009df0 <ecp_modp>
 800c184:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f040 8124 	bne.w	800c3d6 <ecp_double_add_mxz+0x516>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f107 0210 	add.w	r2, r7, #16
 800c194:	f107 011c 	add.w	r1, r7, #28
 800c198:	4618      	mov	r0, r3
 800c19a:	f7f9 ff68 	bl	800606e <mbedtls_mpi_add_mpi>
 800c19e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c1a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f040 8119 	bne.w	800c3da <ecp_double_add_mxz+0x51a>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fd fe1f 	bl	8009df0 <ecp_modp>
 800c1b2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c1b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f040 8111 	bne.w	800c3de <ecp_double_add_mxz+0x51e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fb fbd7 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c1c8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c1ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f040 8108 	bne.w	800c3e2 <ecp_double_add_mxz+0x522>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68f9      	ldr	r1, [r7, #12]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fd fe0a 	bl	8009df0 <ecp_modp>
 800c1dc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c1de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f040 8100 	bne.w	800c3e6 <ecp_double_add_mxz+0x526>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3318      	adds	r3, #24
 800c1ea:	f107 0210 	add.w	r2, r7, #16
 800c1ee:	f107 011c 	add.w	r1, r7, #28
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f9 ff85 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800c1f8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c1fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f040 80f4 	bne.w	800c3ea <ecp_double_add_mxz+0x52a>
 800c202:	e00f      	b.n	800c224 <ecp_double_add_mxz+0x364>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f103 0018 	add.w	r0, r3, #24
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f103 0118 	add.w	r1, r3, #24
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3304      	adds	r3, #4
 800c214:	461a      	mov	r2, r3
 800c216:	f7f9 ff2a 	bl	800606e <mbedtls_mpi_add_mpi>
 800c21a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c21c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f040 80e5 	bne.w	800c3ee <ecp_double_add_mxz+0x52e>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	da08      	bge.n	800c23e <ecp_double_add_mxz+0x37e>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3318      	adds	r3, #24
 800c230:	2100      	movs	r1, #0
 800c232:	4618      	mov	r0, r3
 800c234:	f7f9 fd88 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1e2      	bne.n	800c204 <ecp_double_add_mxz+0x344>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f103 0018 	add.w	r0, r3, #24
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f103 0118 	add.w	r1, r3, #24
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3318      	adds	r3, #24
 800c24e:	461a      	mov	r2, r3
 800c250:	f7fb fb91 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c254:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f040 80ca 	bne.w	800c3f2 <ecp_double_add_mxz+0x532>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3318      	adds	r3, #24
 800c262:	68f9      	ldr	r1, [r7, #12]
 800c264:	4618      	mov	r0, r3
 800c266:	f7fd fdc3 	bl	8009df0 <ecp_modp>
 800c26a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c26c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f040 80c1 	bne.w	800c3f6 <ecp_double_add_mxz+0x536>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f103 0018 	add.w	r0, r3, #24
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3318      	adds	r3, #24
 800c27e:	461a      	mov	r2, r3
 800c280:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c284:	f7fb fb77 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c288:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c28a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f040 80b4 	bne.w	800c3fa <ecp_double_add_mxz+0x53a>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3318      	adds	r3, #24
 800c296:	68f9      	ldr	r1, [r7, #12]
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fd fda9 	bl	8009df0 <ecp_modp>
 800c29e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c2a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f040 80ab 	bne.w	800c3fe <ecp_double_add_mxz+0x53e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800c2ae:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fb fb5f 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c2b8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c2ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f040 80a0 	bne.w	800c402 <ecp_double_add_mxz+0x542>
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	68f9      	ldr	r1, [r7, #12]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fd fd92 	bl	8009df0 <ecp_modp>
 800c2cc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c2ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f040 8098 	bne.w	800c406 <ecp_double_add_mxz+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f103 0018 	add.w	r0, r3, #24
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	3310      	adds	r3, #16
 800c2e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	f7fb fb46 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c2ea:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c2ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f040 808b 	bne.w	800c40a <ecp_double_add_mxz+0x54a>
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	3318      	adds	r3, #24
 800c2f8:	68f9      	ldr	r1, [r7, #12]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fd fd78 	bl	8009df0 <ecp_modp>
 800c300:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c304:	2b00      	cmp	r3, #0
 800c306:	f040 8082 	bne.w	800c40e <ecp_double_add_mxz+0x54e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f103 0018 	add.w	r0, r3, #24
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f103 0218 	add.w	r2, r3, #24
 800c316:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c31a:	4619      	mov	r1, r3
 800c31c:	f7f9 fea7 	bl	800606e <mbedtls_mpi_add_mpi>
 800c320:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c324:	2b00      	cmp	r3, #0
 800c326:	d174      	bne.n	800c412 <ecp_double_add_mxz+0x552>
 800c328:	e00e      	b.n	800c348 <ecp_double_add_mxz+0x488>
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f103 0018 	add.w	r0, r3, #24
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	f103 0118 	add.w	r1, r3, #24
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3304      	adds	r3, #4
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7f9 fe33 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800c340:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d166      	bne.n	800c416 <ecp_double_add_mxz+0x556>
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	f103 0218 	add.w	r2, r3, #24
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	3304      	adds	r3, #4
 800c352:	4619      	mov	r1, r3
 800c354:	4610      	mov	r0, r2
 800c356:	f7f9 fc5c 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	dae4      	bge.n	800c32a <ecp_double_add_mxz+0x46a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f103 0018 	add.w	r0, r3, #24
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f103 0218 	add.w	r2, r3, #24
 800c36c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c370:	4619      	mov	r1, r3
 800c372:	f7fb fb00 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c376:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d14d      	bne.n	800c41a <ecp_double_add_mxz+0x55a>
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	3318      	adds	r3, #24
 800c382:	68f9      	ldr	r1, [r7, #12]
 800c384:	4618      	mov	r0, r3
 800c386:	f7fd fd33 	bl	8009df0 <ecp_modp>
 800c38a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c38c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c38e:	2b00      	cmp	r3, #0

cleanup:
 800c390:	e044      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 800c392:	bf00      	nop
 800c394:	e042      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c396:	bf00      	nop
 800c398:	e040      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 800c39a:	bf00      	nop
 800c39c:	e03e      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c39e:	bf00      	nop
 800c3a0:	e03c      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 800c3a2:	bf00      	nop
 800c3a4:	e03a      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3a6:	bf00      	nop
 800c3a8:	e038      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 800c3aa:	bf00      	nop
 800c3ac:	e036      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3ae:	bf00      	nop
 800c3b0:	e034      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 800c3b2:	bf00      	nop
 800c3b4:	e032      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3b6:	bf00      	nop
 800c3b8:	e030      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 800c3ba:	bf00      	nop
 800c3bc:	e02e      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3be:	bf00      	nop
 800c3c0:	e02c      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 800c3c2:	bf00      	nop
 800c3c4:	e02a      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3c6:	bf00      	nop
 800c3c8:	e028      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 800c3ca:	bf00      	nop
 800c3cc:	e026      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3ce:	bf00      	nop
 800c3d0:	e024      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 800c3d2:	bf00      	nop
 800c3d4:	e022      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3d6:	bf00      	nop
 800c3d8:	e020      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 800c3da:	bf00      	nop
 800c3dc:	e01e      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3de:	bf00      	nop
 800c3e0:	e01c      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 800c3e2:	bf00      	nop
 800c3e4:	e01a      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3e6:	bf00      	nop
 800c3e8:	e018      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 800c3ea:	bf00      	nop
 800c3ec:	e016      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3ee:	bf00      	nop
 800c3f0:	e014      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 800c3f2:	bf00      	nop
 800c3f4:	e012      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3f6:	bf00      	nop
 800c3f8:	e010      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 800c3fa:	bf00      	nop
 800c3fc:	e00e      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c3fe:	bf00      	nop
 800c400:	e00c      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 800c402:	bf00      	nop
 800c404:	e00a      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c406:	bf00      	nop
 800c408:	e008      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 800c40a:	bf00      	nop
 800c40c:	e006      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c40e:	bf00      	nop
 800c410:	e004      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 800c412:	bf00      	nop
 800c414:	e002      	b.n	800c41c <ecp_double_add_mxz+0x55c>
 800c416:	bf00      	nop
 800c418:	e000      	b.n	800c41c <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 800c41a:	bf00      	nop
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 800c41c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c420:	4618      	mov	r0, r3
 800c422:	f7f8 fca7 	bl	8004d74 <mbedtls_mpi_free>
 800c426:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7f8 fca2 	bl	8004d74 <mbedtls_mpi_free>
 800c430:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c434:	4618      	mov	r0, r3
 800c436:	f7f8 fc9d 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 800c43a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c43e:	4618      	mov	r0, r3
 800c440:	f7f8 fc98 	bl	8004d74 <mbedtls_mpi_free>
 800c444:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c448:	4618      	mov	r0, r3
 800c44a:	f7f8 fc93 	bl	8004d74 <mbedtls_mpi_free>
 800c44e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c452:	4618      	mov	r0, r3
 800c454:	f7f8 fc8e 	bl	8004d74 <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 800c458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f8 fc89 	bl	8004d74 <mbedtls_mpi_free>
 800c462:	f107 031c 	add.w	r3, r7, #28
 800c466:	4618      	mov	r0, r3
 800c468:	f7f8 fc84 	bl	8004d74 <mbedtls_mpi_free>
 800c46c:	f107 0310 	add.w	r3, r7, #16
 800c470:	4618      	mov	r0, r3
 800c472:	f7f8 fc7f 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800c476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3780      	adds	r7, #128	; 0x80
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <ecp_mul_mxz>:
 */
static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b096      	sub	sp, #88	; 0x58
 800c484:	af02      	add	r7, sp, #8
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
    size_t i;
    unsigned char b;
    mbedtls_ecp_point RP;
    mbedtls_mpi PX;

    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 800c48e:	f107 0320 	add.w	r3, r7, #32
 800c492:	4618      	mov	r0, r3
 800c494:	f7fd fae4 	bl	8009a60 <mbedtls_ecp_point_init>
 800c498:	f107 0314 	add.w	r3, r7, #20
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7f8 fc56 	bl	8004d4e <mbedtls_mpi_init>

    /* Save PX and read from P before writing to R, in case P == R */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	f107 0314 	add.w	r3, r7, #20
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f8 fd31 	bl	8004f12 <mbedtls_mpi_copy>
 800c4b0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f040 80ad 	bne.w	800c614 <ecp_mul_mxz+0x194>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 800c4ba:	f107 0320 	add.w	r3, r7, #32
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fd fbb8 	bl	8009c36 <mbedtls_ecp_copy>
 800c4c6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f040 80a4 	bne.w	800c618 <ecp_mul_mxz+0x198>

    /* Set R to zero in modified x/z coordinates */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2101      	movs	r1, #1
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7f8 fe7f 	bl	80051d8 <mbedtls_mpi_lset>
 800c4da:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 809c 	bne.w	800c61c <ecp_mul_mxz+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	3318      	adds	r3, #24
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7f8 fe74 	bl	80051d8 <mbedtls_mpi_lset>
 800c4f0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f040 8093 	bne.w	800c620 <ecp_mul_mxz+0x1a0>
    mbedtls_mpi_free( &R->Y );
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	330c      	adds	r3, #12
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f8 fc38 	bl	8004d74 <mbedtls_mpi_free>

    /* RP.X might be sligtly larger than P, so reduce it */
    MOD_ADD( RP.X );
 800c504:	e00d      	b.n	800c522 <ecp_mul_mxz+0xa2>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	1d1a      	adds	r2, r3, #4
 800c50a:	f107 0120 	add.w	r1, r7, #32
 800c50e:	f107 0320 	add.w	r3, r7, #32
 800c512:	4618      	mov	r0, r3
 800c514:	f7f9 fd47 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800c518:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f040 8081 	bne.w	800c624 <ecp_mul_mxz+0x1a4>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	1d1a      	adds	r2, r3, #4
 800c526:	f107 0320 	add.w	r3, r7, #32
 800c52a:	4611      	mov	r1, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7f9 fb70 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	dae6      	bge.n	800c506 <ecp_mul_mxz+0x86>

    /* Randomize coordinates of the starting point */
    if( f_rng != NULL )
 800c538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00a      	beq.n	800c554 <ecp_mul_mxz+0xd4>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 800c53e:	f107 0120 	add.w	r1, r7, #32
 800c542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f7ff fc34 	bl	800bdb4 <ecp_randomize_mxz>
 800c54c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d169      	bne.n	800c628 <ecp_mul_mxz+0x1a8>

    /* Loop invariant: R = result so far, RP = R + P */
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7f8 ff39 	bl	80053cc <mbedtls_mpi_bitlen>
 800c55a:	64b8      	str	r0, [r7, #72]	; 0x48
    while( i-- > 0 )
 800c55c:	e04d      	b.n	800c5fa <ecp_mul_mxz+0x17a>
    {
        b = mbedtls_mpi_get_bit( m, i );
 800c55e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7f8 fe67 	bl	8005234 <mbedtls_mpi_get_bit>
 800c566:	4603      	mov	r3, r0
 800c568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * which is:
         *  if (b) double_add( RP, R, RP, R )
         *  else   double_add( R, RP, R, RP )
         * but using safe conditional swaps to avoid leaks
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c572:	f107 0120 	add.w	r1, r7, #32
 800c576:	4618      	mov	r0, r3
 800c578:	f7f8 fd99 	bl	80050ae <mbedtls_mpi_safe_cond_swap>
 800c57c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c580:	2b00      	cmp	r3, #0
 800c582:	d153      	bne.n	800c62c <ecp_mul_mxz+0x1ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	f103 0018 	add.w	r0, r3, #24
 800c58a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c58e:	f107 0320 	add.w	r3, r7, #32
 800c592:	3318      	adds	r3, #24
 800c594:	4619      	mov	r1, r3
 800c596:	f7f8 fd8a 	bl	80050ae <mbedtls_mpi_safe_cond_swap>
 800c59a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d146      	bne.n	800c630 <ecp_mul_mxz+0x1b0>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 800c5a2:	f107 0220 	add.w	r2, r7, #32
 800c5a6:	f107 0314 	add.w	r3, r7, #20
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	f107 0320 	add.w	r3, r7, #32
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	68b9      	ldr	r1, [r7, #8]
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f7ff fc82 	bl	800bec0 <ecp_double_add_mxz>
 800c5bc:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d137      	bne.n	800c634 <ecp_mul_mxz+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c5ca:	f107 0120 	add.w	r1, r7, #32
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7f8 fd6d 	bl	80050ae <mbedtls_mpi_safe_cond_swap>
 800c5d4:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d12d      	bne.n	800c638 <ecp_mul_mxz+0x1b8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	f103 0018 	add.w	r0, r3, #24
 800c5e2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c5e6:	f107 0320 	add.w	r3, r7, #32
 800c5ea:	3318      	adds	r3, #24
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f7f8 fd5e 	bl	80050ae <mbedtls_mpi_safe_cond_swap>
 800c5f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d120      	bne.n	800c63c <ecp_mul_mxz+0x1bc>
    while( i-- > 0 )
 800c5fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5fc:	1e5a      	subs	r2, r3, #1
 800c5fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1ac      	bne.n	800c55e <ecp_mul_mxz+0xde>
    }

    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
 800c604:	68b9      	ldr	r1, [r7, #8]
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f7ff fb98 	bl	800bd3c <ecp_normalize_mxz>
 800c60c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c610:	2b00      	cmp	r3, #0

cleanup:
 800c612:	e014      	b.n	800c63e <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 800c614:	bf00      	nop
 800c616:	e012      	b.n	800c63e <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 800c618:	bf00      	nop
 800c61a:	e010      	b.n	800c63e <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 800c61c:	bf00      	nop
 800c61e:	e00e      	b.n	800c63e <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 800c620:	bf00      	nop
 800c622:	e00c      	b.n	800c63e <ecp_mul_mxz+0x1be>
    MOD_ADD( RP.X );
 800c624:	bf00      	nop
 800c626:	e00a      	b.n	800c63e <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 800c628:	bf00      	nop
 800c62a:	e008      	b.n	800c63e <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800c62c:	bf00      	nop
 800c62e:	e006      	b.n	800c63e <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800c630:	bf00      	nop
 800c632:	e004      	b.n	800c63e <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 800c634:	bf00      	nop
 800c636:	e002      	b.n	800c63e <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800c638:	bf00      	nop
 800c63a:	e000      	b.n	800c63e <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800c63c:	bf00      	nop
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 800c63e:	f107 0320 	add.w	r3, r7, #32
 800c642:	4618      	mov	r0, r3
 800c644:	f7fd fa77 	bl	8009b36 <mbedtls_ecp_point_free>
 800c648:	f107 0314 	add.w	r3, r7, #20
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7f8 fb91 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800c652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c654:	4618      	mov	r0, r3
 800c656:	3750      	adds	r7, #80	; 0x50
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	; 0x28
 800c660:	af04      	add	r7, sp, #16
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800c66a:	4b25      	ldr	r3, [pc, #148]	; (800c700 <mbedtls_ecp_mul_restartable+0xa4>)
 800c66c:	617b      	str	r3, [r7, #20]
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f000 fa87 	bl	800cb84 <mbedtls_ecp_check_privkey>
 800c676:	6178      	str	r0, [r7, #20]
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d133      	bne.n	800c6e6 <mbedtls_ecp_mul_restartable+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 fa4d 	bl	800cb20 <mbedtls_ecp_check_pubkey>
 800c686:	6178      	str	r0, [r7, #20]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d12d      	bne.n	800c6ea <mbedtls_ecp_mul_restartable+0x8e>
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800c68e:	4b1c      	ldr	r3, [pc, #112]	; (800c700 <mbedtls_ecp_mul_restartable+0xa4>)
 800c690:	617b      	str	r3, [r7, #20]
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7fd f9cd 	bl	8009a32 <ecp_get_type>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d10d      	bne.n	800c6ba <mbedtls_ecp_mul_restartable+0x5e>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f7ff fee7 	bl	800c480 <ecp_mul_mxz>
 800c6b2:	6178      	str	r0, [r7, #20]
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d119      	bne.n	800c6ee <mbedtls_ecp_mul_restartable+0x92>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f7fd f9b9 	bl	8009a32 <ecp_get_type>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d115      	bne.n	800c6f2 <mbedtls_ecp_mul_restartable+0x96>
        MBEDTLS_MPI_CHK( ecp_mul_comb( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	9302      	str	r3, [sp, #8]
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6cc:	9301      	str	r3, [sp, #4]
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	68b9      	ldr	r1, [r7, #8]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7ff fa71 	bl	800bbc0 <ecp_mul_comb>
 800c6de:	6178      	str	r0, [r7, #20]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2b00      	cmp	r3, #0
#endif

cleanup:
 800c6e4:	e005      	b.n	800c6f2 <mbedtls_ecp_mul_restartable+0x96>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800c6e6:	bf00      	nop
 800c6e8:	e004      	b.n	800c6f4 <mbedtls_ecp_mul_restartable+0x98>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800c6ea:	bf00      	nop
 800c6ec:	e002      	b.n	800c6f4 <mbedtls_ecp_mul_restartable+0x98>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 800c6ee:	bf00      	nop
 800c6f0:	e000      	b.n	800c6f4 <mbedtls_ecp_mul_restartable+0x98>
cleanup:
 800c6f2:	bf00      	nop
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 800c6f4:	697b      	ldr	r3, [r7, #20]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	ffffb080 	.word	0xffffb080

0800c704 <mbedtls_ecp_mul>:
 * Multiplication R = m * P
 */
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af04      	add	r7, sp, #16
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 800c712:	2300      	movs	r3, #0
 800c714:	9302      	str	r3, [sp, #8]
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f7ff ff99 	bl	800c65c <mbedtls_ecp_mul_restartable>
 800c72a:	4603      	mov	r3, r0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <ecp_check_pubkey_sw>:
/*
 * Check that an affine point is valid as a public key,
 * short weierstrass curves (SEC1 3.2.3.1)
 */
static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b08a      	sub	sp, #40	; 0x28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2100      	movs	r1, #0
 800c742:	4618      	mov	r0, r3
 800c744:	f7f9 fb00 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	db1e      	blt.n	800c78c <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	330c      	adds	r3, #12
 800c752:	2100      	movs	r1, #0
 800c754:	4618      	mov	r0, r3
 800c756:	f7f9 faf7 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c75a:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	db15      	blt.n	800c78c <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3304      	adds	r3, #4
 800c766:	4619      	mov	r1, r3
 800c768:	4610      	mov	r0, r2
 800c76a:	f7f9 fa52 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c76e:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800c770:	2b00      	cmp	r3, #0
 800c772:	da0b      	bge.n	800c78c <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	f103 020c 	add.w	r2, r3, #12
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	3304      	adds	r3, #4
 800c77e:	4619      	mov	r1, r3
 800c780:	4610      	mov	r0, r2
 800c782:	f7f9 fa46 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c786:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800c788:	2b00      	cmp	r3, #0
 800c78a:	db01      	blt.n	800c790 <ecp_check_pubkey_sw+0x5c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800c78c:	4b82      	ldr	r3, [pc, #520]	; (800c998 <ecp_check_pubkey_sw+0x264>)
 800c78e:	e0fe      	b.n	800c98e <ecp_check_pubkey_sw+0x25a>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 800c790:	f107 0318 	add.w	r3, r7, #24
 800c794:	4618      	mov	r0, r3
 800c796:	f7f8 fada 	bl	8004d4e <mbedtls_mpi_init>
 800c79a:	f107 030c 	add.w	r3, r7, #12
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7f8 fad5 	bl	8004d4e <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	f103 010c 	add.w	r1, r3, #12
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	f103 020c 	add.w	r2, r3, #12
 800c7b0:	f107 0318 	add.w	r3, r7, #24
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fb f8de 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c7ba:	6278      	str	r0, [r7, #36]	; 0x24
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f040 80c1 	bne.w	800c946 <ecp_check_pubkey_sw+0x212>
 800c7c4:	f107 0318 	add.w	r3, r7, #24
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fd fb10 	bl	8009df0 <ecp_modp>
 800c7d0:	6278      	str	r0, [r7, #36]	; 0x24
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f040 80b8 	bne.w	800c94a <ecp_check_pubkey_sw+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	f107 030c 	add.w	r3, r7, #12
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fb f8c7 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c7e8:	6278      	str	r0, [r7, #36]	; 0x24
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f040 80ae 	bne.w	800c94e <ecp_check_pubkey_sw+0x21a>
 800c7f2:	f107 030c 	add.w	r3, r7, #12
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fd faf9 	bl	8009df0 <ecp_modp>
 800c7fe:	6278      	str	r0, [r7, #36]	; 0x24
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	2b00      	cmp	r3, #0
 800c804:	f040 80a5 	bne.w	800c952 <ecp_check_pubkey_sw+0x21e>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	699b      	ldr	r3, [r3, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d128      	bne.n	800c862 <ecp_check_pubkey_sw+0x12e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800c810:	f107 010c 	add.w	r1, r7, #12
 800c814:	f107 030c 	add.w	r3, r7, #12
 800c818:	2203      	movs	r2, #3
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7f9 fcdf 	bl	80061de <mbedtls_mpi_sub_int>
 800c820:	6278      	str	r0, [r7, #36]	; 0x24
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	2b00      	cmp	r3, #0
 800c826:	f040 8096 	bne.w	800c956 <ecp_check_pubkey_sw+0x222>
 800c82a:	e00d      	b.n	800c848 <ecp_check_pubkey_sw+0x114>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	1d1a      	adds	r2, r3, #4
 800c830:	f107 010c 	add.w	r1, r7, #12
 800c834:	f107 030c 	add.w	r3, r7, #12
 800c838:	4618      	mov	r0, r3
 800c83a:	f7f9 fc18 	bl	800606e <mbedtls_mpi_add_mpi>
 800c83e:	6278      	str	r0, [r7, #36]	; 0x24
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	2b00      	cmp	r3, #0
 800c844:	f040 8089 	bne.w	800c95a <ecp_check_pubkey_sw+0x226>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	da30      	bge.n	800c8b0 <ecp_check_pubkey_sw+0x17c>
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	2100      	movs	r1, #0
 800c854:	4618      	mov	r0, r3
 800c856:	f7f9 fa77 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e5      	bne.n	800c82c <ecp_check_pubkey_sw+0xf8>
 800c860:	e026      	b.n	800c8b0 <ecp_check_pubkey_sw+0x17c>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f103 0210 	add.w	r2, r3, #16
 800c868:	f107 010c 	add.w	r1, r7, #12
 800c86c:	f107 030c 	add.w	r3, r7, #12
 800c870:	4618      	mov	r0, r3
 800c872:	f7f9 fbfc 	bl	800606e <mbedtls_mpi_add_mpi>
 800c876:	6278      	str	r0, [r7, #36]	; 0x24
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d16f      	bne.n	800c95e <ecp_check_pubkey_sw+0x22a>
 800c87e:	e00c      	b.n	800c89a <ecp_check_pubkey_sw+0x166>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	1d1a      	adds	r2, r3, #4
 800c884:	f107 010c 	add.w	r1, r7, #12
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7f9 fb8a 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800c892:	6278      	str	r0, [r7, #36]	; 0x24
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	2b00      	cmp	r3, #0
 800c898:	d163      	bne.n	800c962 <ecp_check_pubkey_sw+0x22e>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	1d1a      	adds	r2, r3, #4
 800c89e:	f107 030c 	add.w	r3, r7, #12
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7f9 f9b4 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	dae7      	bge.n	800c880 <ecp_check_pubkey_sw+0x14c>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	f107 010c 	add.w	r1, r7, #12
 800c8b6:	f107 030c 	add.w	r3, r7, #12
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fb f85b 	bl	8007976 <mbedtls_mpi_mul_mpi>
 800c8c0:	6278      	str	r0, [r7, #36]	; 0x24
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d14e      	bne.n	800c966 <ecp_check_pubkey_sw+0x232>
 800c8c8:	f107 030c 	add.w	r3, r7, #12
 800c8cc:	6879      	ldr	r1, [r7, #4]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fd fa8e 	bl	8009df0 <ecp_modp>
 800c8d4:	6278      	str	r0, [r7, #36]	; 0x24
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d146      	bne.n	800c96a <ecp_check_pubkey_sw+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f103 021c 	add.w	r2, r3, #28
 800c8e2:	f107 010c 	add.w	r1, r7, #12
 800c8e6:	f107 030c 	add.w	r3, r7, #12
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7f9 fbbf 	bl	800606e <mbedtls_mpi_add_mpi>
 800c8f0:	6278      	str	r0, [r7, #36]	; 0x24
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d13a      	bne.n	800c96e <ecp_check_pubkey_sw+0x23a>
 800c8f8:	e00c      	b.n	800c914 <ecp_check_pubkey_sw+0x1e0>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	1d1a      	adds	r2, r3, #4
 800c8fe:	f107 010c 	add.w	r1, r7, #12
 800c902:	f107 030c 	add.w	r3, r7, #12
 800c906:	4618      	mov	r0, r3
 800c908:	f7f9 fb4d 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800c90c:	6278      	str	r0, [r7, #36]	; 0x24
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	2b00      	cmp	r3, #0
 800c912:	d12e      	bne.n	800c972 <ecp_check_pubkey_sw+0x23e>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	1d1a      	adds	r2, r3, #4
 800c918:	f107 030c 	add.w	r3, r7, #12
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f7f9 f977 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	dae7      	bge.n	800c8fa <ecp_check_pubkey_sw+0x1c6>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 800c92a:	f107 020c 	add.w	r2, r7, #12
 800c92e:	f107 0318 	add.w	r3, r7, #24
 800c932:	4611      	mov	r1, r2
 800c934:	4618      	mov	r0, r3
 800c936:	f7f9 f96c 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d01a      	beq.n	800c976 <ecp_check_pubkey_sw+0x242>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 800c940:	4b15      	ldr	r3, [pc, #84]	; (800c998 <ecp_check_pubkey_sw+0x264>)
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
 800c944:	e018      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 800c946:	bf00      	nop
 800c948:	e016      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
 800c94a:	bf00      	nop
 800c94c:	e014      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 800c94e:	bf00      	nop
 800c950:	e012      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
 800c952:	bf00      	nop
 800c954:	e010      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800c956:	bf00      	nop
 800c958:	e00e      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
 800c95a:	bf00      	nop
 800c95c:	e00c      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 800c95e:	bf00      	nop
 800c960:	e00a      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
 800c962:	bf00      	nop
 800c964:	e008      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 800c966:	bf00      	nop
 800c968:	e006      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
 800c96a:	bf00      	nop
 800c96c:	e004      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 800c96e:	bf00      	nop
 800c970:	e002      	b.n	800c978 <ecp_check_pubkey_sw+0x244>
 800c972:	bf00      	nop
 800c974:	e000      	b.n	800c978 <ecp_check_pubkey_sw+0x244>

cleanup:
 800c976:	bf00      	nop

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 800c978:	f107 0318 	add.w	r3, r7, #24
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7f8 f9f9 	bl	8004d74 <mbedtls_mpi_free>
 800c982:	f107 030c 	add.w	r3, r7, #12
 800c986:	4618      	mov	r0, r3
 800c988:	f7f8 f9f4 	bl	8004d74 <mbedtls_mpi_free>

    return( ret );
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3728      	adds	r7, #40	; 0x28
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	ffffb380 	.word	0xffffb380

0800c99c <mbedtls_ecp_mul_shortcuts>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08a      	sub	sp, #40	; 0x28
 800c9a0:	af04      	add	r7, sp, #16
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
 800c9a8:	603b      	str	r3, [r7, #0]
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 800c9aa:	2101      	movs	r1, #1
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7f9 f9cb 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d107      	bne.n	800c9c8 <mbedtls_ecp_mul_shortcuts+0x2c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800c9b8:	6839      	ldr	r1, [r7, #0]
 800c9ba:	68b8      	ldr	r0, [r7, #8]
 800c9bc:	f7fd f93b 	bl	8009c36 <mbedtls_ecp_copy>
 800c9c0:	6178      	str	r0, [r7, #20]
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	e037      	b.n	800ca38 <mbedtls_ecp_mul_shortcuts+0x9c>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 800c9c8:	f04f 31ff 	mov.w	r1, #4294967295
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7f9 f9bb 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d11e      	bne.n	800ca16 <mbedtls_ecp_mul_shortcuts+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	68b8      	ldr	r0, [r7, #8]
 800c9dc:	f7fd f92b 	bl	8009c36 <mbedtls_ecp_copy>
 800c9e0:	6178      	str	r0, [r7, #20]
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d126      	bne.n	800ca36 <mbedtls_ecp_mul_shortcuts+0x9a>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	330c      	adds	r3, #12
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7f9 f9aa 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d01e      	beq.n	800ca38 <mbedtls_ecp_mul_shortcuts+0x9c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f103 000c 	add.w	r0, r3, #12
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	1d19      	adds	r1, r3, #4
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	330c      	adds	r3, #12
 800ca08:	461a      	mov	r2, r3
 800ca0a:	f7f9 fb7a 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800ca0e:	6178      	str	r0, [r7, #20]
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	e010      	b.n	800ca38 <mbedtls_ecp_mul_shortcuts+0x9c>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9301      	str	r3, [sp, #4]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	68b9      	ldr	r1, [r7, #8]
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f7ff fe17 	bl	800c65c <mbedtls_ecp_mul_restartable>
 800ca2e:	6178      	str	r0, [r7, #20]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	2b00      	cmp	r3, #0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
 800ca34:	e000      	b.n	800ca38 <mbedtls_ecp_mul_shortcuts+0x9c>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800ca36:	bf00      	nop
    return( ret );
 800ca38:	697b      	ldr	r3, [r7, #20]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3718      	adds	r7, #24
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
	...

0800ca44 <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b092      	sub	sp, #72	; 0x48
 800ca48:	af02      	add	r7, sp, #8
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_ecp_point mP;
    mbedtls_ecp_point *pmP = &mP;
 800ca52:	f107 0310 	add.w	r3, r7, #16
 800ca56:	63bb      	str	r3, [r7, #56]	; 0x38
    mbedtls_ecp_point *pR = R;
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	637b      	str	r3, [r7, #52]	; 0x34
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f7fc ffe8 	bl	8009a32 <ecp_get_type>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d001      	beq.n	800ca6c <mbedtls_ecp_muladd_restartable+0x28>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800ca68:	4b1f      	ldr	r3, [pc, #124]	; (800cae8 <mbedtls_ecp_muladd_restartable+0xa4>)
 800ca6a:	e039      	b.n	800cae0 <mbedtls_ecp_muladd_restartable+0x9c>

    mbedtls_ecp_point_init( &mP );
 800ca6c:	f107 0310 	add.w	r3, r7, #16
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fc fff5 	bl	8009a60 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 800ca76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f7ff ff8b 	bl	800c99c <mbedtls_ecp_mul_shortcuts>
 800ca86:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ca88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d11d      	bne.n	800caca <mbedtls_ecp_muladd_restartable+0x86>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 800ca8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f7ff ff7f 	bl	800c99c <mbedtls_ecp_mul_shortcuts>
 800ca9e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800caa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d113      	bne.n	800cace <mbedtls_ecp_muladd_restartable+0x8a>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 800caa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7fe f8e9 	bl	800ac84 <ecp_add_mixed>
 800cab2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10b      	bne.n	800cad2 <mbedtls_ecp_muladd_restartable+0x8e>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 800caba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f7fd fa01 	bl	8009ec4 <ecp_normalize_jac>
 800cac2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac6:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, pR ) );
#endif

cleanup:
 800cac8:	e004      	b.n	800cad4 <mbedtls_ecp_muladd_restartable+0x90>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 800caca:	bf00      	nop
 800cacc:	e002      	b.n	800cad4 <mbedtls_ecp_muladd_restartable+0x90>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 800cace:	bf00      	nop
 800cad0:	e000      	b.n	800cad4 <mbedtls_ecp_muladd_restartable+0x90>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 800cad2:	bf00      	nop
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
 800cad4:	f107 0310 	add.w	r3, r7, #16
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fd f82c 	bl	8009b36 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
 800cade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3740      	adds	r7, #64	; 0x40
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	ffffb180 	.word	0xffffb180

0800caec <ecp_check_pubkey_mx>:
#if defined(ECP_MONTGOMERY)
/*
 * Check validity of a public key for Montgomery curves with x-only schemes
 */
static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
    /* [Curve25519 p. 5] Just check X is the correct number of bytes */
    /* Allow any public value, if it's too big then we'll just reduce it mod p
     * (RFC 7748 sec. 5 para. 3). */
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7f8 fc9b 	bl	8005434 <mbedtls_mpi_size>
 800cafe:	4602      	mov	r2, r0
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb04:	3307      	adds	r3, #7
 800cb06:	08db      	lsrs	r3, r3, #3
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d901      	bls.n	800cb10 <ecp_check_pubkey_mx+0x24>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800cb0c:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <ecp_check_pubkey_mx+0x30>)
 800cb0e:	e000      	b.n	800cb12 <ecp_check_pubkey_mx+0x26>

    return( 0 );
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	ffffb380 	.word	0xffffb380

0800cb20 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	3318      	adds	r3, #24
 800cb2e:	2101      	movs	r1, #1
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f9 f909 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <mbedtls_ecp_check_pubkey+0x20>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800cb3c:	4b0f      	ldr	r3, [pc, #60]	; (800cb7c <mbedtls_ecp_check_pubkey+0x5c>)
 800cb3e:	e018      	b.n	800cb72 <mbedtls_ecp_check_pubkey+0x52>

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7fc ff76 	bl	8009a32 <ecp_get_type>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d105      	bne.n	800cb58 <mbedtls_ecp_check_pubkey+0x38>
        return( ecp_check_pubkey_mx( grp, pt ) );
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff ffcc 	bl	800caec <ecp_check_pubkey_mx>
 800cb54:	4603      	mov	r3, r0
 800cb56:	e00c      	b.n	800cb72 <mbedtls_ecp_check_pubkey+0x52>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7fc ff6a 	bl	8009a32 <ecp_get_type>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d105      	bne.n	800cb70 <mbedtls_ecp_check_pubkey+0x50>
        return( ecp_check_pubkey_sw( grp, pt ) );
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7ff fde4 	bl	800c734 <ecp_check_pubkey_sw>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	e000      	b.n	800cb72 <mbedtls_ecp_check_pubkey+0x52>
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800cb70:	4b03      	ldr	r3, [pc, #12]	; (800cb80 <mbedtls_ecp_check_pubkey+0x60>)
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	ffffb380 	.word	0xffffb380
 800cb80:	ffffb080 	.word	0xffffb080

0800cb84 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7fc ff4f 	bl	8009a32 <ecp_get_type>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d127      	bne.n	800cbea <mbedtls_ecp_check_privkey+0x66>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	6838      	ldr	r0, [r7, #0]
 800cb9e:	f7f8 fb49 	bl	8005234 <mbedtls_mpi_get_bit>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10f      	bne.n	800cbc8 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 800cba8:	2101      	movs	r1, #1
 800cbaa:	6838      	ldr	r0, [r7, #0]
 800cbac:	f7f8 fb42 	bl	8005234 <mbedtls_mpi_get_bit>
 800cbb0:	4603      	mov	r3, r0
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d108      	bne.n	800cbc8 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 800cbb6:	6838      	ldr	r0, [r7, #0]
 800cbb8:	f7f8 fc08 	bl	80053cc <mbedtls_mpi_bitlen>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	1e5a      	subs	r2, r3, #1
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d001      	beq.n	800cbcc <mbedtls_ecp_check_privkey+0x48>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800cbc8:	4b17      	ldr	r3, [pc, #92]	; (800cc28 <mbedtls_ecp_check_privkey+0xa4>)
 800cbca:	e029      	b.n	800cc20 <mbedtls_ecp_check_privkey+0x9c>

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbd0:	2bfe      	cmp	r3, #254	; 0xfe
 800cbd2:	d108      	bne.n	800cbe6 <mbedtls_ecp_check_privkey+0x62>
 800cbd4:	2102      	movs	r1, #2
 800cbd6:	6838      	ldr	r0, [r7, #0]
 800cbd8:	f7f8 fb2c 	bl	8005234 <mbedtls_mpi_get_bit>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800cbe2:	4b11      	ldr	r3, [pc, #68]	; (800cc28 <mbedtls_ecp_check_privkey+0xa4>)
 800cbe4:	e01c      	b.n	800cc20 <mbedtls_ecp_check_privkey+0x9c>

        return( 0 );
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e01a      	b.n	800cc20 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7fc ff21 	bl	8009a32 <ecp_get_type>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d113      	bne.n	800cc1e <mbedtls_ecp_check_privkey+0x9a>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800cbf6:	2101      	movs	r1, #1
 800cbf8:	6838      	ldr	r0, [r7, #0]
 800cbfa:	f7f9 f8a5 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	db08      	blt.n	800cc16 <mbedtls_ecp_check_privkey+0x92>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	334c      	adds	r3, #76	; 0x4c
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6838      	ldr	r0, [r7, #0]
 800cc0c:	f7f9 f801 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800cc10:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	db01      	blt.n	800cc1a <mbedtls_ecp_check_privkey+0x96>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800cc16:	4b04      	ldr	r3, [pc, #16]	; (800cc28 <mbedtls_ecp_check_privkey+0xa4>)
 800cc18:	e002      	b.n	800cc20 <mbedtls_ecp_check_privkey+0x9c>
        else
            return( 0 );
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e000      	b.n	800cc20 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800cc1e:	4b03      	ldr	r3, [pc, #12]	; (800cc2c <mbedtls_ecp_check_privkey+0xa8>)
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	ffffb380 	.word	0xffffb380
 800cc2c:	ffffb080 	.word	0xffffb080

0800cc30 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800cc3e:	4b55      	ldr	r3, [pc, #340]	; (800cd94 <mbedtls_ecp_gen_privkey+0x164>)
 800cc40:	61fb      	str	r3, [r7, #28]

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc46:	3307      	adds	r3, #7
 800cc48:	08db      	lsrs	r3, r3, #3
 800cc4a:	617b      	str	r3, [r7, #20]

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7fc fef0 	bl	8009a32 <ecp_get_type>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d151      	bne.n	800ccfc <mbedtls_ecp_gen_privkey+0xcc>
    {
        /* [M225] page 5 */
        size_t b;

        do {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6979      	ldr	r1, [r7, #20]
 800cc5e:	68b8      	ldr	r0, [r7, #8]
 800cc60:	f7fb fc32 	bl	80084c8 <mbedtls_mpi_fill_random>
 800cc64:	61f8      	str	r0, [r7, #28]
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d17f      	bne.n	800cd6c <mbedtls_ecp_gen_privkey+0x13c>
        } while( mbedtls_mpi_bitlen( d ) == 0);
 800cc6c:	68b8      	ldr	r0, [r7, #8]
 800cc6e:	f7f8 fbad 	bl	80053cc <mbedtls_mpi_bitlen>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d0ef      	beq.n	800cc58 <mbedtls_ecp_gen_privkey+0x28>

        /* Make sure the most significant bit is nbits */
        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
 800cc78:	68b8      	ldr	r0, [r7, #8]
 800cc7a:	f7f8 fba7 	bl	80053cc <mbedtls_mpi_bitlen>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	3b01      	subs	r3, #1
 800cc82:	613b      	str	r3, [r7, #16]
        if( b > grp->nbits )
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d90c      	bls.n	800cca8 <mbedtls_ecp_gen_privkey+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	4619      	mov	r1, r3
 800cc98:	68b8      	ldr	r0, [r7, #8]
 800cc9a:	f7f8 fe9d 	bl	80059d8 <mbedtls_mpi_shift_r>
 800cc9e:	61f8      	str	r0, [r7, #28]
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00b      	beq.n	800ccbe <mbedtls_ecp_gen_privkey+0x8e>
 800cca6:	e070      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
        else
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccac:	2201      	movs	r2, #1
 800ccae:	4619      	mov	r1, r3
 800ccb0:	68b8      	ldr	r0, [r7, #8]
 800ccb2:	f7f8 fae0 	bl	8005276 <mbedtls_mpi_set_bit>
 800ccb6:	61f8      	str	r0, [r7, #28]
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d158      	bne.n	800cd70 <mbedtls_ecp_gen_privkey+0x140>

        /* Make sure the last two bits are unset for Curve448, three bits for
           Curve25519 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	68b8      	ldr	r0, [r7, #8]
 800ccc4:	f7f8 fad7 	bl	8005276 <mbedtls_mpi_set_bit>
 800ccc8:	61f8      	str	r0, [r7, #28]
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d151      	bne.n	800cd74 <mbedtls_ecp_gen_privkey+0x144>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	68b8      	ldr	r0, [r7, #8]
 800ccd6:	f7f8 face 	bl	8005276 <mbedtls_mpi_set_bit>
 800ccda:	61f8      	str	r0, [r7, #28]
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d14a      	bne.n	800cd78 <mbedtls_ecp_gen_privkey+0x148>
        if( grp->nbits == 254 )
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cce6:	2bfe      	cmp	r3, #254	; 0xfe
 800cce8:	d108      	bne.n	800ccfc <mbedtls_ecp_gen_privkey+0xcc>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 800ccea:	2200      	movs	r2, #0
 800ccec:	2102      	movs	r1, #2
 800ccee:	68b8      	ldr	r0, [r7, #8]
 800ccf0:	f7f8 fac1 	bl	8005276 <mbedtls_mpi_set_bit>
 800ccf4:	61f8      	str	r0, [r7, #28]
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d13f      	bne.n	800cd7c <mbedtls_ecp_gen_privkey+0x14c>
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7fc fe98 	bl	8009a32 <ecp_get_type>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d13b      	bne.n	800cd80 <mbedtls_ecp_gen_privkey+0x150>
    {
        /* SEC1 3.2.1: Generate d such that 1 <= n < N */
        int count = 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	61bb      	str	r3, [r7, #24]
         * - try until result is in the desired range.
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	6979      	ldr	r1, [r7, #20]
 800cd12:	68b8      	ldr	r0, [r7, #8]
 800cd14:	f7fb fbd8 	bl	80084c8 <mbedtls_mpi_fill_random>
 800cd18:	61f8      	str	r0, [r7, #28]
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d131      	bne.n	800cd84 <mbedtls_ecp_gen_privkey+0x154>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	00da      	lsls	r2, r3, #3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	68b8      	ldr	r0, [r7, #8]
 800cd2e:	f7f8 fe53 	bl	80059d8 <mbedtls_mpi_shift_r>
 800cd32:	61f8      	str	r0, [r7, #28]
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d126      	bne.n	800cd88 <mbedtls_ecp_gen_privkey+0x158>
             *
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	61bb      	str	r3, [r7, #24]
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	2b1e      	cmp	r3, #30
 800cd44:	dd01      	ble.n	800cd4a <mbedtls_ecp_gen_privkey+0x11a>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800cd46:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <mbedtls_ecp_gen_privkey+0x168>)
 800cd48:	e020      	b.n	800cd8c <mbedtls_ecp_gen_privkey+0x15c>
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	68b8      	ldr	r0, [r7, #8]
 800cd4e:	f7f8 fffb 	bl	8005d48 <mbedtls_mpi_cmp_int>
 800cd52:	4603      	mov	r3, r0
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dbd9      	blt.n	800cd0c <mbedtls_ecp_gen_privkey+0xdc>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	334c      	adds	r3, #76	; 0x4c
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	68b8      	ldr	r0, [r7, #8]
 800cd60:	f7f8 ff57 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800cd64:	4603      	mov	r3, r0
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	dad0      	bge.n	800cd0c <mbedtls_ecp_gen_privkey+0xdc>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
 800cd6a:	e009      	b.n	800cd80 <mbedtls_ecp_gen_privkey+0x150>
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800cd6c:	bf00      	nop
 800cd6e:	e00c      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
 800cd70:	bf00      	nop
 800cd72:	e00a      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 800cd74:	bf00      	nop
 800cd76:	e008      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 800cd78:	bf00      	nop
 800cd7a:	e006      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 800cd7c:	bf00      	nop
 800cd7e:	e004      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
cleanup:
 800cd80:	bf00      	nop
 800cd82:	e002      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800cd84:	bf00      	nop
 800cd86:	e000      	b.n	800cd8a <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 800cd88:	bf00      	nop
    return( ret );
 800cd8a:	69fb      	ldr	r3, [r7, #28]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3720      	adds	r7, #32
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	ffffb080 	.word	0xffffb080
 800cd98:	ffffb300 	.word	0xffffb300

0800cd9c <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 800cd9c:	b590      	push	{r4, r7, lr}
 800cd9e:	b0af      	sub	sp, #188	; 0xbc
 800cda0:	af02      	add	r7, sp, #8
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d029      	beq.n	800ce02 <mbedtls_ecp_check_pub_priv+0x66>
        pub->grp.id != prv->grp.id ||
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	781a      	ldrb	r2, [r3, #0]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d123      	bne.n	800ce02 <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	3388      	adds	r3, #136	; 0x88
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f7f8 ff23 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800cdcc:	4603      	mov	r3, r0
        pub->grp.id != prv->grp.id ||
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d117      	bne.n	800ce02 <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	3394      	adds	r3, #148	; 0x94
 800cddc:	4619      	mov	r1, r3
 800cdde:	4610      	mov	r0, r2
 800cde0:	f7f8 ff17 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800cde4:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10b      	bne.n	800ce02 <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	33a0      	adds	r3, #160	; 0xa0
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4610      	mov	r0, r2
 800cdf8:	f7f8 ff0b 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800cdfc:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <mbedtls_ecp_check_pub_priv+0x6a>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800ce02:	4b33      	ldr	r3, [pc, #204]	; (800ced0 <mbedtls_ecp_check_pub_priv+0x134>)
 800ce04:	e060      	b.n	800cec8 <mbedtls_ecp_check_pub_priv+0x12c>
    }

    mbedtls_ecp_point_init( &Q );
 800ce06:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fc fe28 	bl	8009a60 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 800ce10:	f107 030c 	add.w	r3, r7, #12
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fc fe39 	bl	8009a8c <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	f107 030c 	add.w	r3, r7, #12
 800ce20:	4611      	mov	r1, r2
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fc ff38 	bl	8009c98 <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800ce34:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800ce38:	f107 000c 	add.w	r0, r7, #12
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	2300      	movs	r3, #0
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	4623      	mov	r3, r4
 800ce46:	f7ff fc5d 	bl	800c704 <mbedtls_ecp_mul>
 800ce4a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 800ce4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d129      	bne.n	800ceaa <mbedtls_ecp_check_pub_priv+0x10e>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800ce5c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f8 fed5 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d119      	bne.n	800cea2 <mbedtls_ecp_check_pub_priv+0x106>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800ce74:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ce78:	330c      	adds	r3, #12
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7f8 fec8 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800ce82:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10c      	bne.n	800cea2 <mbedtls_ecp_check_pub_priv+0x106>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800ce8e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ce92:	3318      	adds	r3, #24
 800ce94:	4611      	mov	r1, r2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7f8 febb 	bl	8005c12 <mbedtls_mpi_cmp_mpi>
 800ce9c:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d005      	beq.n	800ceae <mbedtls_ecp_check_pub_priv+0x112>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800cea2:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <mbedtls_ecp_check_pub_priv+0x134>)
 800cea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        goto cleanup;
 800cea8:	e002      	b.n	800ceb0 <mbedtls_ecp_check_pub_priv+0x114>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 800ceaa:	bf00      	nop
 800ceac:	e000      	b.n	800ceb0 <mbedtls_ecp_check_pub_priv+0x114>
    }

cleanup:
 800ceae:	bf00      	nop
    mbedtls_ecp_point_free( &Q );
 800ceb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fc fe3e 	bl	8009b36 <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
 800ceba:	f107 030c 	add.w	r3, r7, #12
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fc fe53 	bl	8009b6a <mbedtls_ecp_group_free>

    return( ret );
 800cec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	37b4      	adds	r7, #180	; 0xb4
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}
 800ced0:	ffffb080 	.word	0xffffb080

0800ced4 <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
    X->s = 1;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2201      	movs	r2, #1
 800cee4:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	089a      	lsrs	r2, r3, #2
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	609a      	str	r2, [r3, #8]
}
 800cef4:	bf00      	nop
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	601a      	str	r2, [r3, #0]
    X->n = 1;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	605a      	str	r2, [r3, #4]
    X->p = one;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a04      	ldr	r2, [pc, #16]	; (800cf28 <ecp_mpi_set1+0x28>)
 800cf18:	609a      	str	r2, [r3, #8]
}
 800cf1a:	bf00      	nop
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	20000624 	.word	0x20000624

0800cf2c <ecp_group_load>:
                           const mbedtls_mpi_uint *a,  size_t alen,
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	68b9      	ldr	r1, [r7, #8]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff ffc6 	bl	800ced4 <ecp_mpi_load>
    if( a != NULL )
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d006      	beq.n	800cf5c <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3310      	adds	r3, #16
 800cf52:	69ba      	ldr	r2, [r7, #24]
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff ffbc 	bl	800ced4 <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	331c      	adds	r3, #28
 800cf60:	6a3a      	ldr	r2, [r7, #32]
 800cf62:	69f9      	ldr	r1, [r7, #28]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff ffb5 	bl	800ced4 <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	334c      	adds	r3, #76	; 0x4c
 800cf6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7ff ffae 	bl	800ced4 <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	3328      	adds	r3, #40	; 0x28
 800cf7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff ffa7 	bl	800ced4 <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3334      	adds	r3, #52	; 0x34
 800cf8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff ffa0 	bl	800ced4 <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3340      	adds	r3, #64	; 0x40
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff ffb1 	bl	800cf00 <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f8 fa12 	bl	80053cc <mbedtls_mpi_bitlen>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	334c      	adds	r3, #76	; 0x4c
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f8 fa0a 	bl	80053cc <mbedtls_mpi_bitlen>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	65da      	str	r2, [r3, #92]	; 0x5c

    grp->h = 1;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	661a      	str	r2, [r3, #96]	; 0x60

    return( 0 );
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <ecp_use_curve448>:
#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
/*
 * Specialized function for creating the Curve448 group
 */
static int ecp_use_curve448( mbedtls_ecp_group *grp )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
    mbedtls_mpi Ns;
    int ret;

    mbedtls_mpi_init( &Ns );
 800cfd8:	f107 0308 	add.w	r3, r7, #8
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7f7 feb6 	bl	8004d4e <mbedtls_mpi_init>

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3310      	adds	r3, #16
 800cfe6:	4a58      	ldr	r2, [pc, #352]	; (800d148 <ecp_use_curve448+0x178>)
 800cfe8:	2110      	movs	r1, #16
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f8 fa6a 	bl	80054c4 <mbedtls_mpi_read_string>
 800cff0:	6178      	str	r0, [r7, #20]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f040 8081 	bne.w	800d0fc <ecp_use_curve448+0x12c>

    /* P = 2^448 - 2^224 - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3304      	adds	r3, #4
 800cffe:	2101      	movs	r1, #1
 800d000:	4618      	mov	r0, r3
 800d002:	f7f8 f8e9 	bl	80051d8 <mbedtls_mpi_lset>
 800d006:	6178      	str	r0, [r7, #20]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d178      	bne.n	800d100 <ecp_use_curve448+0x130>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3304      	adds	r3, #4
 800d012:	21e0      	movs	r1, #224	; 0xe0
 800d014:	4618      	mov	r0, r3
 800d016:	f7f8 fc3a 	bl	800588e <mbedtls_mpi_shift_l>
 800d01a:	6178      	str	r0, [r7, #20]
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d170      	bne.n	800d104 <ecp_use_curve448+0x134>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	1d18      	adds	r0, r3, #4
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	3304      	adds	r3, #4
 800d02a:	2201      	movs	r2, #1
 800d02c:	4619      	mov	r1, r3
 800d02e:	f7f9 f8d6 	bl	80061de <mbedtls_mpi_sub_int>
 800d032:	6178      	str	r0, [r7, #20]
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d166      	bne.n	800d108 <ecp_use_curve448+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3304      	adds	r3, #4
 800d03e:	21e0      	movs	r1, #224	; 0xe0
 800d040:	4618      	mov	r0, r3
 800d042:	f7f8 fc24 	bl	800588e <mbedtls_mpi_shift_l>
 800d046:	6178      	str	r0, [r7, #20]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d15e      	bne.n	800d10c <ecp_use_curve448+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	1d18      	adds	r0, r3, #4
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3304      	adds	r3, #4
 800d056:	2201      	movs	r2, #1
 800d058:	4619      	mov	r1, r3
 800d05a:	f7f9 f8c0 	bl	80061de <mbedtls_mpi_sub_int>
 800d05e:	6178      	str	r0, [r7, #20]
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d154      	bne.n	800d110 <ecp_use_curve448+0x140>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3304      	adds	r3, #4
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7f8 f9ae 	bl	80053cc <mbedtls_mpi_bitlen>
 800d070:	4602      	mov	r2, r0
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	659a      	str	r2, [r3, #88]	; 0x58

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	3328      	adds	r3, #40	; 0x28
 800d07a:	2105      	movs	r1, #5
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7f8 f8ab 	bl	80051d8 <mbedtls_mpi_lset>
 800d082:	6178      	str	r0, [r7, #20]
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d144      	bne.n	800d114 <ecp_use_curve448+0x144>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	3340      	adds	r3, #64	; 0x40
 800d08e:	2101      	movs	r1, #1
 800d090:	4618      	mov	r0, r3
 800d092:	f7f8 f8a1 	bl	80051d8 <mbedtls_mpi_lset>
 800d096:	6178      	str	r0, [r7, #20]
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d13c      	bne.n	800d118 <ecp_use_curve448+0x148>
    mbedtls_mpi_free( &grp->G.Y );
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3334      	adds	r3, #52	; 0x34
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7f7 fe66 	bl	8004d74 <mbedtls_mpi_free>

    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	334c      	adds	r3, #76	; 0x4c
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f8 f8df 	bl	8005276 <mbedtls_mpi_set_bit>
 800d0b8:	6178      	str	r0, [r7, #20]
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d12d      	bne.n	800d11c <ecp_use_curve448+0x14c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 800d0c0:	f107 0308 	add.w	r3, r7, #8
 800d0c4:	4a21      	ldr	r2, [pc, #132]	; (800d14c <ecp_use_curve448+0x17c>)
 800d0c6:	2110      	movs	r1, #16
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7f8 f9fb 	bl	80054c4 <mbedtls_mpi_read_string>
 800d0ce:	6178      	str	r0, [r7, #20]
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d124      	bne.n	800d120 <ecp_use_curve448+0x150>
                                              "8335DC163BB124B65129C96FDE933D8D723A70AADC873D6D54A7BB0D" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	334c      	adds	r3, #76	; 0x4c
 800d0e0:	f107 0208 	add.w	r2, r7, #8
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	f7f9 f80c 	bl	8006102 <mbedtls_mpi_sub_mpi>
 800d0ea:	6178      	str	r0, [r7, #20]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d118      	bne.n	800d124 <ecp_use_curve448+0x154>

    /* Actually, the required msb for private keys */
    grp->nbits = 447;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f240 12bf 	movw	r2, #447	; 0x1bf
 800d0f8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d0fa:	e014      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 800d0fc:	bf00      	nop
 800d0fe:	e012      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 800d100:	bf00      	nop
 800d102:	e010      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800d104:	bf00      	nop
 800d106:	e00e      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800d108:	bf00      	nop
 800d10a:	e00c      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800d10c:	bf00      	nop
 800d10e:	e00a      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800d110:	bf00      	nop
 800d112:	e008      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 800d114:	bf00      	nop
 800d116:	e006      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 800d118:	bf00      	nop
 800d11a:	e004      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 800d11c:	bf00      	nop
 800d11e:	e002      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 800d120:	bf00      	nop
 800d122:	e000      	b.n	800d126 <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 800d124:	bf00      	nop

cleanup:
    mbedtls_mpi_free( &Ns );
 800d126:	f107 0308 	add.w	r3, r7, #8
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7f7 fe22 	bl	8004d74 <mbedtls_mpi_free>
    if( ret != 0 )
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <ecp_use_curve448+0x16c>
        mbedtls_ecp_group_free( grp );
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7fc fd17 	bl	8009b6a <mbedtls_ecp_group_free>

    return( ret );
 800d13c:	697b      	ldr	r3, [r7, #20]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3718      	adds	r7, #24
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	08015410 	.word	0x08015410
 800d14c:	08015418 	.word	0x08015418

0800d150 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08c      	sub	sp, #48	; 0x30
 800d154:	af0a      	add	r7, sp, #40	; 0x28
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7fc fd04 	bl	8009b6a <mbedtls_ecp_group_free>

    grp->id = id;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	78fa      	ldrb	r2, [r7, #3]
 800d166:	701a      	strb	r2, [r3, #0]

    switch( id )
 800d168:	78fb      	ldrb	r3, [r7, #3]
 800d16a:	2b04      	cmp	r3, #4
 800d16c:	d020      	beq.n	800d1b0 <mbedtls_ecp_group_load+0x60>
 800d16e:	2b0d      	cmp	r3, #13
 800d170:	d03b      	beq.n	800d1ea <mbedtls_ecp_group_load+0x9a>
 800d172:	2b03      	cmp	r3, #3
 800d174:	d141      	bne.n	800d1fa <mbedtls_ecp_group_load+0xaa>
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4a24      	ldr	r2, [pc, #144]	; (800d20c <mbedtls_ecp_group_load+0xbc>)
 800d17a:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp256r1 ) );
 800d17c:	2320      	movs	r3, #32
 800d17e:	9308      	str	r3, [sp, #32]
 800d180:	4b23      	ldr	r3, [pc, #140]	; (800d210 <mbedtls_ecp_group_load+0xc0>)
 800d182:	9307      	str	r3, [sp, #28]
 800d184:	2320      	movs	r3, #32
 800d186:	9306      	str	r3, [sp, #24]
 800d188:	4b22      	ldr	r3, [pc, #136]	; (800d214 <mbedtls_ecp_group_load+0xc4>)
 800d18a:	9305      	str	r3, [sp, #20]
 800d18c:	2320      	movs	r3, #32
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	4b21      	ldr	r3, [pc, #132]	; (800d218 <mbedtls_ecp_group_load+0xc8>)
 800d192:	9303      	str	r3, [sp, #12]
 800d194:	2320      	movs	r3, #32
 800d196:	9302      	str	r3, [sp, #8]
 800d198:	4b20      	ldr	r3, [pc, #128]	; (800d21c <mbedtls_ecp_group_load+0xcc>)
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	2300      	movs	r3, #0
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2220      	movs	r2, #32
 800d1a4:	491e      	ldr	r1, [pc, #120]	; (800d220 <mbedtls_ecp_group_load+0xd0>)
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fec0 	bl	800cf2c <ecp_group_load>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	e028      	b.n	800d202 <mbedtls_ecp_group_load+0xb2>
#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP384R1:
            NIST_MODP( p384 );
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a1c      	ldr	r2, [pc, #112]	; (800d224 <mbedtls_ecp_group_load+0xd4>)
 800d1b4:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp384r1 ) );
 800d1b6:	2330      	movs	r3, #48	; 0x30
 800d1b8:	9308      	str	r3, [sp, #32]
 800d1ba:	4b1b      	ldr	r3, [pc, #108]	; (800d228 <mbedtls_ecp_group_load+0xd8>)
 800d1bc:	9307      	str	r3, [sp, #28]
 800d1be:	2330      	movs	r3, #48	; 0x30
 800d1c0:	9306      	str	r3, [sp, #24]
 800d1c2:	4b1a      	ldr	r3, [pc, #104]	; (800d22c <mbedtls_ecp_group_load+0xdc>)
 800d1c4:	9305      	str	r3, [sp, #20]
 800d1c6:	2330      	movs	r3, #48	; 0x30
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	4b19      	ldr	r3, [pc, #100]	; (800d230 <mbedtls_ecp_group_load+0xe0>)
 800d1cc:	9303      	str	r3, [sp, #12]
 800d1ce:	2330      	movs	r3, #48	; 0x30
 800d1d0:	9302      	str	r3, [sp, #8]
 800d1d2:	4b18      	ldr	r3, [pc, #96]	; (800d234 <mbedtls_ecp_group_load+0xe4>)
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2230      	movs	r2, #48	; 0x30
 800d1de:	4916      	ldr	r1, [pc, #88]	; (800d238 <mbedtls_ecp_group_load+0xe8>)
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff fea3 	bl	800cf2c <ecp_group_load>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	e00b      	b.n	800d202 <mbedtls_ecp_group_load+0xb2>
            return( ecp_use_curve25519( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
        case MBEDTLS_ECP_DP_CURVE448:
            grp->modp = ecp_mod_p448;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4a13      	ldr	r2, [pc, #76]	; (800d23c <mbedtls_ecp_group_load+0xec>)
 800d1ee:	665a      	str	r2, [r3, #100]	; 0x64
            return( ecp_use_curve448( grp ) );
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff feed 	bl	800cfd0 <ecp_use_curve448>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	e003      	b.n	800d202 <mbedtls_ecp_group_load+0xb2>
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7fc fcb5 	bl	8009b6a <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800d200:	4b0f      	ldr	r3, [pc, #60]	; (800d240 <mbedtls_ecp_group_load+0xf0>)
    }
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	0800d325 	.word	0x0800d325
 800d210:	080198a4 	.word	0x080198a4
 800d214:	08019884 	.word	0x08019884
 800d218:	08019864 	.word	0x08019864
 800d21c:	08019844 	.word	0x08019844
 800d220:	08019824 	.word	0x08019824
 800d224:	0800db5f 	.word	0x0800db5f
 800d228:	08019984 	.word	0x08019984
 800d22c:	08019954 	.word	0x08019954
 800d230:	08019924 	.word	0x08019924
 800d234:	080198f4 	.word	0x080198f4
 800d238:	080198c4 	.word	0x080198c4
 800d23c:	0800e615 	.word	0x0800e615
 800d240:	ffffb180 	.word	0xffffb180

0800d244 <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
    *dst += src;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	441a      	add	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	601a      	str	r2, [r3, #0]
    *carry += ( *dst < src );
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f993 3000 	ldrsb.w	r3, [r3]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	6812      	ldr	r2, [r2, #0]
 800d268:	68b9      	ldr	r1, [r7, #8]
 800d26a:	4291      	cmp	r1, r2
 800d26c:	bf8c      	ite	hi
 800d26e:	2201      	movhi	r2, #1
 800d270:	2200      	movls	r2, #0
 800d272:	b2d2      	uxtb	r2, r2
 800d274:	4413      	add	r3, r2
 800d276:	b2db      	uxtb	r3, r3
 800d278:	b25a      	sxtb	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	701a      	strb	r2, [r3, #0]
}
 800d27e:	bf00      	nop
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 800d28a:	b480      	push	{r7}
 800d28c:	b085      	sub	sp, #20
 800d28e:	af00      	add	r7, sp, #0
 800d290:	60f8      	str	r0, [r7, #12]
 800d292:	60b9      	str	r1, [r7, #8]
 800d294:	607a      	str	r2, [r7, #4]
    *carry -= ( *dst < src );
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f993 3000 	ldrsb.w	r3, [r3]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	6812      	ldr	r2, [r2, #0]
 800d2a2:	68b9      	ldr	r1, [r7, #8]
 800d2a4:	4291      	cmp	r1, r2
 800d2a6:	bf8c      	ite	hi
 800d2a8:	2201      	movhi	r2, #1
 800d2aa:	2200      	movls	r2, #0
 800d2ac:	b2d2      	uxtb	r2, r2
 800d2ae:	1a9b      	subs	r3, r3, r2
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	b25a      	sxtb	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	701a      	strb	r2, [r3, #0]
    *dst -= src;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	1ad2      	subs	r2, r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	601a      	str	r2, [r3, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	3714      	adds	r7, #20
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <fix_negative>:
/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	607a      	str	r2, [r7, #4]
 800d2da:	603b      	str	r3, [r7, #0]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	72fb      	strb	r3, [r7, #11]
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 800d2e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d2e4:	4259      	negs	r1, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	689a      	ldr	r2, [r3, #8]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	460a      	mov	r2, r1
 800d2fa:	601a      	str	r2, [r3, #0]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	6879      	ldr	r1, [r7, #4]
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f7f8 fe50 	bl	8005fa6 <mbedtls_mpi_sub_abs>
 800d306:	6178      	str	r0, [r7, #20]
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d104      	bne.n	800d318 <fix_negative+0x48>
    N->s = -1;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f04f 32ff 	mov.w	r2, #4294967295
 800d314:	601a      	str	r2, [r3, #0]
 800d316:	e000      	b.n	800d31a <fix_negative+0x4a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 800d318:	bf00      	nop

cleanup:

    return( ret );
 800d31a:	697b      	ldr	r3, [r7, #20]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b094      	sub	sp, #80	; 0x50
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
    INIT( 256 );
 800d32c:	2300      	movs	r3, #0
 800d32e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d332:	2300      	movs	r3, #0
 800d334:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d33a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d33c:	2301      	movs	r3, #1
 800d33e:	633b      	str	r3, [r7, #48]	; 0x30
 800d340:	2309      	movs	r3, #9
 800d342:	637b      	str	r3, [r7, #52]	; 0x34
 800d344:	f107 030c 	add.w	r3, r7, #12
 800d348:	63bb      	str	r3, [r7, #56]	; 0x38
 800d34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34c:	009a      	lsls	r2, r3, #2
 800d34e:	f107 030c 	add.w	r3, r7, #12
 800d352:	2100      	movs	r1, #0
 800d354:	4618      	mov	r0, r3
 800d356:	f007 f948 	bl	80145ea <memset>
 800d35a:	2110      	movs	r1, #16
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7f7 fd2f 	bl	8004dc0 <mbedtls_mpi_grow>
 800d362:	6478      	str	r0, [r7, #68]	; 0x44
 800d364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d366:	2b00      	cmp	r3, #0
 800d368:	f040 83f1 	bne.w	800db4e <ecp_mod_p256+0x82a>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	689a      	ldr	r2, [r3, #8]
 800d370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4413      	add	r3, r2
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	63fb      	str	r3, [r7, #60]	; 0x3c

    ADD(  8 ); ADD(  9 );
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	3320      	adds	r3, #32
 800d380:	6819      	ldr	r1, [r3, #0]
 800d382:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d386:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff ff5a 	bl	800d244 <add32>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	3324      	adds	r3, #36	; 0x24
 800d396:	6819      	ldr	r1, [r3, #0]
 800d398:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d39c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff ff4f 	bl	800d244 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	332c      	adds	r3, #44	; 0x2c
 800d3ac:	6819      	ldr	r1, [r3, #0]
 800d3ae:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d3b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff ff67 	bl	800d28a <sub32>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	3330      	adds	r3, #48	; 0x30
 800d3c2:	6819      	ldr	r1, [r3, #0]
 800d3c4:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d3c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff ff5c 	bl	800d28a <sub32>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	3334      	adds	r3, #52	; 0x34
 800d3d8:	6819      	ldr	r1, [r3, #0]
 800d3da:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d3de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7ff ff51 	bl	800d28a <sub32>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	3338      	adds	r3, #56	; 0x38
 800d3ee:	6819      	ldr	r1, [r3, #0]
 800d3f0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d3f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff ff46 	bl	800d28a <sub32>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	689a      	ldr	r2, [r3, #8]
 800d402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	4413      	add	r3, r2
 800d408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d40a:	601a      	str	r2, [r3, #0]
 800d40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40e:	3301      	adds	r3, #1
 800d410:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	689a      	ldr	r2, [r3, #8]
 800d416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d420:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d424:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d428:	2300      	movs	r3, #0
 800d42a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d42e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d432:	2b00      	cmp	r3, #0
 800d434:	da0b      	bge.n	800d44e <ecp_mod_p256+0x12a>
 800d436:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d43a:	425b      	negs	r3, r3
 800d43c:	4619      	mov	r1, r3
 800d43e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d442:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff ff1f 	bl	800d28a <sub32>
 800d44c:	e008      	b.n	800d460 <ecp_mod_p256+0x13c>
 800d44e:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d452:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d456:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff fef2 	bl	800d244 <add32>

    ADD(  9 ); ADD( 10 );
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	3324      	adds	r3, #36	; 0x24
 800d466:	6819      	ldr	r1, [r3, #0]
 800d468:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d46c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fee7 	bl	800d244 <add32>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	3328      	adds	r3, #40	; 0x28
 800d47c:	6819      	ldr	r1, [r3, #0]
 800d47e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d482:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff fedc 	bl	800d244 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	3330      	adds	r3, #48	; 0x30
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d498:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fef4 	bl	800d28a <sub32>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	3334      	adds	r3, #52	; 0x34
 800d4a8:	6819      	ldr	r1, [r3, #0]
 800d4aa:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d4ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff fee9 	bl	800d28a <sub32>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	3338      	adds	r3, #56	; 0x38
 800d4be:	6819      	ldr	r1, [r3, #0]
 800d4c0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d4c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fede 	bl	800d28a <sub32>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	333c      	adds	r3, #60	; 0x3c
 800d4d4:	6819      	ldr	r1, [r3, #0]
 800d4d6:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d4da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff fed3 	bl	800d28a <sub32>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	689a      	ldr	r2, [r3, #8]
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689a      	ldr	r2, [r3, #8]
 800d4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	4413      	add	r3, r2
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d506:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50e:	2300      	movs	r3, #0
 800d510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d514:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d518:	2b00      	cmp	r3, #0
 800d51a:	da0b      	bge.n	800d534 <ecp_mod_p256+0x210>
 800d51c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d520:	425b      	negs	r3, r3
 800d522:	4619      	mov	r1, r3
 800d524:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d528:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff feac 	bl	800d28a <sub32>
 800d532:	e008      	b.n	800d546 <ecp_mod_p256+0x222>
 800d534:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d538:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d53c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fe7f 	bl	800d244 <add32>

    ADD( 10 ); ADD( 11 );
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	3328      	adds	r3, #40	; 0x28
 800d54c:	6819      	ldr	r1, [r3, #0]
 800d54e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d552:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff fe74 	bl	800d244 <add32>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	332c      	adds	r3, #44	; 0x2c
 800d562:	6819      	ldr	r1, [r3, #0]
 800d564:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fe69 	bl	800d244 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	3334      	adds	r3, #52	; 0x34
 800d578:	6819      	ldr	r1, [r3, #0]
 800d57a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d57e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff fe81 	bl	800d28a <sub32>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	3338      	adds	r3, #56	; 0x38
 800d58e:	6819      	ldr	r1, [r3, #0]
 800d590:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fe76 	bl	800d28a <sub32>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	333c      	adds	r3, #60	; 0x3c
 800d5a4:	6819      	ldr	r1, [r3, #0]
 800d5a6:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d5aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fe6b 	bl	800d28a <sub32>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689a      	ldr	r2, [r3, #8]
 800d5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	689a      	ldr	r2, [r3, #8]
 800d5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4413      	add	r3, r2
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d5e4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	da0b      	bge.n	800d604 <ecp_mod_p256+0x2e0>
 800d5ec:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d5f0:	425b      	negs	r3, r3
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d5f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff fe44 	bl	800d28a <sub32>
 800d602:	e008      	b.n	800d616 <ecp_mod_p256+0x2f2>
 800d604:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d608:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d60c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff fe17 	bl	800d244 <add32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	332c      	adds	r3, #44	; 0x2c
 800d61c:	6819      	ldr	r1, [r3, #0]
 800d61e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d622:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff fe0c 	bl	800d244 <add32>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	332c      	adds	r3, #44	; 0x2c
 800d632:	6819      	ldr	r1, [r3, #0]
 800d634:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d638:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fe01 	bl	800d244 <add32>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	3330      	adds	r3, #48	; 0x30
 800d648:	6819      	ldr	r1, [r3, #0]
 800d64a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d64e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff fdf6 	bl	800d244 <add32>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	3330      	adds	r3, #48	; 0x30
 800d65e:	6819      	ldr	r1, [r3, #0]
 800d660:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d664:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fdeb 	bl	800d244 <add32>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	3334      	adds	r3, #52	; 0x34
 800d674:	6819      	ldr	r1, [r3, #0]
 800d676:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d67a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff fde0 	bl	800d244 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	333c      	adds	r3, #60	; 0x3c
 800d68a:	6819      	ldr	r1, [r3, #0]
 800d68c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d690:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fdf8 	bl	800d28a <sub32>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	3320      	adds	r3, #32
 800d6a0:	6819      	ldr	r1, [r3, #0]
 800d6a2:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d6a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7ff fded 	bl	800d28a <sub32>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	3324      	adds	r3, #36	; 0x24
 800d6b6:	6819      	ldr	r1, [r3, #0]
 800d6b8:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d6bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff fde2 	bl	800d28a <sub32>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	689a      	ldr	r2, [r3, #8]
 800d6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d6ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d6f6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	da0b      	bge.n	800d716 <ecp_mod_p256+0x3f2>
 800d6fe:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d702:	425b      	negs	r3, r3
 800d704:	4619      	mov	r1, r3
 800d706:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d70a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff fdbb 	bl	800d28a <sub32>
 800d714:	e008      	b.n	800d728 <ecp_mod_p256+0x404>
 800d716:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d71a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d71e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff fd8e 	bl	800d244 <add32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	3330      	adds	r3, #48	; 0x30
 800d72e:	6819      	ldr	r1, [r3, #0]
 800d730:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d734:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fd83 	bl	800d244 <add32>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	3330      	adds	r3, #48	; 0x30
 800d744:	6819      	ldr	r1, [r3, #0]
 800d746:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d74a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d74e:	4618      	mov	r0, r3
 800d750:	f7ff fd78 	bl	800d244 <add32>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	3334      	adds	r3, #52	; 0x34
 800d75a:	6819      	ldr	r1, [r3, #0]
 800d75c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d760:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fd6d 	bl	800d244 <add32>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	3334      	adds	r3, #52	; 0x34
 800d770:	6819      	ldr	r1, [r3, #0]
 800d772:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff fd62 	bl	800d244 <add32>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	3338      	adds	r3, #56	; 0x38
 800d786:	6819      	ldr	r1, [r3, #0]
 800d788:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d78c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff fd57 	bl	800d244 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	3324      	adds	r3, #36	; 0x24
 800d79c:	6819      	ldr	r1, [r3, #0]
 800d79e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d7a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7ff fd6f 	bl	800d28a <sub32>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	3328      	adds	r3, #40	; 0x28
 800d7b2:	6819      	ldr	r1, [r3, #0]
 800d7b4:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d7b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff fd64 	bl	800d28a <sub32>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	689a      	ldr	r2, [r3, #8]
 800d7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	4413      	add	r3, r2
 800d7cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7ce:	601a      	str	r2, [r3, #0]
 800d7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	689a      	ldr	r2, [r3, #8]
 800d7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4413      	add	r3, r2
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d7e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d7f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	da0b      	bge.n	800d812 <ecp_mod_p256+0x4ee>
 800d7fa:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d7fe:	425b      	negs	r3, r3
 800d800:	4619      	mov	r1, r3
 800d802:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d806:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7ff fd3d 	bl	800d28a <sub32>
 800d810:	e008      	b.n	800d824 <ecp_mod_p256+0x500>
 800d812:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d816:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d81a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff fd10 	bl	800d244 <add32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	3334      	adds	r3, #52	; 0x34
 800d82a:	6819      	ldr	r1, [r3, #0]
 800d82c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d830:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d834:	4618      	mov	r0, r3
 800d836:	f7ff fd05 	bl	800d244 <add32>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	3334      	adds	r3, #52	; 0x34
 800d840:	6819      	ldr	r1, [r3, #0]
 800d842:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff fcfa 	bl	800d244 <add32>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	3338      	adds	r3, #56	; 0x38
 800d856:	6819      	ldr	r1, [r3, #0]
 800d858:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d85c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff fcef 	bl	800d244 <add32>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	3338      	adds	r3, #56	; 0x38
 800d86c:	6819      	ldr	r1, [r3, #0]
 800d86e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff fce4 	bl	800d244 <add32>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	333c      	adds	r3, #60	; 0x3c
 800d882:	6819      	ldr	r1, [r3, #0]
 800d884:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d888:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff fcd9 	bl	800d244 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	3328      	adds	r3, #40	; 0x28
 800d898:	6819      	ldr	r1, [r3, #0]
 800d89a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d89e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fcf1 	bl	800d28a <sub32>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	332c      	adds	r3, #44	; 0x2c
 800d8ae:	6819      	ldr	r1, [r3, #0]
 800d8b0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d8b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7ff fce6 	bl	800d28a <sub32>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	689a      	ldr	r2, [r3, #8]
 800d8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4413      	add	r3, r2
 800d8c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8ca:	601a      	str	r2, [r3, #0]
 800d8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	689a      	ldr	r2, [r3, #8]
 800d8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d8e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8ee:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	da0b      	bge.n	800d90e <ecp_mod_p256+0x5ea>
 800d8f6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d8fa:	425b      	negs	r3, r3
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d902:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fcbf 	bl	800d28a <sub32>
 800d90c:	e008      	b.n	800d920 <ecp_mod_p256+0x5fc>
 800d90e:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d912:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d916:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7ff fc92 	bl	800d244 <add32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	3338      	adds	r3, #56	; 0x38
 800d926:	6819      	ldr	r1, [r3, #0]
 800d928:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d92c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff fc87 	bl	800d244 <add32>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	3338      	adds	r3, #56	; 0x38
 800d93c:	6819      	ldr	r1, [r3, #0]
 800d93e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff fc7c 	bl	800d244 <add32>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	333c      	adds	r3, #60	; 0x3c
 800d952:	6819      	ldr	r1, [r3, #0]
 800d954:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff fc71 	bl	800d244 <add32>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	333c      	adds	r3, #60	; 0x3c
 800d968:	6819      	ldr	r1, [r3, #0]
 800d96a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d96e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff fc66 	bl	800d244 <add32>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	3338      	adds	r3, #56	; 0x38
 800d97e:	6819      	ldr	r1, [r3, #0]
 800d980:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d988:	4618      	mov	r0, r3
 800d98a:	f7ff fc5b 	bl	800d244 <add32>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	3334      	adds	r3, #52	; 0x34
 800d994:	6819      	ldr	r1, [r3, #0]
 800d996:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d99a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff fc50 	bl	800d244 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	3320      	adds	r3, #32
 800d9aa:	6819      	ldr	r1, [r3, #0]
 800d9ac:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d9b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7ff fc68 	bl	800d28a <sub32>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	3324      	adds	r3, #36	; 0x24
 800d9c0:	6819      	ldr	r1, [r3, #0]
 800d9c2:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d9c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7ff fc5d 	bl	800d28a <sub32>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	689a      	ldr	r2, [r3, #8]
 800d9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4413      	add	r3, r2
 800d9da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	689a      	ldr	r2, [r3, #8]
 800d9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da00:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800da04:	2b00      	cmp	r3, #0
 800da06:	da0b      	bge.n	800da20 <ecp_mod_p256+0x6fc>
 800da08:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800da0c:	425b      	negs	r3, r3
 800da0e:	4619      	mov	r1, r3
 800da10:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800da14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800da18:	4618      	mov	r0, r3
 800da1a:	f7ff fc36 	bl	800d28a <sub32>
 800da1e:	e008      	b.n	800da32 <ecp_mod_p256+0x70e>
 800da20:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800da24:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800da28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff fc09 	bl	800d244 <add32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	333c      	adds	r3, #60	; 0x3c
 800da38:	6819      	ldr	r1, [r3, #0]
 800da3a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800da3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800da42:	4618      	mov	r0, r3
 800da44:	f7ff fbfe 	bl	800d244 <add32>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	333c      	adds	r3, #60	; 0x3c
 800da4e:	6819      	ldr	r1, [r3, #0]
 800da50:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800da54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff fbf3 	bl	800d244 <add32>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	333c      	adds	r3, #60	; 0x3c
 800da64:	6819      	ldr	r1, [r3, #0]
 800da66:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800da6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fbe8 	bl	800d244 <add32>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	3320      	adds	r3, #32
 800da7a:	6819      	ldr	r1, [r3, #0]
 800da7c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800da80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800da84:	4618      	mov	r0, r3
 800da86:	f7ff fbdd 	bl	800d244 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	3328      	adds	r3, #40	; 0x28
 800da90:	6819      	ldr	r1, [r3, #0]
 800da92:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800da96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7ff fbf5 	bl	800d28a <sub32>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	332c      	adds	r3, #44	; 0x2c
 800daa6:	6819      	ldr	r1, [r3, #0]
 800daa8:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800daac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff fbea 	bl	800d28a <sub32>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	3330      	adds	r3, #48	; 0x30
 800dabc:	6819      	ldr	r1, [r3, #0]
 800dabe:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800dac2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff fbdf 	bl	800d28a <sub32>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	3334      	adds	r3, #52	; 0x34
 800dad2:	6819      	ldr	r1, [r3, #0]
 800dad4:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800dad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dadc:	4618      	mov	r0, r3
 800dade:	f7ff fbd4 	bl	800d28a <sub32>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	4413      	add	r3, r2
 800daec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf2:	3301      	adds	r3, #1
 800daf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daf6:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800dafa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dafe:	b25b      	sxtb	r3, r3
 800db00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	689a      	ldr	r2, [r3, #8]
 800db06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db0e:	601a      	str	r2, [r3, #0]
 800db10:	2300      	movs	r3, #0
 800db12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db14:	e006      	b.n	800db24 <ecp_mod_p256+0x800>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689a      	ldr	r2, [r3, #8]
 800db1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db26:	3301      	adds	r3, #1
 800db28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db30:	429a      	cmp	r2, r3
 800db32:	d3f0      	bcc.n	800db16 <ecp_mod_p256+0x7f2>
 800db34:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800db38:	2b00      	cmp	r3, #0
 800db3a:	da0a      	bge.n	800db52 <ecp_mod_p256+0x82e>
 800db3c:	f997 1042 	ldrsb.w	r1, [r7, #66]	; 0x42
 800db40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800db44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff fbc2 	bl	800d2d0 <fix_negative>
 800db4c:	e002      	b.n	800db54 <ecp_mod_p256+0x830>
    INIT( 256 );
 800db4e:	bf00      	nop
 800db50:	e000      	b.n	800db54 <ecp_mod_p256+0x830>

cleanup:
 800db52:	bf00      	nop
    return( ret );
 800db54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800db56:	4618      	mov	r0, r3
 800db58:	3750      	adds	r7, #80	; 0x50
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b098      	sub	sp, #96	; 0x60
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
    INIT( 384 );
 800db66:	2300      	movs	r3, #0
 800db68:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800db6c:	2300      	movs	r3, #0
 800db6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800db74:	65bb      	str	r3, [r7, #88]	; 0x58
 800db76:	2301      	movs	r3, #1
 800db78:	643b      	str	r3, [r7, #64]	; 0x40
 800db7a:	230d      	movs	r3, #13
 800db7c:	647b      	str	r3, [r7, #68]	; 0x44
 800db7e:	f107 030c 	add.w	r3, r7, #12
 800db82:	64bb      	str	r3, [r7, #72]	; 0x48
 800db84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db86:	009a      	lsls	r2, r3, #2
 800db88:	f107 030c 	add.w	r3, r7, #12
 800db8c:	2100      	movs	r1, #0
 800db8e:	4618      	mov	r0, r3
 800db90:	f006 fd2b 	bl	80145ea <memset>
 800db94:	2118      	movs	r1, #24
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7f7 f912 	bl	8004dc0 <mbedtls_mpi_grow>
 800db9c:	6578      	str	r0, [r7, #84]	; 0x54
 800db9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f040 852e 	bne.w	800e602 <ecp_mod_p384+0xaa4>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	689a      	ldr	r2, [r3, #8]
 800dbaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	64fb      	str	r3, [r7, #76]	; 0x4c

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	3330      	adds	r3, #48	; 0x30
 800dbba:	6819      	ldr	r1, [r3, #0]
 800dbbc:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dbc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fb3d 	bl	800d244 <add32>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	3354      	adds	r3, #84	; 0x54
 800dbd0:	6819      	ldr	r1, [r3, #0]
 800dbd2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dbd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff fb32 	bl	800d244 <add32>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	3350      	adds	r3, #80	; 0x50
 800dbe6:	6819      	ldr	r1, [r3, #0]
 800dbe8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dbec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff fb27 	bl	800d244 <add32>
    SUB( 23 );                                              NEXT; // A0
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	335c      	adds	r3, #92	; 0x5c
 800dbfc:	6819      	ldr	r1, [r3, #0]
 800dbfe:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff fb3f 	bl	800d28a <sub32>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	689a      	ldr	r2, [r3, #8]
 800dc10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	689a      	ldr	r2, [r3, #8]
 800dc24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc2e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800dc32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800dc36:	2300      	movs	r3, #0
 800dc38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800dc3c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	da0b      	bge.n	800dc5c <ecp_mod_p384+0xfe>
 800dc44:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dc48:	425b      	negs	r3, r3
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7ff fb18 	bl	800d28a <sub32>
 800dc5a:	e008      	b.n	800dc6e <ecp_mod_p384+0x110>
 800dc5c:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800dc60:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7ff faeb 	bl	800d244 <add32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	3334      	adds	r3, #52	; 0x34
 800dc74:	6819      	ldr	r1, [r3, #0]
 800dc76:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff fae0 	bl	800d244 <add32>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	3358      	adds	r3, #88	; 0x58
 800dc8a:	6819      	ldr	r1, [r3, #0]
 800dc8c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7ff fad5 	bl	800d244 <add32>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	335c      	adds	r3, #92	; 0x5c
 800dca0:	6819      	ldr	r1, [r3, #0]
 800dca2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dca6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7ff faca 	bl	800d244 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	3330      	adds	r3, #48	; 0x30
 800dcb6:	6819      	ldr	r1, [r3, #0]
 800dcb8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dcbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fae2 	bl	800d28a <sub32>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	3350      	adds	r3, #80	; 0x50
 800dccc:	6819      	ldr	r1, [r3, #0]
 800dcce:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dcd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff fad7 	bl	800d28a <sub32>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	689a      	ldr	r2, [r3, #8]
 800dce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcec:	3301      	adds	r3, #1
 800dcee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	689a      	ldr	r2, [r3, #8]
 800dcf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcfe:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800dd02:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800dd06:	2300      	movs	r3, #0
 800dd08:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800dd0c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	da0b      	bge.n	800dd2c <ecp_mod_p384+0x1ce>
 800dd14:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dd18:	425b      	negs	r3, r3
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7ff fab0 	bl	800d28a <sub32>
 800dd2a:	e008      	b.n	800dd3e <ecp_mod_p384+0x1e0>
 800dd2c:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800dd30:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7ff fa83 	bl	800d244 <add32>

    ADD( 14 ); ADD( 23 );
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	3338      	adds	r3, #56	; 0x38
 800dd44:	6819      	ldr	r1, [r3, #0]
 800dd46:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fa78 	bl	800d244 <add32>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	335c      	adds	r3, #92	; 0x5c
 800dd5a:	6819      	ldr	r1, [r3, #0]
 800dd5c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7ff fa6d 	bl	800d244 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	3334      	adds	r3, #52	; 0x34
 800dd70:	6819      	ldr	r1, [r3, #0]
 800dd72:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7ff fa85 	bl	800d28a <sub32>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	3354      	adds	r3, #84	; 0x54
 800dd86:	6819      	ldr	r1, [r3, #0]
 800dd88:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7ff fa7a 	bl	800d28a <sub32>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	689a      	ldr	r2, [r3, #8]
 800dd9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dda6:	3301      	adds	r3, #1
 800dda8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddb8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800ddbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800ddc6:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	da0b      	bge.n	800dde6 <ecp_mod_p384+0x288>
 800ddce:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800ddd2:	425b      	negs	r3, r3
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800ddda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7ff fa53 	bl	800d28a <sub32>
 800dde4:	e008      	b.n	800ddf8 <ecp_mod_p384+0x29a>
 800dde6:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800ddea:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800ddee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7ff fa26 	bl	800d244 <add32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	333c      	adds	r3, #60	; 0x3c
 800ddfe:	6819      	ldr	r1, [r3, #0]
 800de00:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de08:	4618      	mov	r0, r3
 800de0a:	f7ff fa1b 	bl	800d244 <add32>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	3330      	adds	r3, #48	; 0x30
 800de14:	6819      	ldr	r1, [r3, #0]
 800de16:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de1e:	4618      	mov	r0, r3
 800de20:	f7ff fa10 	bl	800d244 <add32>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	3350      	adds	r3, #80	; 0x50
 800de2a:	6819      	ldr	r1, [r3, #0]
 800de2c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fa05 	bl	800d244 <add32>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	3354      	adds	r3, #84	; 0x54
 800de40:	6819      	ldr	r1, [r3, #0]
 800de42:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7ff f9fa 	bl	800d244 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	3338      	adds	r3, #56	; 0x38
 800de56:	6819      	ldr	r1, [r3, #0]
 800de58:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de60:	4618      	mov	r0, r3
 800de62:	f7ff fa12 	bl	800d28a <sub32>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	3358      	adds	r3, #88	; 0x58
 800de6c:	6819      	ldr	r1, [r3, #0]
 800de6e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de76:	4618      	mov	r0, r3
 800de78:	f7ff fa07 	bl	800d28a <sub32>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	335c      	adds	r3, #92	; 0x5c
 800de82:	6819      	ldr	r1, [r3, #0]
 800de84:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7ff f9fc 	bl	800d28a <sub32>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	689a      	ldr	r2, [r3, #8]
 800de96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dea2:	3301      	adds	r3, #1
 800dea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	689a      	ldr	r2, [r3, #8]
 800deaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	4413      	add	r3, r2
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800deb4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800deb8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800debc:	2300      	movs	r3, #0
 800debe:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800dec2:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	da0b      	bge.n	800dee2 <ecp_mod_p384+0x384>
 800deca:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dece:	425b      	negs	r3, r3
 800ded0:	4619      	mov	r1, r3
 800ded2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800ded6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800deda:	4618      	mov	r0, r3
 800dedc:	f7ff f9d5 	bl	800d28a <sub32>
 800dee0:	e008      	b.n	800def4 <ecp_mod_p384+0x396>
 800dee2:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800dee6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800deea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff f9a8 	bl	800d244 <add32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	3354      	adds	r3, #84	; 0x54
 800defa:	6819      	ldr	r1, [r3, #0]
 800defc:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff f99d 	bl	800d244 <add32>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	689b      	ldr	r3, [r3, #8]
 800df0e:	3354      	adds	r3, #84	; 0x54
 800df10:	6819      	ldr	r1, [r3, #0]
 800df12:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7ff f992 	bl	800d244 <add32>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	3340      	adds	r3, #64	; 0x40
 800df26:	6819      	ldr	r1, [r3, #0]
 800df28:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff f987 	bl	800d244 <add32>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	3334      	adds	r3, #52	; 0x34
 800df3c:	6819      	ldr	r1, [r3, #0]
 800df3e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df46:	4618      	mov	r0, r3
 800df48:	f7ff f97c 	bl	800d244 <add32>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	3330      	adds	r3, #48	; 0x30
 800df52:	6819      	ldr	r1, [r3, #0]
 800df54:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff f971 	bl	800d244 <add32>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	3350      	adds	r3, #80	; 0x50
 800df68:	6819      	ldr	r1, [r3, #0]
 800df6a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff f966 	bl	800d244 <add32>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	3358      	adds	r3, #88	; 0x58
 800df7e:	6819      	ldr	r1, [r3, #0]
 800df80:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df88:	4618      	mov	r0, r3
 800df8a:	f7ff f95b 	bl	800d244 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	333c      	adds	r3, #60	; 0x3c
 800df94:	6819      	ldr	r1, [r3, #0]
 800df96:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff f973 	bl	800d28a <sub32>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	335c      	adds	r3, #92	; 0x5c
 800dfaa:	6819      	ldr	r1, [r3, #0]
 800dfac:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dfb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7ff f968 	bl	800d28a <sub32>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	335c      	adds	r3, #92	; 0x5c
 800dfc0:	6819      	ldr	r1, [r3, #0]
 800dfc2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dfc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7ff f95d 	bl	800d28a <sub32>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	689a      	ldr	r2, [r3, #8]
 800dfd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	689a      	ldr	r2, [r3, #8]
 800dfe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	4413      	add	r3, r2
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dff2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800dff6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800dffa:	2300      	movs	r3, #0
 800dffc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e000:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e004:	2b00      	cmp	r3, #0
 800e006:	da0b      	bge.n	800e020 <ecp_mod_p384+0x4c2>
 800e008:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e00c:	425b      	negs	r3, r3
 800e00e:	4619      	mov	r1, r3
 800e010:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e018:	4618      	mov	r0, r3
 800e01a:	f7ff f936 	bl	800d28a <sub32>
 800e01e:	e008      	b.n	800e032 <ecp_mod_p384+0x4d4>
 800e020:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e024:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e028:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7ff f909 	bl	800d244 <add32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	3358      	adds	r3, #88	; 0x58
 800e038:	6819      	ldr	r1, [r3, #0]
 800e03a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e03e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e042:	4618      	mov	r0, r3
 800e044:	f7ff f8fe 	bl	800d244 <add32>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	3358      	adds	r3, #88	; 0x58
 800e04e:	6819      	ldr	r1, [r3, #0]
 800e050:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e054:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e058:	4618      	mov	r0, r3
 800e05a:	f7ff f8f3 	bl	800d244 <add32>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	3344      	adds	r3, #68	; 0x44
 800e064:	6819      	ldr	r1, [r3, #0]
 800e066:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e06a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff f8e8 	bl	800d244 <add32>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	3338      	adds	r3, #56	; 0x38
 800e07a:	6819      	ldr	r1, [r3, #0]
 800e07c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff f8dd 	bl	800d244 <add32>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	3334      	adds	r3, #52	; 0x34
 800e090:	6819      	ldr	r1, [r3, #0]
 800e092:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e096:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff f8d2 	bl	800d244 <add32>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	3354      	adds	r3, #84	; 0x54
 800e0a6:	6819      	ldr	r1, [r3, #0]
 800e0a8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e0ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff f8c7 	bl	800d244 <add32>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	335c      	adds	r3, #92	; 0x5c
 800e0bc:	6819      	ldr	r1, [r3, #0]
 800e0be:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e0c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff f8bc 	bl	800d244 <add32>
    SUB( 16 );                                              NEXT; // A5
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	3340      	adds	r3, #64	; 0x40
 800e0d2:	6819      	ldr	r1, [r3, #0]
 800e0d4:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e0d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff f8d4 	bl	800d28a <sub32>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	689a      	ldr	r2, [r3, #8]
 800e0e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	689a      	ldr	r2, [r3, #8]
 800e0fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e104:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800e108:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800e10c:	2300      	movs	r3, #0
 800e10e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e112:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e116:	2b00      	cmp	r3, #0
 800e118:	da0b      	bge.n	800e132 <ecp_mod_p384+0x5d4>
 800e11a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e11e:	425b      	negs	r3, r3
 800e120:	4619      	mov	r1, r3
 800e122:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e126:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff f8ad 	bl	800d28a <sub32>
 800e130:	e008      	b.n	800e144 <ecp_mod_p384+0x5e6>
 800e132:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e136:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e13a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e13e:	4618      	mov	r0, r3
 800e140:	f7ff f880 	bl	800d244 <add32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	335c      	adds	r3, #92	; 0x5c
 800e14a:	6819      	ldr	r1, [r3, #0]
 800e14c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff f875 	bl	800d244 <add32>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	335c      	adds	r3, #92	; 0x5c
 800e160:	6819      	ldr	r1, [r3, #0]
 800e162:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e166:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff f86a 	bl	800d244 <add32>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	3348      	adds	r3, #72	; 0x48
 800e176:	6819      	ldr	r1, [r3, #0]
 800e178:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e17c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e180:	4618      	mov	r0, r3
 800e182:	f7ff f85f 	bl	800d244 <add32>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	333c      	adds	r3, #60	; 0x3c
 800e18c:	6819      	ldr	r1, [r3, #0]
 800e18e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e192:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e196:	4618      	mov	r0, r3
 800e198:	f7ff f854 	bl	800d244 <add32>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	3338      	adds	r3, #56	; 0x38
 800e1a2:	6819      	ldr	r1, [r3, #0]
 800e1a4:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e1a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7ff f849 	bl	800d244 <add32>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	3358      	adds	r3, #88	; 0x58
 800e1b8:	6819      	ldr	r1, [r3, #0]
 800e1ba:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e1be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff f83e 	bl	800d244 <add32>
    SUB( 17 );                                              NEXT; // A6
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	3344      	adds	r3, #68	; 0x44
 800e1ce:	6819      	ldr	r1, [r3, #0]
 800e1d0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e1d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff f856 	bl	800d28a <sub32>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	689a      	ldr	r2, [r3, #8]
 800e1e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	4413      	add	r3, r2
 800e1e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1ea:	601a      	str	r2, [r3, #0]
 800e1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	689a      	ldr	r2, [r3, #8]
 800e1f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e200:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800e204:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800e208:	2300      	movs	r3, #0
 800e20a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e20e:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e212:	2b00      	cmp	r3, #0
 800e214:	da0b      	bge.n	800e22e <ecp_mod_p384+0x6d0>
 800e216:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e21a:	425b      	negs	r3, r3
 800e21c:	4619      	mov	r1, r3
 800e21e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff f82f 	bl	800d28a <sub32>
 800e22c:	e008      	b.n	800e240 <ecp_mod_p384+0x6e2>
 800e22e:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e232:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e236:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff f802 	bl	800d244 <add32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	334c      	adds	r3, #76	; 0x4c
 800e246:	6819      	ldr	r1, [r3, #0]
 800e248:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e24c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e250:	4618      	mov	r0, r3
 800e252:	f7fe fff7 	bl	800d244 <add32>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	3340      	adds	r3, #64	; 0x40
 800e25c:	6819      	ldr	r1, [r3, #0]
 800e25e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e262:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e266:	4618      	mov	r0, r3
 800e268:	f7fe ffec 	bl	800d244 <add32>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	333c      	adds	r3, #60	; 0x3c
 800e272:	6819      	ldr	r1, [r3, #0]
 800e274:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e278:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fe ffe1 	bl	800d244 <add32>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	335c      	adds	r3, #92	; 0x5c
 800e288:	6819      	ldr	r1, [r3, #0]
 800e28a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e28e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e292:	4618      	mov	r0, r3
 800e294:	f7fe ffd6 	bl	800d244 <add32>
    SUB( 18 );                                              NEXT; // A7
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	3348      	adds	r3, #72	; 0x48
 800e29e:	6819      	ldr	r1, [r3, #0]
 800e2a0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e2a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fe ffee 	bl	800d28a <sub32>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689a      	ldr	r2, [r3, #8]
 800e2b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2be:	3301      	adds	r3, #1
 800e2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	689a      	ldr	r2, [r3, #8]
 800e2c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2d0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800e2d4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e2de:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	da0b      	bge.n	800e2fe <ecp_mod_p384+0x7a0>
 800e2e6:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e2ea:	425b      	negs	r3, r3
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e2f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fe ffc7 	bl	800d28a <sub32>
 800e2fc:	e008      	b.n	800e310 <ecp_mod_p384+0x7b2>
 800e2fe:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e302:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e306:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fe ff9a 	bl	800d244 <add32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	3350      	adds	r3, #80	; 0x50
 800e316:	6819      	ldr	r1, [r3, #0]
 800e318:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e31c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e320:	4618      	mov	r0, r3
 800e322:	f7fe ff8f 	bl	800d244 <add32>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	3344      	adds	r3, #68	; 0x44
 800e32c:	6819      	ldr	r1, [r3, #0]
 800e32e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e332:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe ff84 	bl	800d244 <add32>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	3340      	adds	r3, #64	; 0x40
 800e342:	6819      	ldr	r1, [r3, #0]
 800e344:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e348:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7fe ff79 	bl	800d244 <add32>
    SUB( 19 );                                              NEXT; // A8
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	334c      	adds	r3, #76	; 0x4c
 800e358:	6819      	ldr	r1, [r3, #0]
 800e35a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e35e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e362:	4618      	mov	r0, r3
 800e364:	f7fe ff91 	bl	800d28a <sub32>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	689a      	ldr	r2, [r3, #8]
 800e36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4413      	add	r3, r2
 800e372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e374:	601a      	str	r2, [r3, #0]
 800e376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e378:	3301      	adds	r3, #1
 800e37a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	689a      	ldr	r2, [r3, #8]
 800e380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	4413      	add	r3, r2
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e38a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800e38e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800e392:	2300      	movs	r3, #0
 800e394:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e398:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	da0b      	bge.n	800e3b8 <ecp_mod_p384+0x85a>
 800e3a0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e3a4:	425b      	negs	r3, r3
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e3ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fe ff6a 	bl	800d28a <sub32>
 800e3b6:	e008      	b.n	800e3ca <ecp_mod_p384+0x86c>
 800e3b8:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e3bc:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e3c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fe ff3d 	bl	800d244 <add32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	3354      	adds	r3, #84	; 0x54
 800e3d0:	6819      	ldr	r1, [r3, #0]
 800e3d2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e3d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe ff32 	bl	800d244 <add32>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	3348      	adds	r3, #72	; 0x48
 800e3e6:	6819      	ldr	r1, [r3, #0]
 800e3e8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e3ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fe ff27 	bl	800d244 <add32>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	3344      	adds	r3, #68	; 0x44
 800e3fc:	6819      	ldr	r1, [r3, #0]
 800e3fe:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e402:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe ff1c 	bl	800d244 <add32>
    SUB( 20 );                                              NEXT; // A9
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	3350      	adds	r3, #80	; 0x50
 800e412:	6819      	ldr	r1, [r3, #0]
 800e414:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e418:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fe ff34 	bl	800d28a <sub32>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	689a      	ldr	r2, [r3, #8]
 800e426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e42e:	601a      	str	r2, [r3, #0]
 800e430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e432:	3301      	adds	r3, #1
 800e434:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	689a      	ldr	r2, [r3, #8]
 800e43a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e444:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800e448:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800e44c:	2300      	movs	r3, #0
 800e44e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e452:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e456:	2b00      	cmp	r3, #0
 800e458:	da0b      	bge.n	800e472 <ecp_mod_p384+0x914>
 800e45a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e45e:	425b      	negs	r3, r3
 800e460:	4619      	mov	r1, r3
 800e462:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e466:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fe ff0d 	bl	800d28a <sub32>
 800e470:	e008      	b.n	800e484 <ecp_mod_p384+0x926>
 800e472:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e476:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e47a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fe fee0 	bl	800d244 <add32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	3358      	adds	r3, #88	; 0x58
 800e48a:	6819      	ldr	r1, [r3, #0]
 800e48c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe fed5 	bl	800d244 <add32>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	334c      	adds	r3, #76	; 0x4c
 800e4a0:	6819      	ldr	r1, [r3, #0]
 800e4a2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e4a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fe feca 	bl	800d244 <add32>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	3348      	adds	r3, #72	; 0x48
 800e4b6:	6819      	ldr	r1, [r3, #0]
 800e4b8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e4bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe febf 	bl	800d244 <add32>
    SUB( 21 );                                              NEXT; // A10
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	3354      	adds	r3, #84	; 0x54
 800e4cc:	6819      	ldr	r1, [r3, #0]
 800e4ce:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e4d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fed7 	bl	800d28a <sub32>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	689a      	ldr	r2, [r3, #8]
 800e4e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4e8:	601a      	str	r2, [r3, #0]
 800e4ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	689a      	ldr	r2, [r3, #8]
 800e4f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4413      	add	r3, r2
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4fe:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800e502:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800e506:	2300      	movs	r3, #0
 800e508:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e50c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e510:	2b00      	cmp	r3, #0
 800e512:	da0b      	bge.n	800e52c <ecp_mod_p384+0x9ce>
 800e514:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e518:	425b      	negs	r3, r3
 800e51a:	4619      	mov	r1, r3
 800e51c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e520:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe feb0 	bl	800d28a <sub32>
 800e52a:	e008      	b.n	800e53e <ecp_mod_p384+0x9e0>
 800e52c:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e530:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e534:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fe fe83 	bl	800d244 <add32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	335c      	adds	r3, #92	; 0x5c
 800e544:	6819      	ldr	r1, [r3, #0]
 800e546:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e54a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fe fe78 	bl	800d244 <add32>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	3350      	adds	r3, #80	; 0x50
 800e55a:	6819      	ldr	r1, [r3, #0]
 800e55c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e560:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe fe6d 	bl	800d244 <add32>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	334c      	adds	r3, #76	; 0x4c
 800e570:	6819      	ldr	r1, [r3, #0]
 800e572:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e576:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fe fe62 	bl	800d244 <add32>
    SUB( 22 );                                              LAST; // A11
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	3358      	adds	r3, #88	; 0x58
 800e586:	6819      	ldr	r1, [r3, #0]
 800e588:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e58c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e590:	4618      	mov	r0, r3
 800e592:	f7fe fe7a 	bl	800d28a <sub32>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	689a      	ldr	r2, [r3, #8]
 800e59a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4413      	add	r3, r2
 800e5a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5a2:	601a      	str	r2, [r3, #0]
 800e5a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5aa:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800e5ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e5b2:	b25b      	sxtb	r3, r3
 800e5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	689a      	ldr	r2, [r3, #8]
 800e5ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5c8:	e006      	b.n	800e5d8 <ecp_mod_p384+0xa7a>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	689a      	ldr	r2, [r3, #8]
 800e5ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4413      	add	r3, r2
 800e5d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5da:	3301      	adds	r3, #1
 800e5dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d3f0      	bcc.n	800e5ca <ecp_mod_p384+0xa6c>
 800e5e8:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	da0a      	bge.n	800e606 <ecp_mod_p384+0xaa8>
 800e5f0:	f997 1052 	ldrsb.w	r1, [r7, #82]	; 0x52
 800e5f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e5f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7fe fe68 	bl	800d2d0 <fix_negative>
 800e600:	e002      	b.n	800e608 <ecp_mod_p384+0xaaa>
    INIT( 384 );
 800e602:	bf00      	nop
 800e604:	e000      	b.n	800e608 <ecp_mod_p384+0xaaa>

cleanup:
 800e606:	bf00      	nop
    return( ret );
 800e608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3760      	adds	r7, #96	; 0x60
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
	...

0800e614 <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 800e614:	b5b0      	push	{r4, r5, r7, lr}
 800e616:	b0a8      	sub	sp, #160	; 0xa0
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	2b0e      	cmp	r3, #14
 800e622:	d801      	bhi.n	800e628 <ecp_mod_p448+0x14>
        return( 0 );
 800e624:	2300      	movs	r3, #0
 800e626:	e0c8      	b.n	800e7ba <ecp_mod_p448+0x1a6>

    /* M = A1 */
    M.s = 1;
 800e628:	2301      	movs	r3, #1
 800e62a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    M.n = N->n - ( P448_WIDTH );
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	3b0e      	subs	r3, #14
 800e634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if( M.n > P448_WIDTH )
 800e638:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e63c:	2b0e      	cmp	r3, #14
 800e63e:	d901      	bls.n	800e644 <ecp_mod_p448+0x30>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e640:	4b60      	ldr	r3, [pc, #384]	; (800e7c4 <ecp_mod_p448+0x1b0>)
 800e642:	e0ba      	b.n	800e7ba <ecp_mod_p448+0x1a6>
    M.p = Mp;
 800e644:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    memset( Mp, 0, sizeof( Mp ) );
 800e64c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e650:	223c      	movs	r2, #60	; 0x3c
 800e652:	2100      	movs	r1, #0
 800e654:	4618      	mov	r0, r3
 800e656:	f005 ffc8 	bl	80145ea <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e666:	009a      	lsls	r2, r3, #2
 800e668:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e66c:	4618      	mov	r0, r3
 800e66e:	f005 ff98 	bl	80145a2 <memcpy>

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
 800e672:	230e      	movs	r3, #14
 800e674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e678:	e00c      	b.n	800e694 <ecp_mod_p448+0x80>
        N->p[i] = 0;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689a      	ldr	r2, [r3, #8]
 800e67e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4413      	add	r3, r2
 800e686:	2200      	movs	r2, #0
 800e688:	601a      	str	r2, [r3, #0]
    for( i = P448_WIDTH; i < N->n; i++ )
 800e68a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e68e:	3301      	adds	r3, #1
 800e690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d3ec      	bcc.n	800e67a <ecp_mod_p448+0x66>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800e6a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	6879      	ldr	r1, [r7, #4]
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7f7 fce0 	bl	800606e <mbedtls_mpi_add_mpi>
 800e6ae:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e6b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d174      	bne.n	800e7a4 <ecp_mod_p448+0x190>

    /* Q = B1, N += B1 */
    Q = M;
 800e6ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e6be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800e6c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800e6c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Q.p = Qp;
 800e6c8:	f107 030c 	add.w	r3, r7, #12
 800e6cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    memcpy( Qp, Mp, sizeof( Qp ) );
 800e6d0:	f107 040c 	add.w	r4, r7, #12
 800e6d4:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800e6d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e6dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e6e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e6e8:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 800e6ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e6f0:	21e0      	movs	r1, #224	; 0xe0
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7f7 f970 	bl	80059d8 <mbedtls_mpi_shift_r>
 800e6f8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e6fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d151      	bne.n	800e7a8 <ecp_mod_p448+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 800e704:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e708:	461a      	mov	r2, r3
 800e70a:	6879      	ldr	r1, [r7, #4]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7f7 fcae 	bl	800606e <mbedtls_mpi_add_mpi>
 800e712:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d146      	bne.n	800e7ac <ecp_mod_p448+0x198>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 800e71e:	2307      	movs	r3, #7
 800e720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e724:	e00d      	b.n	800e742 <ecp_mod_p448+0x12e>
        Mp[i] = 0;
 800e726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e730:	4413      	add	r3, r2
 800e732:	2200      	movs	r2, #0
 800e734:	f843 2c5c 	str.w	r2, [r3, #-92]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 800e738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e73c:	3301      	adds	r3, #1
 800e73e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e746:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d3eb      	bcc.n	800e726 <ecp_mod_p448+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 800e74e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e752:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e756:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7f7 fc87 	bl	800606e <mbedtls_mpi_add_mpi>
 800e760:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d121      	bne.n	800e7b0 <ecp_mod_p448+0x19c>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 800e76c:	230f      	movs	r3, #15
 800e76e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 800e772:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e776:	21e0      	movs	r1, #224	; 0xe0
 800e778:	4618      	mov	r0, r3
 800e77a:	f7f7 f888 	bl	800588e <mbedtls_mpi_shift_l>
 800e77e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e782:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e786:	2b00      	cmp	r3, #0
 800e788:	d114      	bne.n	800e7b4 <ecp_mod_p448+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800e78a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e78e:	461a      	mov	r2, r3
 800e790:	6879      	ldr	r1, [r7, #4]
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7f7 fc6b 	bl	800606e <mbedtls_mpi_add_mpi>
 800e798:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e79c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7a0:	2b00      	cmp	r3, #0

cleanup:
 800e7a2:	e008      	b.n	800e7b6 <ecp_mod_p448+0x1a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800e7a4:	bf00      	nop
 800e7a6:	e006      	b.n	800e7b6 <ecp_mod_p448+0x1a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 800e7a8:	bf00      	nop
 800e7aa:	e004      	b.n	800e7b6 <ecp_mod_p448+0x1a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 800e7ac:	bf00      	nop
 800e7ae:	e002      	b.n	800e7b6 <ecp_mod_p448+0x1a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 800e7b0:	bf00      	nop
 800e7b2:	e000      	b.n	800e7b6 <ecp_mod_p448+0x1a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 800e7b4:	bf00      	nop
    return( ret );
 800e7b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	37a0      	adds	r7, #160	; 0xa0
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	ffffb080 	.word	0xffffb080

0800e7c8 <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	33e4      	adds	r3, #228	; 0xe4
 800e7dc:	2228      	movs	r2, #40	; 0x28
 800e7de:	2100      	movs	r1, #0
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f005 ff02 	bl	80145ea <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3308      	adds	r3, #8
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f003 fd01 	bl	80121f8 <mbedtls_sha512_init>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 800e7f6:	bf00      	nop
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b098      	sub	sp, #96	; 0x60
 800e802:	af00      	add	r7, sp, #0
 800e804:	60f8      	str	r0, [r7, #12]
 800e806:	607a      	str	r2, [r7, #4]
 800e808:	603b      	str	r3, [r7, #0]
 800e80a:	460b      	mov	r3, r1
 800e80c:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	65fb      	str	r3, [r7, #92]	; 0x5c
    const unsigned char *p = data;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	65bb      	str	r3, [r7, #88]	; 0x58
    int ret = 0;
 800e816:	2300      	movs	r3, #0
 800e818:	657b      	str	r3, [r7, #84]	; 0x54

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800e81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e81c:	2b40      	cmp	r3, #64	; 0x40
 800e81e:	d90f      	bls.n	800e840 <entropy_update+0x42>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 800e820:	f107 0210 	add.w	r2, r7, #16
 800e824:	2300      	movs	r3, #0
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f005 fe2a 	bl	8014482 <mbedtls_sha512_ret>
 800e82e:	6578      	str	r0, [r7, #84]	; 0x54
 800e830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e832:	2b00      	cmp	r3, #0
 800e834:	d131      	bne.n	800e89a <entropy_update+0x9c>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 800e836:	f107 0310 	add.w	r3, r7, #16
 800e83a:	65bb      	str	r3, [r7, #88]	; 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 800e83c:	2340      	movs	r3, #64	; 0x40
 800e83e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    header[0] = source_id;
 800e840:	7afb      	ldrb	r3, [r7, #11]
 800e842:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    header[1] = use_len & 0xFF;
 800e846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d109      	bne.n	800e86a <entropy_update+0x6c>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	3308      	adds	r3, #8
    if( ctx->accumulator_started == 0 &&
 800e85a:	2100      	movs	r1, #0
 800e85c:	4618      	mov	r0, r3
 800e85e:	f003 fcfb 	bl	8012258 <mbedtls_sha512_starts_ret>
 800e862:	6578      	str	r0, [r7, #84]	; 0x54
 800e864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e866:	2b00      	cmp	r3, #0
 800e868:	d119      	bne.n	800e89e <entropy_update+0xa0>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2201      	movs	r2, #1
 800e86e:	601a      	str	r2, [r3, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	3308      	adds	r3, #8
 800e874:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e878:	2202      	movs	r2, #2
 800e87a:	4618      	mov	r0, r3
 800e87c:	f005 f8fc 	bl	8013a78 <mbedtls_sha512_update_ret>
 800e880:	6578      	str	r0, [r7, #84]	; 0x54
 800e882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10c      	bne.n	800e8a2 <entropy_update+0xa4>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3308      	adds	r3, #8
 800e88c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e88e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e890:	4618      	mov	r0, r3
 800e892:	f005 f8f1 	bl	8013a78 <mbedtls_sha512_update_ret>
 800e896:	6578      	str	r0, [r7, #84]	; 0x54
 800e898:	e004      	b.n	800e8a4 <entropy_update+0xa6>
            goto cleanup;
 800e89a:	bf00      	nop
 800e89c:	e002      	b.n	800e8a4 <entropy_update+0xa6>
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
 800e89e:	bf00      	nop
 800e8a0:	e000      	b.n	800e8a4 <entropy_update+0xa6>
        goto cleanup;
 800e8a2:	bf00      	nop
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800e8a4:	f107 0310 	add.w	r3, r7, #16
 800e8a8:	2140      	movs	r1, #64	; 0x40
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f001 ffd6 	bl	801085c <mbedtls_platform_zeroize>

    return( ret );
 800e8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3760      	adds	r7, #96	; 0x60
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 800e8ba:	b590      	push	{r4, r7, lr}
 800e8bc:	b0a7      	sub	sp, #156	; 0x9c
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
    int ret, i, have_one_strong = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d102      	bne.n	800e8d8 <entropy_gather_internal+0x1e>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 800e8d2:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800e8d6:	e07f      	b.n	800e9d8 <entropy_gather_internal+0x11e>

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e8de:	e060      	b.n	800e9a2 <entropy_gather_internal+0xe8>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 800e8e0:	6879      	ldr	r1, [r7, #4]
 800e8e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	440b      	add	r3, r1
 800e8f0:	33f4      	adds	r3, #244	; 0xf4
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d102      	bne.n	800e8fe <entropy_gather_internal+0x44>
            have_one_strong = 1;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        olen = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	60bb      	str	r3, [r7, #8]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 800e902:	6879      	ldr	r1, [r7, #4]
 800e904:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e908:	4613      	mov	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	440b      	add	r3, r1
 800e912:	33e4      	adds	r3, #228	; 0xe4
 800e914:	681c      	ldr	r4, [r3, #0]
 800e916:	6879      	ldr	r1, [r7, #4]
 800e918:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e91c:	4613      	mov	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	440b      	add	r3, r1
 800e926:	33e8      	adds	r3, #232	; 0xe8
 800e928:	6818      	ldr	r0, [r3, #0]
 800e92a:	f107 0308 	add.w	r3, r7, #8
 800e92e:	f107 010c 	add.w	r1, r7, #12
 800e932:	2280      	movs	r2, #128	; 0x80
 800e934:	47a0      	blx	r4
 800e936:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800e93a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d13f      	bne.n	800e9c2 <entropy_gather_internal+0x108>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d027      	beq.n	800e998 <entropy_gather_internal+0xde>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 800e948:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e94c:	b2d9      	uxtb	r1, r3
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	f107 020c 	add.w	r2, r7, #12
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f7ff ff52 	bl	800e7fe <entropy_update>
 800e95a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800e95e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <entropy_gather_internal+0xb2>
                                        buf, olen ) ) != 0 )
                return( ret );
 800e966:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e96a:	e035      	b.n	800e9d8 <entropy_gather_internal+0x11e>
            ctx->source[i].size += olen;
 800e96c:	6879      	ldr	r1, [r7, #4]
 800e96e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e972:	4613      	mov	r3, r2
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	4413      	add	r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	440b      	add	r3, r1
 800e97c:	33ec      	adds	r3, #236	; 0xec
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	18d1      	adds	r1, r2, r3
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e98a:	4613      	mov	r3, r2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	4403      	add	r3, r0
 800e994:	33ec      	adds	r3, #236	; 0xec
 800e996:	6019      	str	r1, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800e998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e99c:	3301      	adds	r3, #1
 800e99e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	db97      	blt.n	800e8e0 <entropy_gather_internal+0x26>
        }
    }

    if( have_one_strong == 0 )
 800e9b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d106      	bne.n	800e9c6 <entropy_gather_internal+0x10c>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 800e9b8:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 800e9bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e9c0:	e002      	b.n	800e9c8 <entropy_gather_internal+0x10e>
            goto cleanup;
 800e9c2:	bf00      	nop
 800e9c4:	e000      	b.n	800e9c8 <entropy_gather_internal+0x10e>

cleanup:
 800e9c6:	bf00      	nop
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800e9c8:	f107 030c 	add.w	r3, r7, #12
 800e9cc:	2180      	movs	r1, #128	; 0x80
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f001 ff44 	bl	801085c <mbedtls_platform_zeroize>

    return( ret );
 800e9d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	379c      	adds	r7, #156	; 0x9c
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd90      	pop	{r4, r7, pc}

0800e9e0 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b09a      	sub	sp, #104	; 0x68
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, done;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	663b      	str	r3, [r7, #96]	; 0x60
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b40      	cmp	r3, #64	; 0x40
 800e9f8:	d902      	bls.n	800ea00 <mbedtls_entropy_func+0x20>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 800e9fa:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800e9fe:	e0a7      	b.n	800eb50 <mbedtls_entropy_func+0x170>
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 800ea00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	663a      	str	r2, [r7, #96]	; 0x60
 800ea06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea0a:	dd03      	ble.n	800ea14 <mbedtls_entropy_func+0x34>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800ea0c:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800ea10:	667b      	str	r3, [r7, #100]	; 0x64
            goto exit;
 800ea12:	e096      	b.n	800eb42 <mbedtls_entropy_func+0x162>
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 800ea14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ea16:	f7ff ff50 	bl	800e8ba <entropy_gather_internal>
 800ea1a:	6678      	str	r0, [r7, #100]	; 0x64
 800ea1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f040 8086 	bne.w	800eb30 <mbedtls_entropy_func+0x150>
            goto exit;

        done = 1;
 800ea24:	2301      	movs	r3, #1
 800ea26:	65bb      	str	r3, [r7, #88]	; 0x58
        for( i = 0; i < ctx->source_count; i++ )
 800ea28:	2300      	movs	r3, #0
 800ea2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea2c:	e018      	b.n	800ea60 <mbedtls_entropy_func+0x80>
            if( ctx->source[i].size < ctx->source[i].threshold )
 800ea2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea32:	4613      	mov	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4413      	add	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	440b      	add	r3, r1
 800ea3c:	33ec      	adds	r3, #236	; 0xec
 800ea3e:	6819      	ldr	r1, [r3, #0]
 800ea40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ea42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea44:	4613      	mov	r3, r2
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4413      	add	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4403      	add	r3, r0
 800ea4e:	33f0      	adds	r3, #240	; 0xf0
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4299      	cmp	r1, r3
 800ea54:	d201      	bcs.n	800ea5a <mbedtls_entropy_func+0x7a>
                done = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	65bb      	str	r3, [r7, #88]	; 0x58
        for( i = 0; i < ctx->source_count; i++ )
 800ea5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ea66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	dbe0      	blt.n	800ea2e <mbedtls_entropy_func+0x4e>
    }
    while( ! done );
 800ea6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d0c6      	beq.n	800ea00 <mbedtls_entropy_func+0x20>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 800ea72:	f107 0314 	add.w	r3, r7, #20
 800ea76:	2240      	movs	r2, #64	; 0x40
 800ea78:	2100      	movs	r1, #0
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f005 fdb5 	bl	80145ea <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 800ea80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea82:	3308      	adds	r3, #8
 800ea84:	f107 0214 	add.w	r2, r7, #20
 800ea88:	4611      	mov	r1, r2
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f005 f879 	bl	8013b82 <mbedtls_sha512_finish_ret>
 800ea90:	6678      	str	r0, [r7, #100]	; 0x64
 800ea92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d14d      	bne.n	800eb34 <mbedtls_entropy_func+0x154>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 800ea98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea9a:	3308      	adds	r3, #8
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f003 fbb8 	bl	8012212 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 800eaa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaa4:	3308      	adds	r3, #8
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f003 fba6 	bl	80121f8 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800eaac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaae:	3308      	adds	r3, #8
 800eab0:	2100      	movs	r1, #0
 800eab2:	4618      	mov	r0, r3
 800eab4:	f003 fbd0 	bl	8012258 <mbedtls_sha512_starts_ret>
 800eab8:	6678      	str	r0, [r7, #100]	; 0x64
 800eaba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d13b      	bne.n	800eb38 <mbedtls_entropy_func+0x158>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 800eac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eac2:	3308      	adds	r3, #8
 800eac4:	f107 0114 	add.w	r1, r7, #20
 800eac8:	2240      	movs	r2, #64	; 0x40
 800eaca:	4618      	mov	r0, r3
 800eacc:	f004 ffd4 	bl	8013a78 <mbedtls_sha512_update_ret>
 800ead0:	6678      	str	r0, [r7, #100]	; 0x64
 800ead2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d131      	bne.n	800eb3c <mbedtls_entropy_func+0x15c>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 800ead8:	f107 0214 	add.w	r2, r7, #20
 800eadc:	f107 0014 	add.w	r0, r7, #20
 800eae0:	2300      	movs	r3, #0
 800eae2:	2140      	movs	r1, #64	; 0x40
 800eae4:	f005 fccd 	bl	8014482 <mbedtls_sha512_ret>
 800eae8:	6678      	str	r0, [r7, #100]	; 0x64
 800eaea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d127      	bne.n	800eb40 <mbedtls_entropy_func+0x160>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eaf4:	e00c      	b.n	800eb10 <mbedtls_entropy_func+0x130>
        ctx->source[i].size = 0;
 800eaf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eaf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eafa:	4613      	mov	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4413      	add	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	440b      	add	r3, r1
 800eb04:	33ec      	adds	r3, #236	; 0xec
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800eb0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	dbec      	blt.n	800eaf6 <mbedtls_entropy_func+0x116>

    memcpy( output, buf, len );
 800eb1c:	f107 0314 	add.w	r3, r7, #20
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	4619      	mov	r1, r3
 800eb24:	68b8      	ldr	r0, [r7, #8]
 800eb26:	f005 fd3c 	bl	80145a2 <memcpy>

    ret = 0;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	667b      	str	r3, [r7, #100]	; 0x64
 800eb2e:	e008      	b.n	800eb42 <mbedtls_entropy_func+0x162>
            goto exit;
 800eb30:	bf00      	nop
 800eb32:	e006      	b.n	800eb42 <mbedtls_entropy_func+0x162>
        goto exit;
 800eb34:	bf00      	nop
 800eb36:	e004      	b.n	800eb42 <mbedtls_entropy_func+0x162>
        goto exit;
 800eb38:	bf00      	nop
 800eb3a:	e002      	b.n	800eb42 <mbedtls_entropy_func+0x162>
        goto exit;
 800eb3c:	bf00      	nop
 800eb3e:	e000      	b.n	800eb42 <mbedtls_entropy_func+0x162>
        goto exit;
 800eb40:	bf00      	nop

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800eb42:	f107 0314 	add.w	r3, r7, #20
 800eb46:	2140      	movs	r1, #64	; 0x40
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f001 fe87 	bl	801085c <mbedtls_platform_zeroize>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800eb4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3768      	adds	r7, #104	; 0x68
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <mbedtls_strerror>:
#include "mbedtls/xtea.h"
#endif


void mbedtls_strerror( int ret, char *buf, size_t buflen )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
    size_t len;
    int use_ret;

    if( buflen == 0 )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 8542 	beq.w	800f5f0 <mbedtls_strerror+0xa98>
        return;

    memset( buf, 0x00, buflen );
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	2100      	movs	r1, #0
 800eb70:	68b8      	ldr	r0, [r7, #8]
 800eb72:	f005 fd3a 	bl	80145ea <memset>

    if( ret < 0 )
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	da02      	bge.n	800eb82 <mbedtls_strerror+0x2a>
        ret = -ret;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	425b      	negs	r3, r3
 800eb80:	60fb      	str	r3, [r7, #12]

    if( ret & 0xFF80 )
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	f64f 7380 	movw	r3, #65408	; 0xff80
 800eb88:	4013      	ands	r3, r2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f000 82b5 	beq.w	800f0fa <mbedtls_strerror+0x5a2>
    {
        use_ret = ret & 0xFF80;
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	f64f 7380 	movw	r3, #65408	; 0xff80
 800eb96:	4013      	ands	r3, r2
 800eb98:	617b      	str	r3, [r7, #20]

        // High level error codes
        //
        // BEGIN generated code
#if defined(MBEDTLS_CIPHER_C)
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	f5b3 4fc1 	cmp.w	r3, #24704	; 0x6080
 800eba0:	d104      	bne.n	800ebac <mbedtls_strerror+0x54>
            mbedtls_snprintf( buf, buflen, "CIPHER - The selected feature is not available" );
 800eba2:	4aa3      	ldr	r2, [pc, #652]	; (800ee30 <mbedtls_strerror+0x2d8>)
 800eba4:	6879      	ldr	r1, [r7, #4]
 800eba6:	68b8      	ldr	r0, [r7, #8]
 800eba8:	f005 fdee 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 800ebb2:	d104      	bne.n	800ebbe <mbedtls_strerror+0x66>
            mbedtls_snprintf( buf, buflen, "CIPHER - Bad input parameters" );
 800ebb4:	4a9f      	ldr	r2, [pc, #636]	; (800ee34 <mbedtls_strerror+0x2dc>)
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	68b8      	ldr	r0, [r7, #8]
 800ebba:	f005 fde5 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 800ebc4:	d104      	bne.n	800ebd0 <mbedtls_strerror+0x78>
            mbedtls_snprintf( buf, buflen, "CIPHER - Failed to allocate memory" );
 800ebc6:	4a9c      	ldr	r2, [pc, #624]	; (800ee38 <mbedtls_strerror+0x2e0>)
 800ebc8:	6879      	ldr	r1, [r7, #4]
 800ebca:	68b8      	ldr	r0, [r7, #8]
 800ebcc:	f005 fddc 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 800ebd6:	d104      	bne.n	800ebe2 <mbedtls_strerror+0x8a>
            mbedtls_snprintf( buf, buflen, "CIPHER - Input data contains invalid padding and is rejected" );
 800ebd8:	4a98      	ldr	r2, [pc, #608]	; (800ee3c <mbedtls_strerror+0x2e4>)
 800ebda:	6879      	ldr	r1, [r7, #4]
 800ebdc:	68b8      	ldr	r0, [r7, #8]
 800ebde:	f005 fdd3 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 800ebe8:	d104      	bne.n	800ebf4 <mbedtls_strerror+0x9c>
            mbedtls_snprintf( buf, buflen, "CIPHER - Decryption of block requires a full block" );
 800ebea:	4a95      	ldr	r2, [pc, #596]	; (800ee40 <mbedtls_strerror+0x2e8>)
 800ebec:	6879      	ldr	r1, [r7, #4]
 800ebee:	68b8      	ldr	r0, [r7, #8]
 800ebf0:	f005 fdca 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 800ebfa:	d104      	bne.n	800ec06 <mbedtls_strerror+0xae>
            mbedtls_snprintf( buf, buflen, "CIPHER - Authentication failed (for AEAD modes)" );
 800ebfc:	4a91      	ldr	r2, [pc, #580]	; (800ee44 <mbedtls_strerror+0x2ec>)
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	68b8      	ldr	r0, [r7, #8]
 800ec02:	f005 fdc1 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	f5b3 4fc7 	cmp.w	r3, #25472	; 0x6380
 800ec0c:	d104      	bne.n	800ec18 <mbedtls_strerror+0xc0>
            mbedtls_snprintf( buf, buflen, "CIPHER - The context is invalid. For example, because it was freed" );
 800ec0e:	4a8e      	ldr	r2, [pc, #568]	; (800ee48 <mbedtls_strerror+0x2f0>)
 800ec10:	6879      	ldr	r1, [r7, #4]
 800ec12:	68b8      	ldr	r0, [r7, #8]
 800ec14:	f005 fdb8 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 800ec1e:	d104      	bne.n	800ec2a <mbedtls_strerror+0xd2>
            mbedtls_snprintf( buf, buflen, "CIPHER - Cipher hardware accelerator failed" );
 800ec20:	4a8a      	ldr	r2, [pc, #552]	; (800ee4c <mbedtls_strerror+0x2f4>)
 800ec22:	6879      	ldr	r1, [r7, #4]
 800ec24:	68b8      	ldr	r0, [r7, #8]
 800ec26:	f005 fdaf 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_DHM_SET_GROUP_FAILED) )
            mbedtls_snprintf( buf, buflen, "DHM - Setting the modulus and generator failed" );
#endif /* MBEDTLS_DHM_C */

#if defined(MBEDTLS_ECP_C)
        if( use_ret == -(MBEDTLS_ERR_ECP_BAD_INPUT_DATA) )
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	f5b3 4f9f 	cmp.w	r3, #20352	; 0x4f80
 800ec30:	d104      	bne.n	800ec3c <mbedtls_strerror+0xe4>
            mbedtls_snprintf( buf, buflen, "ECP - Bad input parameters to function" );
 800ec32:	4a87      	ldr	r2, [pc, #540]	; (800ee50 <mbedtls_strerror+0x2f8>)
 800ec34:	6879      	ldr	r1, [r7, #4]
 800ec36:	68b8      	ldr	r0, [r7, #8]
 800ec38:	f005 fda6 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL) )
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	f5b3 4f9e 	cmp.w	r3, #20224	; 0x4f00
 800ec42:	d104      	bne.n	800ec4e <mbedtls_strerror+0xf6>
            mbedtls_snprintf( buf, buflen, "ECP - The buffer is too small to write to" );
 800ec44:	4a83      	ldr	r2, [pc, #524]	; (800ee54 <mbedtls_strerror+0x2fc>)
 800ec46:	6879      	ldr	r1, [r7, #4]
 800ec48:	68b8      	ldr	r0, [r7, #8]
 800ec4a:	f005 fd9d 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE) )
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	f5b3 4f9d 	cmp.w	r3, #20096	; 0x4e80
 800ec54:	d104      	bne.n	800ec60 <mbedtls_strerror+0x108>
            mbedtls_snprintf( buf, buflen, "ECP - The requested feature is not available, for example, the requested curve is not supported" );
 800ec56:	4a80      	ldr	r2, [pc, #512]	; (800ee58 <mbedtls_strerror+0x300>)
 800ec58:	6879      	ldr	r1, [r7, #4]
 800ec5a:	68b8      	ldr	r0, [r7, #8]
 800ec5c:	f005 fd94 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_VERIFY_FAILED) )
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 800ec66:	d104      	bne.n	800ec72 <mbedtls_strerror+0x11a>
            mbedtls_snprintf( buf, buflen, "ECP - The signature is not valid" );
 800ec68:	4a7c      	ldr	r2, [pc, #496]	; (800ee5c <mbedtls_strerror+0x304>)
 800ec6a:	6879      	ldr	r1, [r7, #4]
 800ec6c:	68b8      	ldr	r0, [r7, #8]
 800ec6e:	f005 fd8b 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_ALLOC_FAILED) )
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f5b3 4f9b 	cmp.w	r3, #19840	; 0x4d80
 800ec78:	d104      	bne.n	800ec84 <mbedtls_strerror+0x12c>
            mbedtls_snprintf( buf, buflen, "ECP - Memory allocation failed" );
 800ec7a:	4a79      	ldr	r2, [pc, #484]	; (800ee60 <mbedtls_strerror+0x308>)
 800ec7c:	6879      	ldr	r1, [r7, #4]
 800ec7e:	68b8      	ldr	r0, [r7, #8]
 800ec80:	f005 fd82 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_RANDOM_FAILED) )
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	f5b3 4f9a 	cmp.w	r3, #19712	; 0x4d00
 800ec8a:	d104      	bne.n	800ec96 <mbedtls_strerror+0x13e>
            mbedtls_snprintf( buf, buflen, "ECP - Generation of random value, such as ephemeral key, failed" );
 800ec8c:	4a75      	ldr	r2, [pc, #468]	; (800ee64 <mbedtls_strerror+0x30c>)
 800ec8e:	6879      	ldr	r1, [r7, #4]
 800ec90:	68b8      	ldr	r0, [r7, #8]
 800ec92:	f005 fd79 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_INVALID_KEY) )
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	f5b3 4f99 	cmp.w	r3, #19584	; 0x4c80
 800ec9c:	d104      	bne.n	800eca8 <mbedtls_strerror+0x150>
            mbedtls_snprintf( buf, buflen, "ECP - Invalid private or public key" );
 800ec9e:	4a72      	ldr	r2, [pc, #456]	; (800ee68 <mbedtls_strerror+0x310>)
 800eca0:	6879      	ldr	r1, [r7, #4]
 800eca2:	68b8      	ldr	r0, [r7, #8]
 800eca4:	f005 fd70 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH) )
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	f5b3 4f98 	cmp.w	r3, #19456	; 0x4c00
 800ecae:	d104      	bne.n	800ecba <mbedtls_strerror+0x162>
            mbedtls_snprintf( buf, buflen, "ECP - The buffer contains a valid signature followed by more data" );
 800ecb0:	4a6e      	ldr	r2, [pc, #440]	; (800ee6c <mbedtls_strerror+0x314>)
 800ecb2:	6879      	ldr	r1, [r7, #4]
 800ecb4:	68b8      	ldr	r0, [r7, #8]
 800ecb6:	f005 fd67 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_HW_ACCEL_FAILED) )
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	f5b3 4f97 	cmp.w	r3, #19328	; 0x4b80
 800ecc0:	d104      	bne.n	800eccc <mbedtls_strerror+0x174>
            mbedtls_snprintf( buf, buflen, "ECP - The ECP hardware accelerator failed" );
 800ecc2:	4a6b      	ldr	r2, [pc, #428]	; (800ee70 <mbedtls_strerror+0x318>)
 800ecc4:	6879      	ldr	r1, [r7, #4]
 800ecc6:	68b8      	ldr	r0, [r7, #8]
 800ecc8:	f005 fd5e 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_ECP_IN_PROGRESS) )
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800ecd2:	d104      	bne.n	800ecde <mbedtls_strerror+0x186>
            mbedtls_snprintf( buf, buflen, "ECP - Operation in progress, call again with the same parameters to continue" );
 800ecd4:	4a67      	ldr	r2, [pc, #412]	; (800ee74 <mbedtls_strerror+0x31c>)
 800ecd6:	6879      	ldr	r1, [r7, #4]
 800ecd8:	68b8      	ldr	r0, [r7, #8]
 800ecda:	f005 fd55 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_MD_C)
        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f5b3 4fa1 	cmp.w	r3, #20608	; 0x5080
 800ece4:	d104      	bne.n	800ecf0 <mbedtls_strerror+0x198>
            mbedtls_snprintf( buf, buflen, "MD - The selected feature is not available" );
 800ece6:	4a64      	ldr	r2, [pc, #400]	; (800ee78 <mbedtls_strerror+0x320>)
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	68b8      	ldr	r0, [r7, #8]
 800ecec:	f005 fd4c 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	f5b3 4fa2 	cmp.w	r3, #20736	; 0x5100
 800ecf6:	d104      	bne.n	800ed02 <mbedtls_strerror+0x1aa>
            mbedtls_snprintf( buf, buflen, "MD - Bad input parameters to function" );
 800ecf8:	4a60      	ldr	r2, [pc, #384]	; (800ee7c <mbedtls_strerror+0x324>)
 800ecfa:	6879      	ldr	r1, [r7, #4]
 800ecfc:	68b8      	ldr	r0, [r7, #8]
 800ecfe:	f005 fd43 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	f5b3 4fa3 	cmp.w	r3, #20864	; 0x5180
 800ed08:	d104      	bne.n	800ed14 <mbedtls_strerror+0x1bc>
            mbedtls_snprintf( buf, buflen, "MD - Failed to allocate memory" );
 800ed0a:	4a5d      	ldr	r2, [pc, #372]	; (800ee80 <mbedtls_strerror+0x328>)
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	68b8      	ldr	r0, [r7, #8]
 800ed10:	f005 fd3a 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800ed1a:	d104      	bne.n	800ed26 <mbedtls_strerror+0x1ce>
            mbedtls_snprintf( buf, buflen, "MD - Opening or reading of file failed" );
 800ed1c:	4a59      	ldr	r2, [pc, #356]	; (800ee84 <mbedtls_strerror+0x32c>)
 800ed1e:	6879      	ldr	r1, [r7, #4]
 800ed20:	68b8      	ldr	r0, [r7, #8]
 800ed22:	f005 fd31 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	f5b3 4fa5 	cmp.w	r3, #21120	; 0x5280
 800ed2c:	d104      	bne.n	800ed38 <mbedtls_strerror+0x1e0>
            mbedtls_snprintf( buf, buflen, "MD - MD hardware accelerator failed" );
 800ed2e:	4a56      	ldr	r2, [pc, #344]	; (800ee88 <mbedtls_strerror+0x330>)
 800ed30:	6879      	ldr	r1, [r7, #4]
 800ed32:	68b8      	ldr	r0, [r7, #8]
 800ed34:	f005 fd28 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_MD_C */

#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800ed3e:	d104      	bne.n	800ed4a <mbedtls_strerror+0x1f2>
            mbedtls_snprintf( buf, buflen, "PEM - No PEM header or footer found" );
 800ed40:	4a52      	ldr	r2, [pc, #328]	; (800ee8c <mbedtls_strerror+0x334>)
 800ed42:	6879      	ldr	r1, [r7, #4]
 800ed44:	68b8      	ldr	r0, [r7, #8]
 800ed46:	f005 fd1f 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800ed50:	d104      	bne.n	800ed5c <mbedtls_strerror+0x204>
            mbedtls_snprintf( buf, buflen, "PEM - PEM string is not as expected" );
 800ed52:	4a4f      	ldr	r2, [pc, #316]	; (800ee90 <mbedtls_strerror+0x338>)
 800ed54:	6879      	ldr	r1, [r7, #4]
 800ed56:	68b8      	ldr	r0, [r7, #8]
 800ed58:	f005 fd16 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 800ed62:	d104      	bne.n	800ed6e <mbedtls_strerror+0x216>
            mbedtls_snprintf( buf, buflen, "PEM - Failed to allocate memory" );
 800ed64:	4a4b      	ldr	r2, [pc, #300]	; (800ee94 <mbedtls_strerror+0x33c>)
 800ed66:	6879      	ldr	r1, [r7, #4]
 800ed68:	68b8      	ldr	r0, [r7, #8]
 800ed6a:	f005 fd0d 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800ed74:	d104      	bne.n	800ed80 <mbedtls_strerror+0x228>
            mbedtls_snprintf( buf, buflen, "PEM - RSA IV is not in hex-format" );
 800ed76:	4a48      	ldr	r2, [pc, #288]	; (800ee98 <mbedtls_strerror+0x340>)
 800ed78:	6879      	ldr	r1, [r7, #4]
 800ed7a:	68b8      	ldr	r0, [r7, #8]
 800ed7c:	f005 fd04 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800ed86:	d104      	bne.n	800ed92 <mbedtls_strerror+0x23a>
            mbedtls_snprintf( buf, buflen, "PEM - Unsupported key encryption algorithm" );
 800ed88:	4a44      	ldr	r2, [pc, #272]	; (800ee9c <mbedtls_strerror+0x344>)
 800ed8a:	6879      	ldr	r1, [r7, #4]
 800ed8c:	68b8      	ldr	r0, [r7, #8]
 800ed8e:	f005 fcfb 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 800ed98:	d104      	bne.n	800eda4 <mbedtls_strerror+0x24c>
            mbedtls_snprintf( buf, buflen, "PEM - Private key password can't be empty" );
 800ed9a:	4a41      	ldr	r2, [pc, #260]	; (800eea0 <mbedtls_strerror+0x348>)
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	68b8      	ldr	r0, [r7, #8]
 800eda0:	f005 fcf2 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f5b3 5f9c 	cmp.w	r3, #4992	; 0x1380
 800edaa:	d104      	bne.n	800edb6 <mbedtls_strerror+0x25e>
            mbedtls_snprintf( buf, buflen, "PEM - Given private key password does not allow for correct decryption" );
 800edac:	4a3d      	ldr	r2, [pc, #244]	; (800eea4 <mbedtls_strerror+0x34c>)
 800edae:	6879      	ldr	r1, [r7, #4]
 800edb0:	68b8      	ldr	r0, [r7, #8]
 800edb2:	f005 fce9 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800edbc:	d104      	bne.n	800edc8 <mbedtls_strerror+0x270>
            mbedtls_snprintf( buf, buflen, "PEM - Unavailable feature, e.g. hashing/encryption combination" );
 800edbe:	4a3a      	ldr	r2, [pc, #232]	; (800eea8 <mbedtls_strerror+0x350>)
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	68b8      	ldr	r0, [r7, #8]
 800edc4:	f005 fce0 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	f5b3 5fa4 	cmp.w	r3, #5248	; 0x1480
 800edce:	d104      	bne.n	800edda <mbedtls_strerror+0x282>
            mbedtls_snprintf( buf, buflen, "PEM - Bad input parameters to function" );
 800edd0:	4a36      	ldr	r2, [pc, #216]	; (800eeac <mbedtls_strerror+0x354>)
 800edd2:	6879      	ldr	r1, [r7, #4]
 800edd4:	68b8      	ldr	r0, [r7, #8]
 800edd6:	f005 fcd7 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */

#if defined(MBEDTLS_PK_C)
        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
 800ede0:	d104      	bne.n	800edec <mbedtls_strerror+0x294>
            mbedtls_snprintf( buf, buflen, "PK - Memory allocation failed" );
 800ede2:	4a33      	ldr	r2, [pc, #204]	; (800eeb0 <mbedtls_strerror+0x358>)
 800ede4:	6879      	ldr	r1, [r7, #4]
 800ede6:	68b8      	ldr	r0, [r7, #8]
 800ede8:	f005 fcce 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800edf2:	d104      	bne.n	800edfe <mbedtls_strerror+0x2a6>
            mbedtls_snprintf( buf, buflen, "PK - Type mismatch, eg attempt to encrypt with an ECDSA key" );
 800edf4:	4a2f      	ldr	r2, [pc, #188]	; (800eeb4 <mbedtls_strerror+0x35c>)
 800edf6:	6879      	ldr	r1, [r7, #4]
 800edf8:	68b8      	ldr	r0, [r7, #8]
 800edfa:	f005 fcc5 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800ee04:	d104      	bne.n	800ee10 <mbedtls_strerror+0x2b8>
            mbedtls_snprintf( buf, buflen, "PK - Bad input parameters to function" );
 800ee06:	4a2c      	ldr	r2, [pc, #176]	; (800eeb8 <mbedtls_strerror+0x360>)
 800ee08:	6879      	ldr	r1, [r7, #4]
 800ee0a:	68b8      	ldr	r0, [r7, #8]
 800ee0c:	f005 fcbc 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 800ee16:	d104      	bne.n	800ee22 <mbedtls_strerror+0x2ca>
            mbedtls_snprintf( buf, buflen, "PK - Read/write of file failed" );
 800ee18:	4a28      	ldr	r2, [pc, #160]	; (800eebc <mbedtls_strerror+0x364>)
 800ee1a:	6879      	ldr	r1, [r7, #4]
 800ee1c:	68b8      	ldr	r0, [r7, #8]
 800ee1e:	f005 fcb3 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	f5b3 5f76 	cmp.w	r3, #15744	; 0x3d80
 800ee28:	d14f      	bne.n	800eeca <mbedtls_strerror+0x372>
            mbedtls_snprintf( buf, buflen, "PK - Unsupported key version" );
 800ee2a:	4a25      	ldr	r2, [pc, #148]	; (800eec0 <mbedtls_strerror+0x368>)
 800ee2c:	6879      	ldr	r1, [r7, #4]
 800ee2e:	e049      	b.n	800eec4 <mbedtls_strerror+0x36c>
 800ee30:	08015454 	.word	0x08015454
 800ee34:	08015484 	.word	0x08015484
 800ee38:	080154a4 	.word	0x080154a4
 800ee3c:	080154c8 	.word	0x080154c8
 800ee40:	08015508 	.word	0x08015508
 800ee44:	0801553c 	.word	0x0801553c
 800ee48:	0801556c 	.word	0x0801556c
 800ee4c:	080155b0 	.word	0x080155b0
 800ee50:	080155dc 	.word	0x080155dc
 800ee54:	08015604 	.word	0x08015604
 800ee58:	08015630 	.word	0x08015630
 800ee5c:	08015690 	.word	0x08015690
 800ee60:	080156b4 	.word	0x080156b4
 800ee64:	080156d4 	.word	0x080156d4
 800ee68:	08015714 	.word	0x08015714
 800ee6c:	08015738 	.word	0x08015738
 800ee70:	0801577c 	.word	0x0801577c
 800ee74:	080157a8 	.word	0x080157a8
 800ee78:	080157f8 	.word	0x080157f8
 800ee7c:	08015824 	.word	0x08015824
 800ee80:	0801584c 	.word	0x0801584c
 800ee84:	0801586c 	.word	0x0801586c
 800ee88:	08015894 	.word	0x08015894
 800ee8c:	080158b8 	.word	0x080158b8
 800ee90:	080158dc 	.word	0x080158dc
 800ee94:	08015900 	.word	0x08015900
 800ee98:	08015920 	.word	0x08015920
 800ee9c:	08015944 	.word	0x08015944
 800eea0:	08015970 	.word	0x08015970
 800eea4:	0801599c 	.word	0x0801599c
 800eea8:	080159e4 	.word	0x080159e4
 800eeac:	08015a24 	.word	0x08015a24
 800eeb0:	08015a4c 	.word	0x08015a4c
 800eeb4:	08015a6c 	.word	0x08015a6c
 800eeb8:	08015aa8 	.word	0x08015aa8
 800eebc:	08015ad0 	.word	0x08015ad0
 800eec0:	08015af0 	.word	0x08015af0
 800eec4:	68b8      	ldr	r0, [r7, #8]
 800eec6:	f005 fc5f 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	f5b3 5f74 	cmp.w	r3, #15616	; 0x3d00
 800eed0:	d104      	bne.n	800eedc <mbedtls_strerror+0x384>
            mbedtls_snprintf( buf, buflen, "PK - Invalid key tag or value" );
 800eed2:	4aa4      	ldr	r2, [pc, #656]	; (800f164 <mbedtls_strerror+0x60c>)
 800eed4:	6879      	ldr	r1, [r7, #4]
 800eed6:	68b8      	ldr	r0, [r7, #8]
 800eed8:	f005 fc56 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f5b3 5f72 	cmp.w	r3, #15488	; 0x3c80
 800eee2:	d104      	bne.n	800eeee <mbedtls_strerror+0x396>
            mbedtls_snprintf( buf, buflen, "PK - Key algorithm is unsupported (only RSA and EC are supported)" );
 800eee4:	4aa0      	ldr	r2, [pc, #640]	; (800f168 <mbedtls_strerror+0x610>)
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	68b8      	ldr	r0, [r7, #8]
 800eeea:	f005 fc4d 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800eef4:	d104      	bne.n	800ef00 <mbedtls_strerror+0x3a8>
            mbedtls_snprintf( buf, buflen, "PK - Private key password can't be empty" );
 800eef6:	4a9d      	ldr	r2, [pc, #628]	; (800f16c <mbedtls_strerror+0x614>)
 800eef8:	6879      	ldr	r1, [r7, #4]
 800eefa:	68b8      	ldr	r0, [r7, #8]
 800eefc:	f005 fc44 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	f5b3 5f6e 	cmp.w	r3, #15232	; 0x3b80
 800ef06:	d104      	bne.n	800ef12 <mbedtls_strerror+0x3ba>
            mbedtls_snprintf( buf, buflen, "PK - Given private key password does not allow for correct decryption" );
 800ef08:	4a99      	ldr	r2, [pc, #612]	; (800f170 <mbedtls_strerror+0x618>)
 800ef0a:	6879      	ldr	r1, [r7, #4]
 800ef0c:	68b8      	ldr	r0, [r7, #8]
 800ef0e:	f005 fc3b 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	f5b3 5f6c 	cmp.w	r3, #15104	; 0x3b00
 800ef18:	d104      	bne.n	800ef24 <mbedtls_strerror+0x3cc>
            mbedtls_snprintf( buf, buflen, "PK - The pubkey tag or value is invalid (only RSA and EC are supported)" );
 800ef1a:	4a96      	ldr	r2, [pc, #600]	; (800f174 <mbedtls_strerror+0x61c>)
 800ef1c:	6879      	ldr	r1, [r7, #4]
 800ef1e:	68b8      	ldr	r0, [r7, #8]
 800ef20:	f005 fc32 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	f5b3 5f6a 	cmp.w	r3, #14976	; 0x3a80
 800ef2a:	d104      	bne.n	800ef36 <mbedtls_strerror+0x3de>
            mbedtls_snprintf( buf, buflen, "PK - The algorithm tag or value is invalid" );
 800ef2c:	4a92      	ldr	r2, [pc, #584]	; (800f178 <mbedtls_strerror+0x620>)
 800ef2e:	6879      	ldr	r1, [r7, #4]
 800ef30:	68b8      	ldr	r0, [r7, #8]
 800ef32:	f005 fc29 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 800ef3c:	d104      	bne.n	800ef48 <mbedtls_strerror+0x3f0>
            mbedtls_snprintf( buf, buflen, "PK - Elliptic curve is unsupported (only NIST curves are supported)" );
 800ef3e:	4a8f      	ldr	r2, [pc, #572]	; (800f17c <mbedtls_strerror+0x624>)
 800ef40:	6879      	ldr	r1, [r7, #4]
 800ef42:	68b8      	ldr	r0, [r7, #8]
 800ef44:	f005 fc20 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 800ef4e:	d104      	bne.n	800ef5a <mbedtls_strerror+0x402>
            mbedtls_snprintf( buf, buflen, "PK - Unavailable feature, e.g. RSA disabled for RSA key" );
 800ef50:	4a8b      	ldr	r2, [pc, #556]	; (800f180 <mbedtls_strerror+0x628>)
 800ef52:	6879      	ldr	r1, [r7, #4]
 800ef54:	68b8      	ldr	r0, [r7, #8]
 800ef56:	f005 fc17 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	f5b3 5f64 	cmp.w	r3, #14592	; 0x3900
 800ef60:	d104      	bne.n	800ef6c <mbedtls_strerror+0x414>
            mbedtls_snprintf( buf, buflen, "PK - The buffer contains a valid signature followed by more data" );
 800ef62:	4a88      	ldr	r2, [pc, #544]	; (800f184 <mbedtls_strerror+0x62c>)
 800ef64:	6879      	ldr	r1, [r7, #4]
 800ef66:	68b8      	ldr	r0, [r7, #8]
 800ef68:	f005 fc0e 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f5b3 5f62 	cmp.w	r3, #14464	; 0x3880
 800ef72:	d104      	bne.n	800ef7e <mbedtls_strerror+0x426>
            mbedtls_snprintf( buf, buflen, "PK - PK hardware accelerator failed" );
 800ef74:	4a84      	ldr	r2, [pc, #528]	; (800f188 <mbedtls_strerror+0x630>)
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	68b8      	ldr	r0, [r7, #8]
 800ef7a:	f005 fc05 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS) )
            mbedtls_snprintf( buf, buflen, "SSL - A cryptographic operation is in progress. Try again later" );
#endif /* MBEDTLS_SSL_TLS_C */

#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)
        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 800ef84:	d104      	bne.n	800ef90 <mbedtls_strerror+0x438>
            mbedtls_snprintf( buf, buflen, "X509 - Unavailable feature, e.g. RSA hashing/encryption combination" );
 800ef86:	4a81      	ldr	r2, [pc, #516]	; (800f18c <mbedtls_strerror+0x634>)
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	68b8      	ldr	r0, [r7, #8]
 800ef8c:	f005 fbfc 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
 800ef96:	d104      	bne.n	800efa2 <mbedtls_strerror+0x44a>
            mbedtls_snprintf( buf, buflen, "X509 - Requested OID is unknown" );
 800ef98:	4a7d      	ldr	r2, [pc, #500]	; (800f190 <mbedtls_strerror+0x638>)
 800ef9a:	6879      	ldr	r1, [r7, #4]
 800ef9c:	68b8      	ldr	r0, [r7, #8]
 800ef9e:	f005 fbf3 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 800efa8:	d104      	bne.n	800efb4 <mbedtls_strerror+0x45c>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected" );
 800efaa:	4a7a      	ldr	r2, [pc, #488]	; (800f194 <mbedtls_strerror+0x63c>)
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	68b8      	ldr	r0, [r7, #8]
 800efb0:	f005 fbea 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 800efba:	d104      	bne.n	800efc6 <mbedtls_strerror+0x46e>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR version element is invalid" );
 800efbc:	4a76      	ldr	r2, [pc, #472]	; (800f198 <mbedtls_strerror+0x640>)
 800efbe:	6879      	ldr	r1, [r7, #4]
 800efc0:	68b8      	ldr	r0, [r7, #8]
 800efc2:	f005 fbe1 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
 800efcc:	d104      	bne.n	800efd8 <mbedtls_strerror+0x480>
            mbedtls_snprintf( buf, buflen, "X509 - The serial tag or value is invalid" );
 800efce:	4a73      	ldr	r2, [pc, #460]	; (800f19c <mbedtls_strerror+0x644>)
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	68b8      	ldr	r0, [r7, #8]
 800efd4:	f005 fbd8 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800efde:	d104      	bne.n	800efea <mbedtls_strerror+0x492>
            mbedtls_snprintf( buf, buflen, "X509 - The algorithm tag or value is invalid" );
 800efe0:	4a6f      	ldr	r2, [pc, #444]	; (800f1a0 <mbedtls_strerror+0x648>)
 800efe2:	6879      	ldr	r1, [r7, #4]
 800efe4:	68b8      	ldr	r0, [r7, #8]
 800efe6:	f005 fbcf 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 800eff0:	d104      	bne.n	800effc <mbedtls_strerror+0x4a4>
            mbedtls_snprintf( buf, buflen, "X509 - The name tag or value is invalid" );
 800eff2:	4a6c      	ldr	r2, [pc, #432]	; (800f1a4 <mbedtls_strerror+0x64c>)
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	68b8      	ldr	r0, [r7, #8]
 800eff8:	f005 fbc6 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800f002:	d104      	bne.n	800f00e <mbedtls_strerror+0x4b6>
            mbedtls_snprintf( buf, buflen, "X509 - The date tag or value is invalid" );
 800f004:	4a68      	ldr	r2, [pc, #416]	; (800f1a8 <mbedtls_strerror+0x650>)
 800f006:	6879      	ldr	r1, [r7, #4]
 800f008:	68b8      	ldr	r0, [r7, #8]
 800f00a:	f005 fbbd 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	f5b3 5f12 	cmp.w	r3, #9344	; 0x2480
 800f014:	d104      	bne.n	800f020 <mbedtls_strerror+0x4c8>
            mbedtls_snprintf( buf, buflen, "X509 - The signature tag or value invalid" );
 800f016:	4a65      	ldr	r2, [pc, #404]	; (800f1ac <mbedtls_strerror+0x654>)
 800f018:	6879      	ldr	r1, [r7, #4]
 800f01a:	68b8      	ldr	r0, [r7, #8]
 800f01c:	f005 fbb4 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 800f026:	d104      	bne.n	800f032 <mbedtls_strerror+0x4da>
            mbedtls_snprintf( buf, buflen, "X509 - The extension tag or value is invalid" );
 800f028:	4a61      	ldr	r2, [pc, #388]	; (800f1b0 <mbedtls_strerror+0x658>)
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	68b8      	ldr	r0, [r7, #8]
 800f02e:	f005 fbab 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800f038:	d104      	bne.n	800f044 <mbedtls_strerror+0x4ec>
            mbedtls_snprintf( buf, buflen, "X509 - CRT/CRL/CSR has an unsupported version number" );
 800f03a:	4a5e      	ldr	r2, [pc, #376]	; (800f1b4 <mbedtls_strerror+0x65c>)
 800f03c:	6879      	ldr	r1, [r7, #4]
 800f03e:	68b8      	ldr	r0, [r7, #8]
 800f040:	f005 fba2 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 800f04a:	d104      	bne.n	800f056 <mbedtls_strerror+0x4fe>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithm (oid) is unsupported" );
 800f04c:	4a5a      	ldr	r2, [pc, #360]	; (800f1b8 <mbedtls_strerror+0x660>)
 800f04e:	6879      	ldr	r1, [r7, #4]
 800f050:	68b8      	ldr	r0, [r7, #8]
 800f052:	f005 fb99 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	f5b3 5f1a 	cmp.w	r3, #9856	; 0x2680
 800f05c:	d104      	bne.n	800f068 <mbedtls_strerror+0x510>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)" );
 800f05e:	4a57      	ldr	r2, [pc, #348]	; (800f1bc <mbedtls_strerror+0x664>)
 800f060:	6879      	ldr	r1, [r7, #4]
 800f062:	68b8      	ldr	r0, [r7, #8]
 800f064:	f005 fb90 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f5b3 5f1c 	cmp.w	r3, #9984	; 0x2700
 800f06e:	d104      	bne.n	800f07a <mbedtls_strerror+0x522>
            mbedtls_snprintf( buf, buflen, "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed" );
 800f070:	4a53      	ldr	r2, [pc, #332]	; (800f1c0 <mbedtls_strerror+0x668>)
 800f072:	6879      	ldr	r1, [r7, #4]
 800f074:	68b8      	ldr	r0, [r7, #8]
 800f076:	f005 fb87 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	f5b3 5f1e 	cmp.w	r3, #10112	; 0x2780
 800f080:	d104      	bne.n	800f08c <mbedtls_strerror+0x534>
            mbedtls_snprintf( buf, buflen, "X509 - Format not recognized as DER or PEM" );
 800f082:	4a50      	ldr	r2, [pc, #320]	; (800f1c4 <mbedtls_strerror+0x66c>)
 800f084:	6879      	ldr	r1, [r7, #4]
 800f086:	68b8      	ldr	r0, [r7, #8]
 800f088:	f005 fb7e 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f092:	d104      	bne.n	800f09e <mbedtls_strerror+0x546>
            mbedtls_snprintf( buf, buflen, "X509 - Input invalid" );
 800f094:	4a4c      	ldr	r2, [pc, #304]	; (800f1c8 <mbedtls_strerror+0x670>)
 800f096:	6879      	ldr	r1, [r7, #4]
 800f098:	68b8      	ldr	r0, [r7, #8]
 800f09a:	f005 fb75 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f5b3 5f22 	cmp.w	r3, #10368	; 0x2880
 800f0a4:	d104      	bne.n	800f0b0 <mbedtls_strerror+0x558>
            mbedtls_snprintf( buf, buflen, "X509 - Allocation of memory failed" );
 800f0a6:	4a49      	ldr	r2, [pc, #292]	; (800f1cc <mbedtls_strerror+0x674>)
 800f0a8:	6879      	ldr	r1, [r7, #4]
 800f0aa:	68b8      	ldr	r0, [r7, #8]
 800f0ac:	f005 fb6c 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
 800f0b6:	d104      	bne.n	800f0c2 <mbedtls_strerror+0x56a>
            mbedtls_snprintf( buf, buflen, "X509 - Read/write of file failed" );
 800f0b8:	4a45      	ldr	r2, [pc, #276]	; (800f1d0 <mbedtls_strerror+0x678>)
 800f0ba:	6879      	ldr	r1, [r7, #4]
 800f0bc:	68b8      	ldr	r0, [r7, #8]
 800f0be:	f005 fb63 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	f5b3 5f26 	cmp.w	r3, #10624	; 0x2980
 800f0c8:	d104      	bne.n	800f0d4 <mbedtls_strerror+0x57c>
            mbedtls_snprintf( buf, buflen, "X509 - Destination buffer is too small" );
 800f0ca:	4a42      	ldr	r2, [pc, #264]	; (800f1d4 <mbedtls_strerror+0x67c>)
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	68b8      	ldr	r0, [r7, #8]
 800f0d0:	f005 fb5a 	bl	8014788 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0da:	d104      	bne.n	800f0e6 <mbedtls_strerror+0x58e>
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
 800f0dc:	4a3e      	ldr	r2, [pc, #248]	; (800f1d8 <mbedtls_strerror+0x680>)
 800f0de:	6879      	ldr	r1, [r7, #4]
 800f0e0:	68b8      	ldr	r0, [r7, #8]
 800f0e2:	f005 fb51 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
        // END generated code

        if( strlen( buf ) == 0 )
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d105      	bne.n	800f0fa <mbedtls_strerror+0x5a2>
            mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	4a3a      	ldr	r2, [pc, #232]	; (800f1dc <mbedtls_strerror+0x684>)
 800f0f2:	6879      	ldr	r1, [r7, #4]
 800f0f4:	68b8      	ldr	r0, [r7, #8]
 800f0f6:	f005 fb47 	bl	8014788 <sniprintf>
    }

    use_ret = ret & ~0xFF80;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f104:	617b      	str	r3, [r7, #20]

    if( use_ret == 0 )
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f000 8273 	beq.w	800f5f4 <mbedtls_strerror+0xa9c>
        return;

    // If high level code is present, make a concatenation between both
    // error strings.
    //
    len = strlen( buf );
 800f10e:	68b8      	ldr	r0, [r7, #8]
 800f110:	f7f1 f866 	bl	80001e0 <strlen>
 800f114:	6138      	str	r0, [r7, #16]

    if( len > 0 )
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d019      	beq.n	800f150 <mbedtls_strerror+0x5f8>
    {
        if( buflen - len < 5 )
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	2b04      	cmp	r3, #4
 800f124:	f240 8268 	bls.w	800f5f8 <mbedtls_strerror+0xaa0>
            return;

        mbedtls_snprintf( buf + len, buflen - len, " : " );
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	18d0      	adds	r0, r2, r3
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	1ad3      	subs	r3, r2, r3
 800f134:	4a2a      	ldr	r2, [pc, #168]	; (800f1e0 <mbedtls_strerror+0x688>)
 800f136:	4619      	mov	r1, r3
 800f138:	f005 fb26 	bl	8014788 <sniprintf>

        buf += len + 3;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	3303      	adds	r3, #3
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	4413      	add	r3, r2
 800f144:	60bb      	str	r3, [r7, #8]
        buflen -= len + 3;
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	3b03      	subs	r3, #3
 800f14e:	607b      	str	r3, [r7, #4]

    // Low level error codes
    //
    // BEGIN generated code
#if defined(MBEDTLS_AES_C)
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2b20      	cmp	r3, #32
 800f154:	d148      	bne.n	800f1e8 <mbedtls_strerror+0x690>
        mbedtls_snprintf( buf, buflen, "AES - Invalid key length" );
 800f156:	4a23      	ldr	r2, [pc, #140]	; (800f1e4 <mbedtls_strerror+0x68c>)
 800f158:	6879      	ldr	r1, [r7, #4]
 800f15a:	68b8      	ldr	r0, [r7, #8]
 800f15c:	f005 fb14 	bl	8014788 <sniprintf>
 800f160:	e042      	b.n	800f1e8 <mbedtls_strerror+0x690>
 800f162:	bf00      	nop
 800f164:	08015b10 	.word	0x08015b10
 800f168:	08015b30 	.word	0x08015b30
 800f16c:	08015b74 	.word	0x08015b74
 800f170:	08015ba0 	.word	0x08015ba0
 800f174:	08015be8 	.word	0x08015be8
 800f178:	08015c30 	.word	0x08015c30
 800f17c:	08015c5c 	.word	0x08015c5c
 800f180:	08015ca0 	.word	0x08015ca0
 800f184:	08015cd8 	.word	0x08015cd8
 800f188:	08015d1c 	.word	0x08015d1c
 800f18c:	08015d40 	.word	0x08015d40
 800f190:	08015d84 	.word	0x08015d84
 800f194:	08015da4 	.word	0x08015da4
 800f198:	08015dec 	.word	0x08015dec
 800f19c:	08015e20 	.word	0x08015e20
 800f1a0:	08015e4c 	.word	0x08015e4c
 800f1a4:	08015e7c 	.word	0x08015e7c
 800f1a8:	08015ea4 	.word	0x08015ea4
 800f1ac:	08015ecc 	.word	0x08015ecc
 800f1b0:	08015ef8 	.word	0x08015ef8
 800f1b4:	08015f28 	.word	0x08015f28
 800f1b8:	08015f60 	.word	0x08015f60
 800f1bc:	08015f90 	.word	0x08015f90
 800f1c0:	08015fe0 	.word	0x08015fe0
 800f1c4:	08016030 	.word	0x08016030
 800f1c8:	0801605c 	.word	0x0801605c
 800f1cc:	08016074 	.word	0x08016074
 800f1d0:	08016098 	.word	0x08016098
 800f1d4:	080160bc 	.word	0x080160bc
 800f1d8:	080160e4 	.word	0x080160e4
 800f1dc:	08016138 	.word	0x08016138
 800f1e0:	08016154 	.word	0x08016154
 800f1e4:	08016158 	.word	0x08016158
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	2b22      	cmp	r3, #34	; 0x22
 800f1ec:	d104      	bne.n	800f1f8 <mbedtls_strerror+0x6a0>
        mbedtls_snprintf( buf, buflen, "AES - Invalid data input length" );
 800f1ee:	4a9b      	ldr	r2, [pc, #620]	; (800f45c <mbedtls_strerror+0x904>)
 800f1f0:	6879      	ldr	r1, [r7, #4]
 800f1f2:	68b8      	ldr	r0, [r7, #8]
 800f1f4:	f005 fac8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_BAD_INPUT_DATA) )
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	2b21      	cmp	r3, #33	; 0x21
 800f1fc:	d104      	bne.n	800f208 <mbedtls_strerror+0x6b0>
        mbedtls_snprintf( buf, buflen, "AES - Invalid input data" );
 800f1fe:	4a98      	ldr	r2, [pc, #608]	; (800f460 <mbedtls_strerror+0x908>)
 800f200:	6879      	ldr	r1, [r7, #4]
 800f202:	68b8      	ldr	r0, [r7, #8]
 800f204:	f005 fac0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	2b23      	cmp	r3, #35	; 0x23
 800f20c:	d104      	bne.n	800f218 <mbedtls_strerror+0x6c0>
        mbedtls_snprintf( buf, buflen, "AES - Feature not available. For example, an unsupported AES key size" );
 800f20e:	4a95      	ldr	r2, [pc, #596]	; (800f464 <mbedtls_strerror+0x90c>)
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	68b8      	ldr	r0, [r7, #8]
 800f214:	f005 fab8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	2b25      	cmp	r3, #37	; 0x25
 800f21c:	d104      	bne.n	800f228 <mbedtls_strerror+0x6d0>
        mbedtls_snprintf( buf, buflen, "AES - AES hardware accelerator failed" );
 800f21e:	4a92      	ldr	r2, [pc, #584]	; (800f468 <mbedtls_strerror+0x910>)
 800f220:	6879      	ldr	r1, [r7, #4]
 800f222:	68b8      	ldr	r0, [r7, #8]
 800f224:	f005 fab0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ARIA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "ARIA - ARIA hardware accelerator failed" );
#endif /* MBEDTLS_ARIA_C */

#if defined(MBEDTLS_ASN1_PARSE_C)
    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	2b60      	cmp	r3, #96	; 0x60
 800f22c:	d104      	bne.n	800f238 <mbedtls_strerror+0x6e0>
        mbedtls_snprintf( buf, buflen, "ASN1 - Out of data when parsing an ASN1 data structure" );
 800f22e:	4a8f      	ldr	r2, [pc, #572]	; (800f46c <mbedtls_strerror+0x914>)
 800f230:	6879      	ldr	r1, [r7, #4]
 800f232:	68b8      	ldr	r0, [r7, #8]
 800f234:	f005 faa8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	2b62      	cmp	r3, #98	; 0x62
 800f23c:	d104      	bne.n	800f248 <mbedtls_strerror+0x6f0>
        mbedtls_snprintf( buf, buflen, "ASN1 - ASN1 tag was of an unexpected value" );
 800f23e:	4a8c      	ldr	r2, [pc, #560]	; (800f470 <mbedtls_strerror+0x918>)
 800f240:	6879      	ldr	r1, [r7, #4]
 800f242:	68b8      	ldr	r0, [r7, #8]
 800f244:	f005 faa0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	2b64      	cmp	r3, #100	; 0x64
 800f24c:	d104      	bne.n	800f258 <mbedtls_strerror+0x700>
        mbedtls_snprintf( buf, buflen, "ASN1 - Error when trying to determine the length or invalid length" );
 800f24e:	4a89      	ldr	r2, [pc, #548]	; (800f474 <mbedtls_strerror+0x91c>)
 800f250:	6879      	ldr	r1, [r7, #4]
 800f252:	68b8      	ldr	r0, [r7, #8]
 800f254:	f005 fa98 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	2b66      	cmp	r3, #102	; 0x66
 800f25c:	d104      	bne.n	800f268 <mbedtls_strerror+0x710>
        mbedtls_snprintf( buf, buflen, "ASN1 - Actual length differs from expected length" );
 800f25e:	4a86      	ldr	r2, [pc, #536]	; (800f478 <mbedtls_strerror+0x920>)
 800f260:	6879      	ldr	r1, [r7, #4]
 800f262:	68b8      	ldr	r0, [r7, #8]
 800f264:	f005 fa90 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	2b68      	cmp	r3, #104	; 0x68
 800f26c:	d104      	bne.n	800f278 <mbedtls_strerror+0x720>
        mbedtls_snprintf( buf, buflen, "ASN1 - Data is invalid. (not used)" );
 800f26e:	4a83      	ldr	r2, [pc, #524]	; (800f47c <mbedtls_strerror+0x924>)
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	68b8      	ldr	r0, [r7, #8]
 800f274:	f005 fa88 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	2b6a      	cmp	r3, #106	; 0x6a
 800f27c:	d104      	bne.n	800f288 <mbedtls_strerror+0x730>
        mbedtls_snprintf( buf, buflen, "ASN1 - Memory allocation failed" );
 800f27e:	4a80      	ldr	r2, [pc, #512]	; (800f480 <mbedtls_strerror+0x928>)
 800f280:	6879      	ldr	r1, [r7, #4]
 800f282:	68b8      	ldr	r0, [r7, #8]
 800f284:	f005 fa80 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2b6c      	cmp	r3, #108	; 0x6c
 800f28c:	d104      	bne.n	800f298 <mbedtls_strerror+0x740>
        mbedtls_snprintf( buf, buflen, "ASN1 - Buffer too small when writing ASN.1 data structure" );
 800f28e:	4a7d      	ldr	r2, [pc, #500]	; (800f484 <mbedtls_strerror+0x92c>)
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	68b8      	ldr	r0, [r7, #8]
 800f294:	f005 fa78 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_ASN1_PARSE_C */

#if defined(MBEDTLS_BASE64_C)
    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	2b2a      	cmp	r3, #42	; 0x2a
 800f29c:	d104      	bne.n	800f2a8 <mbedtls_strerror+0x750>
        mbedtls_snprintf( buf, buflen, "BASE64 - Output buffer too small" );
 800f29e:	4a7a      	ldr	r2, [pc, #488]	; (800f488 <mbedtls_strerror+0x930>)
 800f2a0:	6879      	ldr	r1, [r7, #4]
 800f2a2:	68b8      	ldr	r0, [r7, #8]
 800f2a4:	f005 fa70 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	2b2c      	cmp	r3, #44	; 0x2c
 800f2ac:	d104      	bne.n	800f2b8 <mbedtls_strerror+0x760>
        mbedtls_snprintf( buf, buflen, "BASE64 - Invalid character in input" );
 800f2ae:	4a77      	ldr	r2, [pc, #476]	; (800f48c <mbedtls_strerror+0x934>)
 800f2b0:	6879      	ldr	r1, [r7, #4]
 800f2b2:	68b8      	ldr	r0, [r7, #8]
 800f2b4:	f005 fa68 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_BASE64_C */

#if defined(MBEDTLS_BIGNUM_C)
    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2b02      	cmp	r3, #2
 800f2bc:	d104      	bne.n	800f2c8 <mbedtls_strerror+0x770>
        mbedtls_snprintf( buf, buflen, "BIGNUM - An error occurred while reading from or writing to a file" );
 800f2be:	4a74      	ldr	r2, [pc, #464]	; (800f490 <mbedtls_strerror+0x938>)
 800f2c0:	6879      	ldr	r1, [r7, #4]
 800f2c2:	68b8      	ldr	r0, [r7, #8]
 800f2c4:	f005 fa60 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	2b04      	cmp	r3, #4
 800f2cc:	d104      	bne.n	800f2d8 <mbedtls_strerror+0x780>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Bad input parameters to function" );
 800f2ce:	4a71      	ldr	r2, [pc, #452]	; (800f494 <mbedtls_strerror+0x93c>)
 800f2d0:	6879      	ldr	r1, [r7, #4]
 800f2d2:	68b8      	ldr	r0, [r7, #8]
 800f2d4:	f005 fa58 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	2b06      	cmp	r3, #6
 800f2dc:	d104      	bne.n	800f2e8 <mbedtls_strerror+0x790>
        mbedtls_snprintf( buf, buflen, "BIGNUM - There is an invalid character in the digit string" );
 800f2de:	4a6e      	ldr	r2, [pc, #440]	; (800f498 <mbedtls_strerror+0x940>)
 800f2e0:	6879      	ldr	r1, [r7, #4]
 800f2e2:	68b8      	ldr	r0, [r7, #8]
 800f2e4:	f005 fa50 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	2b08      	cmp	r3, #8
 800f2ec:	d104      	bne.n	800f2f8 <mbedtls_strerror+0x7a0>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The buffer is too small to write to" );
 800f2ee:	4a6b      	ldr	r2, [pc, #428]	; (800f49c <mbedtls_strerror+0x944>)
 800f2f0:	6879      	ldr	r1, [r7, #4]
 800f2f2:	68b8      	ldr	r0, [r7, #8]
 800f2f4:	f005 fa48 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b0a      	cmp	r3, #10
 800f2fc:	d104      	bne.n	800f308 <mbedtls_strerror+0x7b0>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are negative or result in illegal output" );
 800f2fe:	4a68      	ldr	r2, [pc, #416]	; (800f4a0 <mbedtls_strerror+0x948>)
 800f300:	6879      	ldr	r1, [r7, #4]
 800f302:	68b8      	ldr	r0, [r7, #8]
 800f304:	f005 fa40 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2b0c      	cmp	r3, #12
 800f30c:	d104      	bne.n	800f318 <mbedtls_strerror+0x7c0>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input argument for division is zero, which is not allowed" );
 800f30e:	4a65      	ldr	r2, [pc, #404]	; (800f4a4 <mbedtls_strerror+0x94c>)
 800f310:	6879      	ldr	r1, [r7, #4]
 800f312:	68b8      	ldr	r0, [r7, #8]
 800f314:	f005 fa38 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	2b0e      	cmp	r3, #14
 800f31c:	d104      	bne.n	800f328 <mbedtls_strerror+0x7d0>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are not acceptable" );
 800f31e:	4a62      	ldr	r2, [pc, #392]	; (800f4a8 <mbedtls_strerror+0x950>)
 800f320:	6879      	ldr	r1, [r7, #4]
 800f322:	68b8      	ldr	r0, [r7, #8]
 800f324:	f005 fa30 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	2b10      	cmp	r3, #16
 800f32c:	d104      	bne.n	800f338 <mbedtls_strerror+0x7e0>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Memory allocation failed" );
 800f32e:	4a5f      	ldr	r2, [pc, #380]	; (800f4ac <mbedtls_strerror+0x954>)
 800f330:	6879      	ldr	r1, [r7, #4]
 800f332:	68b8      	ldr	r0, [r7, #8]
 800f334:	f005 fa28 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_BLOWFISH_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "BLOWFISH - Blowfish hardware accelerator failed" );
#endif /* MBEDTLS_BLOWFISH_C */

#if defined(MBEDTLS_CAMELLIA_C)
    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA) )
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	2b24      	cmp	r3, #36	; 0x24
 800f33c:	d104      	bne.n	800f348 <mbedtls_strerror+0x7f0>
        mbedtls_snprintf( buf, buflen, "CAMELLIA - Bad input data" );
 800f33e:	4a5c      	ldr	r2, [pc, #368]	; (800f4b0 <mbedtls_strerror+0x958>)
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	68b8      	ldr	r0, [r7, #8]
 800f344:	f005 fa20 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH) )
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	2b26      	cmp	r3, #38	; 0x26
 800f34c:	d104      	bne.n	800f358 <mbedtls_strerror+0x800>
        mbedtls_snprintf( buf, buflen, "CAMELLIA - Invalid data input length" );
 800f34e:	4a59      	ldr	r2, [pc, #356]	; (800f4b4 <mbedtls_strerror+0x95c>)
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	68b8      	ldr	r0, [r7, #8]
 800f354:	f005 fa18 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_HW_ACCEL_FAILED) )
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	2b27      	cmp	r3, #39	; 0x27
 800f35c:	d104      	bne.n	800f368 <mbedtls_strerror+0x810>
        mbedtls_snprintf( buf, buflen, "CAMELLIA - Camellia hardware accelerator failed" );
 800f35e:	4a56      	ldr	r2, [pc, #344]	; (800f4b8 <mbedtls_strerror+0x960>)
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	68b8      	ldr	r0, [r7, #8]
 800f364:	f005 fa10 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CCM_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "CCM - CCM hardware accelerator failed" );
#endif /* MBEDTLS_CCM_C */

#if defined(MBEDTLS_CHACHA20_C)
    if( use_ret == -(MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA) )
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	2b51      	cmp	r3, #81	; 0x51
 800f36c:	d104      	bne.n	800f378 <mbedtls_strerror+0x820>
        mbedtls_snprintf( buf, buflen, "CHACHA20 - Invalid input parameter(s)" );
 800f36e:	4a53      	ldr	r2, [pc, #332]	; (800f4bc <mbedtls_strerror+0x964>)
 800f370:	6879      	ldr	r1, [r7, #4]
 800f372:	68b8      	ldr	r0, [r7, #8]
 800f374:	f005 fa08 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CHACHA20_FEATURE_UNAVAILABLE) )
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2b53      	cmp	r3, #83	; 0x53
 800f37c:	d104      	bne.n	800f388 <mbedtls_strerror+0x830>
        mbedtls_snprintf( buf, buflen, "CHACHA20 - Feature not available. For example, s part of the API is not implemented" );
 800f37e:	4a50      	ldr	r2, [pc, #320]	; (800f4c0 <mbedtls_strerror+0x968>)
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	68b8      	ldr	r0, [r7, #8]
 800f384:	f005 fa00 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CHACHA20_HW_ACCEL_FAILED) )
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	2b55      	cmp	r3, #85	; 0x55
 800f38c:	d104      	bne.n	800f398 <mbedtls_strerror+0x840>
        mbedtls_snprintf( buf, buflen, "CHACHA20 - Chacha20 hardware accelerator failed" );
 800f38e:	4a4d      	ldr	r2, [pc, #308]	; (800f4c4 <mbedtls_strerror+0x96c>)
 800f390:	6879      	ldr	r1, [r7, #4]
 800f392:	68b8      	ldr	r0, [r7, #8]
 800f394:	f005 f9f8 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_CHACHA20_C */

#if defined(MBEDTLS_CHACHAPOLY_C)
    if( use_ret == -(MBEDTLS_ERR_CHACHAPOLY_BAD_STATE) )
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	2b54      	cmp	r3, #84	; 0x54
 800f39c:	d104      	bne.n	800f3a8 <mbedtls_strerror+0x850>
        mbedtls_snprintf( buf, buflen, "CHACHAPOLY - The requested operation is not permitted in the current state" );
 800f39e:	4a4a      	ldr	r2, [pc, #296]	; (800f4c8 <mbedtls_strerror+0x970>)
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	68b8      	ldr	r0, [r7, #8]
 800f3a4:	f005 f9f0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED) )
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	2b56      	cmp	r3, #86	; 0x56
 800f3ac:	d104      	bne.n	800f3b8 <mbedtls_strerror+0x860>
        mbedtls_snprintf( buf, buflen, "CHACHAPOLY - Authenticated decryption failed: data was not authentic" );
 800f3ae:	4a47      	ldr	r2, [pc, #284]	; (800f4cc <mbedtls_strerror+0x974>)
 800f3b0:	6879      	ldr	r1, [r7, #4]
 800f3b2:	68b8      	ldr	r0, [r7, #8]
 800f3b4:	f005 f9e8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "CMAC - CMAC hardware accelerator failed" );
#endif /* MBEDTLS_CMAC_C */

#if defined(MBEDTLS_CTR_DRBG_C)
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	2b34      	cmp	r3, #52	; 0x34
 800f3bc:	d104      	bne.n	800f3c8 <mbedtls_strerror+0x870>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The entropy source failed" );
 800f3be:	4a44      	ldr	r2, [pc, #272]	; (800f4d0 <mbedtls_strerror+0x978>)
 800f3c0:	6879      	ldr	r1, [r7, #4]
 800f3c2:	68b8      	ldr	r0, [r7, #8]
 800f3c4:	f005 f9e0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	2b36      	cmp	r3, #54	; 0x36
 800f3cc:	d104      	bne.n	800f3d8 <mbedtls_strerror+0x880>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The requested random buffer length is too big" );
 800f3ce:	4a41      	ldr	r2, [pc, #260]	; (800f4d4 <mbedtls_strerror+0x97c>)
 800f3d0:	6879      	ldr	r1, [r7, #4]
 800f3d2:	68b8      	ldr	r0, [r7, #8]
 800f3d4:	f005 f9d8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2b38      	cmp	r3, #56	; 0x38
 800f3dc:	d104      	bne.n	800f3e8 <mbedtls_strerror+0x890>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The input (entropy + additional data) is too large" );
 800f3de:	4a3e      	ldr	r2, [pc, #248]	; (800f4d8 <mbedtls_strerror+0x980>)
 800f3e0:	6879      	ldr	r1, [r7, #4]
 800f3e2:	68b8      	ldr	r0, [r7, #8]
 800f3e4:	f005 f9d0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	2b3a      	cmp	r3, #58	; 0x3a
 800f3ec:	d104      	bne.n	800f3f8 <mbedtls_strerror+0x8a0>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - Read or write error in file" );
 800f3ee:	4a3b      	ldr	r2, [pc, #236]	; (800f4dc <mbedtls_strerror+0x984>)
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	68b8      	ldr	r0, [r7, #8]
 800f3f4:	f005 f9c8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_DES_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "DES - DES hardware accelerator failed" );
#endif /* MBEDTLS_DES_C */

#if defined(MBEDTLS_ENTROPY_C)
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_SOURCE_FAILED) )
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2b3c      	cmp	r3, #60	; 0x3c
 800f3fc:	d104      	bne.n	800f408 <mbedtls_strerror+0x8b0>
        mbedtls_snprintf( buf, buflen, "ENTROPY - Critical entropy source failure" );
 800f3fe:	4a38      	ldr	r2, [pc, #224]	; (800f4e0 <mbedtls_strerror+0x988>)
 800f400:	6879      	ldr	r1, [r7, #4]
 800f402:	68b8      	ldr	r0, [r7, #8]
 800f404:	f005 f9c0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_MAX_SOURCES) )
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	2b3e      	cmp	r3, #62	; 0x3e
 800f40c:	d104      	bne.n	800f418 <mbedtls_strerror+0x8c0>
        mbedtls_snprintf( buf, buflen, "ENTROPY - No more sources can be added" );
 800f40e:	4a35      	ldr	r2, [pc, #212]	; (800f4e4 <mbedtls_strerror+0x98c>)
 800f410:	6879      	ldr	r1, [r7, #4]
 800f412:	68b8      	ldr	r0, [r7, #8]
 800f414:	f005 f9b8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED) )
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2b40      	cmp	r3, #64	; 0x40
 800f41c:	d104      	bne.n	800f428 <mbedtls_strerror+0x8d0>
        mbedtls_snprintf( buf, buflen, "ENTROPY - No sources have been added to poll" );
 800f41e:	4a32      	ldr	r2, [pc, #200]	; (800f4e8 <mbedtls_strerror+0x990>)
 800f420:	6879      	ldr	r1, [r7, #4]
 800f422:	68b8      	ldr	r0, [r7, #8]
 800f424:	f005 f9b0 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE) )
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	2b3d      	cmp	r3, #61	; 0x3d
 800f42c:	d104      	bne.n	800f438 <mbedtls_strerror+0x8e0>
        mbedtls_snprintf( buf, buflen, "ENTROPY - No strong sources have been added to poll" );
 800f42e:	4a2f      	ldr	r2, [pc, #188]	; (800f4ec <mbedtls_strerror+0x994>)
 800f430:	6879      	ldr	r1, [r7, #4]
 800f432:	68b8      	ldr	r0, [r7, #8]
 800f434:	f005 f9a8 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR) )
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2b3f      	cmp	r3, #63	; 0x3f
 800f43c:	d104      	bne.n	800f448 <mbedtls_strerror+0x8f0>
        mbedtls_snprintf( buf, buflen, "ENTROPY - Read/write error in file" );
 800f43e:	4a2c      	ldr	r2, [pc, #176]	; (800f4f0 <mbedtls_strerror+0x998>)
 800f440:	6879      	ldr	r1, [r7, #4]
 800f442:	68b8      	ldr	r0, [r7, #8]
 800f444:	f005 f9a0 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_ENTROPY_C */

#if defined(MBEDTLS_GCM_C)
    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	2b12      	cmp	r3, #18
 800f44c:	d154      	bne.n	800f4f8 <mbedtls_strerror+0x9a0>
        mbedtls_snprintf( buf, buflen, "GCM - Authenticated decryption failed" );
 800f44e:	4a29      	ldr	r2, [pc, #164]	; (800f4f4 <mbedtls_strerror+0x99c>)
 800f450:	6879      	ldr	r1, [r7, #4]
 800f452:	68b8      	ldr	r0, [r7, #8]
 800f454:	f005 f998 	bl	8014788 <sniprintf>
 800f458:	e04e      	b.n	800f4f8 <mbedtls_strerror+0x9a0>
 800f45a:	bf00      	nop
 800f45c:	08016174 	.word	0x08016174
 800f460:	08016194 	.word	0x08016194
 800f464:	080161b0 	.word	0x080161b0
 800f468:	080161f8 	.word	0x080161f8
 800f46c:	08016220 	.word	0x08016220
 800f470:	08016258 	.word	0x08016258
 800f474:	08016284 	.word	0x08016284
 800f478:	080162c8 	.word	0x080162c8
 800f47c:	080162fc 	.word	0x080162fc
 800f480:	08016320 	.word	0x08016320
 800f484:	08016340 	.word	0x08016340
 800f488:	0801637c 	.word	0x0801637c
 800f48c:	080163a0 	.word	0x080163a0
 800f490:	080163c4 	.word	0x080163c4
 800f494:	08016408 	.word	0x08016408
 800f498:	08016434 	.word	0x08016434
 800f49c:	08016470 	.word	0x08016470
 800f4a0:	080164a0 	.word	0x080164a0
 800f4a4:	080164e8 	.word	0x080164e8
 800f4a8:	08016530 	.word	0x08016530
 800f4ac:	08016560 	.word	0x08016560
 800f4b0:	08016584 	.word	0x08016584
 800f4b4:	080165a0 	.word	0x080165a0
 800f4b8:	080165c8 	.word	0x080165c8
 800f4bc:	080165f8 	.word	0x080165f8
 800f4c0:	08016620 	.word	0x08016620
 800f4c4:	08016674 	.word	0x08016674
 800f4c8:	080166a4 	.word	0x080166a4
 800f4cc:	080166f0 	.word	0x080166f0
 800f4d0:	08016738 	.word	0x08016738
 800f4d4:	08016760 	.word	0x08016760
 800f4d8:	0801679c 	.word	0x0801679c
 800f4dc:	080167dc 	.word	0x080167dc
 800f4e0:	08016804 	.word	0x08016804
 800f4e4:	08016830 	.word	0x08016830
 800f4e8:	08016858 	.word	0x08016858
 800f4ec:	08016888 	.word	0x08016888
 800f4f0:	080168bc 	.word	0x080168bc
 800f4f4:	080168e0 	.word	0x080168e0
    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	2b13      	cmp	r3, #19
 800f4fc:	d104      	bne.n	800f508 <mbedtls_strerror+0x9b0>
        mbedtls_snprintf( buf, buflen, "GCM - GCM hardware accelerator failed" );
 800f4fe:	4a41      	ldr	r2, [pc, #260]	; (800f604 <mbedtls_strerror+0xaac>)
 800f500:	6879      	ldr	r1, [r7, #4]
 800f502:	68b8      	ldr	r0, [r7, #8]
 800f504:	f005 f940 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	2b14      	cmp	r3, #20
 800f50c:	d104      	bne.n	800f518 <mbedtls_strerror+0x9c0>
        mbedtls_snprintf( buf, buflen, "GCM - Bad input parameters to function" );
 800f50e:	4a3e      	ldr	r2, [pc, #248]	; (800f608 <mbedtls_strerror+0xab0>)
 800f510:	6879      	ldr	r1, [r7, #4]
 800f512:	68b8      	ldr	r0, [r7, #8]
 800f514:	f005 f938 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_HKDF_C)
    if( use_ret == -(MBEDTLS_ERR_HKDF_BAD_INPUT_DATA) )
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	f5b3 4fbf 	cmp.w	r3, #24448	; 0x5f80
 800f51e:	d104      	bne.n	800f52a <mbedtls_strerror+0x9d2>
        mbedtls_snprintf( buf, buflen, "HKDF - Bad input parameters to function" );
 800f520:	4a3a      	ldr	r2, [pc, #232]	; (800f60c <mbedtls_strerror+0xab4>)
 800f522:	6879      	ldr	r1, [r7, #4]
 800f524:	68b8      	ldr	r0, [r7, #8]
 800f526:	f005 f92f 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_NET_BAD_INPUT_DATA) )
        mbedtls_snprintf( buf, buflen, "NET - Input invalid" );
#endif /* MBEDTLS_NET_C */

#if defined(MBEDTLS_OID_C)
    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	2b2e      	cmp	r3, #46	; 0x2e
 800f52e:	d104      	bne.n	800f53a <mbedtls_strerror+0x9e2>
        mbedtls_snprintf( buf, buflen, "OID - OID is not found" );
 800f530:	4a37      	ldr	r2, [pc, #220]	; (800f610 <mbedtls_strerror+0xab8>)
 800f532:	6879      	ldr	r1, [r7, #4]
 800f534:	68b8      	ldr	r0, [r7, #8]
 800f536:	f005 f927 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2b0b      	cmp	r3, #11
 800f53e:	d104      	bne.n	800f54a <mbedtls_strerror+0x9f2>
        mbedtls_snprintf( buf, buflen, "OID - output buffer is too small" );
 800f540:	4a34      	ldr	r2, [pc, #208]	; (800f614 <mbedtls_strerror+0xabc>)
 800f542:	6879      	ldr	r1, [r7, #4]
 800f544:	68b8      	ldr	r0, [r7, #8]
 800f546:	f005 f91f 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED) )
        mbedtls_snprintf( buf, buflen, "PADLOCK - Input data should be aligned" );
#endif /* MBEDTLS_PADLOCK_C */

#if defined(MBEDTLS_PLATFORM_C)
    if( use_ret == -(MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED) )
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	2b70      	cmp	r3, #112	; 0x70
 800f54e:	d104      	bne.n	800f55a <mbedtls_strerror+0xa02>
        mbedtls_snprintf( buf, buflen, "PLATFORM - Hardware accelerator failed" );
 800f550:	4a31      	ldr	r2, [pc, #196]	; (800f618 <mbedtls_strerror+0xac0>)
 800f552:	6879      	ldr	r1, [r7, #4]
 800f554:	68b8      	ldr	r0, [r7, #8]
 800f556:	f005 f917 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED) )
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2b72      	cmp	r3, #114	; 0x72
 800f55e:	d104      	bne.n	800f56a <mbedtls_strerror+0xa12>
        mbedtls_snprintf( buf, buflen, "PLATFORM - The requested feature is not supported by the platform" );
 800f560:	4a2e      	ldr	r2, [pc, #184]	; (800f61c <mbedtls_strerror+0xac4>)
 800f562:	6879      	ldr	r1, [r7, #4]
 800f564:	68b8      	ldr	r0, [r7, #8]
 800f566:	f005 f90f 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_PLATFORM_C */

#if defined(MBEDTLS_POLY1305_C)
    if( use_ret == -(MBEDTLS_ERR_POLY1305_BAD_INPUT_DATA) )
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2b57      	cmp	r3, #87	; 0x57
 800f56e:	d104      	bne.n	800f57a <mbedtls_strerror+0xa22>
        mbedtls_snprintf( buf, buflen, "POLY1305 - Invalid input parameter(s)" );
 800f570:	4a2b      	ldr	r2, [pc, #172]	; (800f620 <mbedtls_strerror+0xac8>)
 800f572:	6879      	ldr	r1, [r7, #4]
 800f574:	68b8      	ldr	r0, [r7, #8]
 800f576:	f005 f907 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_POLY1305_FEATURE_UNAVAILABLE) )
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	2b59      	cmp	r3, #89	; 0x59
 800f57e:	d104      	bne.n	800f58a <mbedtls_strerror+0xa32>
        mbedtls_snprintf( buf, buflen, "POLY1305 - Feature not available. For example, s part of the API is not implemented" );
 800f580:	4a28      	ldr	r2, [pc, #160]	; (800f624 <mbedtls_strerror+0xacc>)
 800f582:	6879      	ldr	r1, [r7, #4]
 800f584:	68b8      	ldr	r0, [r7, #8]
 800f586:	f005 f8ff 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_POLY1305_HW_ACCEL_FAILED) )
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	2b5b      	cmp	r3, #91	; 0x5b
 800f58e:	d104      	bne.n	800f59a <mbedtls_strerror+0xa42>
        mbedtls_snprintf( buf, buflen, "POLY1305 - Poly1305 hardware accelerator failed" );
 800f590:	4a25      	ldr	r2, [pc, #148]	; (800f628 <mbedtls_strerror+0xad0>)
 800f592:	6879      	ldr	r1, [r7, #4]
 800f594:	68b8      	ldr	r0, [r7, #8]
 800f596:	f005 f8f7 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_SHA1_BAD_INPUT_DATA) )
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 input data was malformed" );
#endif /* MBEDTLS_SHA1_C */

#if defined(MBEDTLS_SHA256_C)
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b37      	cmp	r3, #55	; 0x37
 800f59e:	d104      	bne.n	800f5aa <mbedtls_strerror+0xa52>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 800f5a0:	4a22      	ldr	r2, [pc, #136]	; (800f62c <mbedtls_strerror+0xad4>)
 800f5a2:	6879      	ldr	r1, [r7, #4]
 800f5a4:	68b8      	ldr	r0, [r7, #8]
 800f5a6:	f005 f8ef 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_SHA256_BAD_INPUT_DATA) )
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	2b74      	cmp	r3, #116	; 0x74
 800f5ae:	d104      	bne.n	800f5ba <mbedtls_strerror+0xa62>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 input data was malformed" );
 800f5b0:	4a1f      	ldr	r2, [pc, #124]	; (800f630 <mbedtls_strerror+0xad8>)
 800f5b2:	6879      	ldr	r1, [r7, #4]
 800f5b4:	68b8      	ldr	r0, [r7, #8]
 800f5b6:	f005 f8e7 	bl	8014788 <sniprintf>
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
    if( use_ret == -(MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED) )
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	2b39      	cmp	r3, #57	; 0x39
 800f5be:	d104      	bne.n	800f5ca <mbedtls_strerror+0xa72>
        mbedtls_snprintf( buf, buflen, "SHA512 - SHA-512 hardware accelerator failed" );
 800f5c0:	4a1c      	ldr	r2, [pc, #112]	; (800f634 <mbedtls_strerror+0xadc>)
 800f5c2:	6879      	ldr	r1, [r7, #4]
 800f5c4:	68b8      	ldr	r0, [r7, #8]
 800f5c6:	f005 f8df 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_SHA512_BAD_INPUT_DATA) )
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	2b75      	cmp	r3, #117	; 0x75
 800f5ce:	d104      	bne.n	800f5da <mbedtls_strerror+0xa82>
        mbedtls_snprintf( buf, buflen, "SHA512 - SHA-512 input data was malformed" );
 800f5d0:	4a19      	ldr	r2, [pc, #100]	; (800f638 <mbedtls_strerror+0xae0>)
 800f5d2:	6879      	ldr	r1, [r7, #4]
 800f5d4:	68b8      	ldr	r0, [r7, #8]
 800f5d6:	f005 f8d7 	bl	8014788 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "XTEA - XTEA hardware accelerator failed" );
#endif /* MBEDTLS_XTEA_C */
    // END generated code

    if( strlen( buf ) != 0 )
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d10c      	bne.n	800f5fc <mbedtls_strerror+0xaa4>
        return;

    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	4a15      	ldr	r2, [pc, #84]	; (800f63c <mbedtls_strerror+0xae4>)
 800f5e6:	6879      	ldr	r1, [r7, #4]
 800f5e8:	68b8      	ldr	r0, [r7, #8]
 800f5ea:	f005 f8cd 	bl	8014788 <sniprintf>
 800f5ee:	e006      	b.n	800f5fe <mbedtls_strerror+0xaa6>
        return;
 800f5f0:	bf00      	nop
 800f5f2:	e004      	b.n	800f5fe <mbedtls_strerror+0xaa6>
        return;
 800f5f4:	bf00      	nop
 800f5f6:	e002      	b.n	800f5fe <mbedtls_strerror+0xaa6>
            return;
 800f5f8:	bf00      	nop
 800f5fa:	e000      	b.n	800f5fe <mbedtls_strerror+0xaa6>
        return;
 800f5fc:	bf00      	nop
}
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	08016908 	.word	0x08016908
 800f608:	08016930 	.word	0x08016930
 800f60c:	08016958 	.word	0x08016958
 800f610:	08016980 	.word	0x08016980
 800f614:	08016998 	.word	0x08016998
 800f618:	080169bc 	.word	0x080169bc
 800f61c:	080169e4 	.word	0x080169e4
 800f620:	08016a28 	.word	0x08016a28
 800f624:	08016a50 	.word	0x08016a50
 800f628:	08016aa4 	.word	0x08016aa4
 800f62c:	08016ad4 	.word	0x08016ad4
 800f630:	08016b04 	.word	0x08016b04
 800f634:	08016b30 	.word	0x08016b30
 800f638:	08016b60 	.word	0x08016b60
 800f63c:	08016138 	.word	0x08016138

0800f640 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	4603      	mov	r3, r0
 800f648:	71fb      	strb	r3, [r7, #7]
    switch( md_type )
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	3b05      	subs	r3, #5
 800f64e:	2b03      	cmp	r3, #3
 800f650:	d812      	bhi.n	800f678 <mbedtls_md_info_from_type+0x38>
 800f652:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <mbedtls_md_info_from_type+0x18>)
 800f654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f658:	0800f669 	.word	0x0800f669
 800f65c:	0800f66d 	.word	0x0800f66d
 800f660:	0800f671 	.word	0x0800f671
 800f664:	0800f675 	.word	0x0800f675
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 800f668:	4b07      	ldr	r3, [pc, #28]	; (800f688 <mbedtls_md_info_from_type+0x48>)
 800f66a:	e006      	b.n	800f67a <mbedtls_md_info_from_type+0x3a>
        case MBEDTLS_MD_SHA256:
            return( &mbedtls_sha256_info );
 800f66c:	4b07      	ldr	r3, [pc, #28]	; (800f68c <mbedtls_md_info_from_type+0x4c>)
 800f66e:	e004      	b.n	800f67a <mbedtls_md_info_from_type+0x3a>
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA384:
            return( &mbedtls_sha384_info );
 800f670:	4b07      	ldr	r3, [pc, #28]	; (800f690 <mbedtls_md_info_from_type+0x50>)
 800f672:	e002      	b.n	800f67a <mbedtls_md_info_from_type+0x3a>
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
 800f674:	4b07      	ldr	r3, [pc, #28]	; (800f694 <mbedtls_md_info_from_type+0x54>)
 800f676:	e000      	b.n	800f67a <mbedtls_md_info_from_type+0x3a>
#endif
        default:
            return( NULL );
 800f678:	2300      	movs	r3, #0
    }
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	370c      	adds	r7, #12
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	080199b4 	.word	0x080199b4
 800f68c:	080199e4 	.word	0x080199e4
 800f690:	08019a14 	.word	0x08019a14
 800f694:	08019a44 	.word	0x08019a44

0800f698 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
 800f6a4:	603b      	str	r3, [r7, #0]
    if( md_info == NULL )
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d101      	bne.n	800f6b0 <mbedtls_md+0x18>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800f6ac:	4b06      	ldr	r3, [pc, #24]	; (800f6c8 <mbedtls_md+0x30>)
 800f6ae:	e006      	b.n	800f6be <mbedtls_md+0x26>

    return( md_info->digest_func( input, ilen, output ) );
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	69db      	ldr	r3, [r3, #28]
 800f6b4:	683a      	ldr	r2, [r7, #0]
 800f6b6:	6879      	ldr	r1, [r7, #4]
 800f6b8:	68b8      	ldr	r0, [r7, #8]
 800f6ba:	4798      	blx	r3
 800f6bc:	4603      	mov	r3, r0
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	ffffaf00 	.word	0xffffaf00

0800f6cc <mbedtls_md_get_size>:

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
    if( md_info == NULL )
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <mbedtls_md_get_size+0x12>
        return( 0 );
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e002      	b.n	800f6e4 <mbedtls_md_get_size+0x18>

    return md_info->size;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	b2db      	uxtb	r3, r3
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <sha224_starts_wrap>:
 * Wrappers for generic message digests
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 800f6f8:	2101      	movs	r1, #1
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f001 f8ee 	bl	80108dc <mbedtls_sha256_starts_ret>
 800f700:	4603      	mov	r3, r0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <sha224_update_wrap>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b084      	sub	sp, #16
 800f70e:	af00      	add	r7, sp, #0
 800f710:	60f8      	str	r0, [r7, #12]
 800f712:	60b9      	str	r1, [r7, #8]
 800f714:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	68b9      	ldr	r1, [r7, #8]
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f002 fb58 	bl	8011dd0 <mbedtls_sha256_update_ret>
 800f720:	4603      	mov	r3, r0
                                       input, ilen ) );
}
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <sha224_finish_wrap>:

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b082      	sub	sp, #8
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	6039      	str	r1, [r7, #0]
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f002 fbbf 	bl	8011eba <mbedtls_sha256_finish_ret>
 800f73c:	4603      	mov	r3, r0
                                       output ) );
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <sha224_wrap>:

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800f746:	b580      	push	{r7, lr}
 800f748:	b084      	sub	sp, #16
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	60f8      	str	r0, [r7, #12]
 800f74e:	60b9      	str	r1, [r7, #8]
 800f750:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800f752:	2301      	movs	r3, #1
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	68b9      	ldr	r1, [r7, #8]
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f002 fd15 	bl	8012188 <mbedtls_sha256_ret>
 800f75e:	4603      	mov	r3, r0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <sha224_ctx_alloc>:

static void *sha224_ctx_alloc( void )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 800f76e:	216c      	movs	r1, #108	; 0x6c
 800f770:	2001      	movs	r0, #1
 800f772:	f004 fec5 	bl	8014500 <calloc>
 800f776:	4603      	mov	r3, r0
 800f778:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <sha224_ctx_alloc+0x1e>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f001 f87d 	bl	8010880 <mbedtls_sha256_init>

    return( ctx );
 800f786:	687b      	ldr	r3, [r7, #4]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <sha224_ctx_free>:

static void sha224_ctx_free( void *ctx )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f001 f87e 	bl	801089a <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f004 fee8 	bl	8014574 <free>
}
 800f7a4:	bf00      	nop
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <sha224_clone_wrap>:

static void sha224_clone_wrap( void *dst, const void *src )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f001 f87e 	bl	80108ba <mbedtls_sha256_clone>
                    (const mbedtls_sha256_context *) src );
}
 800f7be:	bf00      	nop
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <sha224_process_wrap>:

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
 800f7ce:	6039      	str	r1, [r7, #0]
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f001 f8ec 	bl	80109b0 <mbedtls_internal_sha256_process>
 800f7d8:	4603      	mov	r3, r0
                                             data ) );
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <sha256_starts_wrap>:
    sha224_clone_wrap,
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f001 f875 	bl	80108dc <mbedtls_sha256_starts_ret>
 800f7f2:	4603      	mov	r3, r0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <sha256_wrap>:

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 800f808:	2300      	movs	r3, #0
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f002 fcba 	bl	8012188 <mbedtls_sha256_ret>
 800f814:	4603      	mov	r3, r0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <sha384_starts_wrap>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
 800f81e:	b580      	push	{r7, lr}
 800f820:	b082      	sub	sp, #8
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 800f826:	2101      	movs	r1, #1
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f002 fd15 	bl	8012258 <mbedtls_sha512_starts_ret>
 800f82e:	4603      	mov	r3, r0
}
 800f830:	4618      	mov	r0, r3
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <sha384_update_wrap>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	68b9      	ldr	r1, [r7, #8]
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f004 f915 	bl	8013a78 <mbedtls_sha512_update_ret>
 800f84e:	4603      	mov	r3, r0
                                       input, ilen ) );
}
 800f850:	4618      	mov	r0, r3
 800f852:	3710      	adds	r7, #16
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <sha384_finish_wrap>:

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
 800f862:	6839      	ldr	r1, [r7, #0]
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f004 f98c 	bl	8013b82 <mbedtls_sha512_finish_ret>
 800f86a:	4603      	mov	r3, r0
                                       output ) );
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <sha384_wrap>:

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 800f880:	2301      	movs	r3, #1
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	68b9      	ldr	r1, [r7, #8]
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f004 fdfb 	bl	8014482 <mbedtls_sha512_ret>
 800f88c:	4603      	mov	r3, r0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <sha384_ctx_alloc>:

static void *sha384_ctx_alloc( void )
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b082      	sub	sp, #8
 800f89a:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 800f89c:	21d8      	movs	r1, #216	; 0xd8
 800f89e:	2001      	movs	r0, #1
 800f8a0:	f004 fe2e 	bl	8014500 <calloc>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d002      	beq.n	800f8b4 <sha384_ctx_alloc+0x1e>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f002 fca2 	bl	80121f8 <mbedtls_sha512_init>

    return( ctx );
 800f8b4:	687b      	ldr	r3, [r7, #4]
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <sha384_ctx_free>:

static void sha384_ctx_free( void *ctx )
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f002 fca3 	bl	8012212 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f004 fe51 	bl	8014574 <free>
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <sha384_clone_wrap>:

static void sha384_clone_wrap( void *dst, const void *src )
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b082      	sub	sp, #8
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	6039      	str	r1, [r7, #0]
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 800f8e4:	6839      	ldr	r1, [r7, #0]
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f002 fca3 	bl	8012232 <mbedtls_sha512_clone>
                    (const mbedtls_sha512_context *) src );
}
 800f8ec:	bf00      	nop
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <sha384_process_wrap>:

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f002 fd6d 	bl	80123e0 <mbedtls_internal_sha512_process>
 800f906:	4603      	mov	r3, r0
                                             data ) );
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <sha512_starts_wrap>:
    sha384_clone_wrap,
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 800f918:	2100      	movs	r1, #0
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f002 fc9c 	bl	8012258 <mbedtls_sha512_starts_ret>
 800f920:	4603      	mov	r3, r0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <sha512_wrap>:

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b084      	sub	sp, #16
 800f92e:	af00      	add	r7, sp, #0
 800f930:	60f8      	str	r0, [r7, #12]
 800f932:	60b9      	str	r1, [r7, #8]
 800f934:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 800f936:	2300      	movs	r3, #0
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	68b9      	ldr	r1, [r7, #8]
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f004 fda0 	bl	8014482 <mbedtls_sha512_ret>
 800f942:	4603      	mov	r3, r0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <oid_pk_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	4b16      	ldr	r3, [pc, #88]	; (800f9b0 <oid_pk_alg_from_asn1+0x64>)
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	60bb      	str	r3, [r7, #8]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d002      	beq.n	800f968 <oid_pk_alg_from_asn1+0x1c>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d11a      	bne.n	800f99e <oid_pk_alg_from_asn1+0x52>
 800f968:	2300      	movs	r3, #0
 800f96a:	e01d      	b.n	800f9a8 <oid_pk_alg_from_asn1+0x5c>
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	685a      	ldr	r2, [r3, #4]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	429a      	cmp	r2, r3
 800f976:	d10d      	bne.n	800f994 <oid_pk_alg_from_asn1+0x48>
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	6818      	ldr	r0, [r3, #0]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6899      	ldr	r1, [r3, #8]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	461a      	mov	r2, r3
 800f986:	f004 fdfd 	bl	8014584 <memcmp>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d101      	bne.n	800f994 <oid_pk_alg_from_asn1+0x48>
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	e009      	b.n	800f9a8 <oid_pk_alg_from_asn1+0x5c>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	3314      	adds	r3, #20
 800f998:	60fb      	str	r3, [r7, #12]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	60bb      	str	r3, [r7, #8]
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1e2      	bne.n	800f96c <oid_pk_alg_from_asn1+0x20>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	08019a74 	.word	0x08019a74

0800f9b4 <mbedtls_oid_get_pk_alg>:
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7ff ffc4 	bl	800f94c <oid_pk_alg_from_asn1>
 800f9c4:	60f8      	str	r0, [r7, #12]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d102      	bne.n	800f9d2 <mbedtls_oid_get_pk_alg+0x1e>
 800f9cc:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800f9d0:	e004      	b.n	800f9dc <mbedtls_oid_get_pk_alg+0x28>
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	7c1a      	ldrb	r2, [r3, #16]
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	701a      	strb	r2, [r3, #0]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <oid_grp_id_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	4b16      	ldr	r3, [pc, #88]	; (800fa48 <oid_grp_id_from_asn1+0x64>)
 800f9ee:	60fb      	str	r3, [r7, #12]
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	60bb      	str	r3, [r7, #8]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d002      	beq.n	800fa00 <oid_grp_id_from_asn1+0x1c>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d11a      	bne.n	800fa36 <oid_grp_id_from_asn1+0x52>
 800fa00:	2300      	movs	r3, #0
 800fa02:	e01d      	b.n	800fa40 <oid_grp_id_from_asn1+0x5c>
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	685a      	ldr	r2, [r3, #4]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d10d      	bne.n	800fa2c <oid_grp_id_from_asn1+0x48>
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	6818      	ldr	r0, [r3, #0]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6899      	ldr	r1, [r3, #8]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	f004 fdb1 	bl	8014584 <memcmp>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d101      	bne.n	800fa2c <oid_grp_id_from_asn1+0x48>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	e009      	b.n	800fa40 <oid_grp_id_from_asn1+0x5c>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	3314      	adds	r3, #20
 800fa30:	60fb      	str	r3, [r7, #12]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	60bb      	str	r3, [r7, #8]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1e2      	bne.n	800fa04 <oid_grp_id_from_asn1+0x20>
 800fa3e:	2300      	movs	r3, #0
 800fa40:	4618      	mov	r0, r3
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	08019ac4 	.word	0x08019ac4

0800fa4c <mbedtls_oid_get_ec_grp>:
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff ffc4 	bl	800f9e4 <oid_grp_id_from_asn1>
 800fa5c:	60f8      	str	r0, [r7, #12]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d102      	bne.n	800fa6a <mbedtls_oid_get_ec_grp+0x1e>
 800fa64:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 800fa68:	e004      	b.n	800fa74 <mbedtls_oid_get_ec_grp+0x28>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	7c1a      	ldrb	r2, [r3, #16]
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	701a      	strb	r2, [r3, #0]
 800fa72:	2300      	movs	r3, #0
 800fa74:	4618      	mov	r0, r3
 800fa76:	3710      	adds	r7, #16
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <mbedtls_pem_init>:
#define mbedtls_free       free
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 800fa84:	220c      	movs	r2, #12
 800fa86:	2100      	movs	r1, #0
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f004 fdae 	bl	80145ea <memset>
}
 800fa8e:	bf00      	nop
 800fa90:	3708      	adds	r7, #8
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
	...

0800fa98 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b08e      	sub	sp, #56	; 0x38
 800fa9c:	af02      	add	r7, sp, #8
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
 800faa4:	603b      	str	r3, [r7, #0]
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d101      	bne.n	800fab0 <mbedtls_pem_read_buffer+0x18>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 800faac:	4b63      	ldr	r3, [pc, #396]	; (800fc3c <mbedtls_pem_read_buffer+0x1a4>)
 800faae:	e0c0      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>

    s1 = (unsigned char *) strstr( (const char *) data, header );
 800fab0:	68b9      	ldr	r1, [r7, #8]
 800fab2:	6838      	ldr	r0, [r7, #0]
 800fab4:	f004 fec9 	bl	801484a <strstr>
 800fab8:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( s1 == NULL )
 800faba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d101      	bne.n	800fac4 <mbedtls_pem_read_buffer+0x2c>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800fac0:	4b5f      	ldr	r3, [pc, #380]	; (800fc40 <mbedtls_pem_read_buffer+0x1a8>)
 800fac2:	e0b6      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 800fac4:	6879      	ldr	r1, [r7, #4]
 800fac6:	6838      	ldr	r0, [r7, #0]
 800fac8:	f004 febf 	bl	801484a <strstr>
 800facc:	6278      	str	r0, [r7, #36]	; 0x24

    if( s2 == NULL || s2 <= s1 )
 800face:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d003      	beq.n	800fadc <mbedtls_pem_read_buffer+0x44>
 800fad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	429a      	cmp	r2, r3
 800fada:	d801      	bhi.n	800fae0 <mbedtls_pem_read_buffer+0x48>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800fadc:	4b58      	ldr	r3, [pc, #352]	; (800fc40 <mbedtls_pem_read_buffer+0x1a8>)
 800fade:	e0a8      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>

    s1 += strlen( header );
 800fae0:	68b8      	ldr	r0, [r7, #8]
 800fae2:	f7f0 fb7d 	bl	80001e0 <strlen>
 800fae6:	4602      	mov	r2, r0
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	4413      	add	r3, r2
 800faec:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == ' '  ) s1++;
 800faee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b20      	cmp	r3, #32
 800faf4:	d102      	bne.n	800fafc <mbedtls_pem_read_buffer+0x64>
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	3301      	adds	r3, #1
 800fafa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\r' ) s1++;
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	2b0d      	cmp	r3, #13
 800fb02:	d102      	bne.n	800fb0a <mbedtls_pem_read_buffer+0x72>
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	3301      	adds	r3, #1
 800fb08:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( *s1 == '\n' ) s1++;
 800fb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	2b0a      	cmp	r3, #10
 800fb10:	d110      	bne.n	800fb34 <mbedtls_pem_read_buffer+0x9c>
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	3301      	adds	r3, #1
 800fb16:	62fb      	str	r3, [r7, #44]	; 0x2c
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
 800fb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1a:	62bb      	str	r3, [r7, #40]	; 0x28
    end += strlen( footer );
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7f0 fb5f 	bl	80001e0 <strlen>
 800fb22:	4602      	mov	r2, r0
 800fb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb26:	4413      	add	r3, r2
 800fb28:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == ' '  ) end++;
 800fb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	2b20      	cmp	r3, #32
 800fb30:	d105      	bne.n	800fb3e <mbedtls_pem_read_buffer+0xa6>
 800fb32:	e001      	b.n	800fb38 <mbedtls_pem_read_buffer+0xa0>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 800fb34:	4b42      	ldr	r3, [pc, #264]	; (800fc40 <mbedtls_pem_read_buffer+0x1a8>)
 800fb36:	e07c      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>
    if( *end == ' '  ) end++;
 800fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\r' ) end++;
 800fb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	2b0d      	cmp	r3, #13
 800fb44:	d102      	bne.n	800fb4c <mbedtls_pem_read_buffer+0xb4>
 800fb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb48:	3301      	adds	r3, #1
 800fb4a:	62bb      	str	r3, [r7, #40]	; 0x28
    if( *end == '\n' ) end++;
 800fb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b0a      	cmp	r3, #10
 800fb52:	d102      	bne.n	800fb5a <mbedtls_pem_read_buffer+0xc2>
 800fb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb56:	3301      	adds	r3, #1
 800fb58:	62bb      	str	r3, [r7, #40]	; 0x28
    *use_len = end - data;
 800fb5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	1ad3      	subs	r3, r2, r3
 800fb60:	461a      	mov	r2, r3
 800fb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb64:	601a      	str	r2, [r3, #0]

    enc = 0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	623b      	str	r3, [r7, #32]

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 800fb6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6e:	1ad3      	subs	r3, r2, r3
 800fb70:	2b15      	cmp	r3, #21
 800fb72:	dd09      	ble.n	800fb88 <mbedtls_pem_read_buffer+0xf0>
 800fb74:	2216      	movs	r2, #22
 800fb76:	4933      	ldr	r1, [pc, #204]	; (800fc44 <mbedtls_pem_read_buffer+0x1ac>)
 800fb78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb7a:	f004 fd03 	bl	8014584 <memcmp>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d101      	bne.n	800fb88 <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800fb84:	4b30      	ldr	r3, [pc, #192]	; (800fc48 <mbedtls_pem_read_buffer+0x1b0>)
 800fb86:	e054      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 800fb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d301      	bcc.n	800fb94 <mbedtls_pem_read_buffer+0xfc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 800fb90:	4b2e      	ldr	r3, [pc, #184]	; (800fc4c <mbedtls_pem_read_buffer+0x1b4>)
 800fb92:	e04e      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 800fb94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	f107 0214 	add.w	r2, r7, #20
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba2:	2100      	movs	r1, #0
 800fba4:	2000      	movs	r0, #0
 800fba6:	f7f4 ffa7 	bl	8004af8 <mbedtls_base64_decode>
 800fbaa:	61f8      	str	r0, [r7, #28]

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	f113 0f2c 	cmn.w	r3, #44	; 0x2c
 800fbb2:	d103      	bne.n	800fbbc <mbedtls_pem_read_buffer+0x124>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800fbba:	e03a      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	4619      	mov	r1, r3
 800fbc0:	2001      	movs	r0, #1
 800fbc2:	f004 fc9d 	bl	8014500 <calloc>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	61bb      	str	r3, [r7, #24]
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d101      	bne.n	800fbd4 <mbedtls_pem_read_buffer+0x13c>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 800fbd0:	4b1f      	ldr	r3, [pc, #124]	; (800fc50 <mbedtls_pem_read_buffer+0x1b8>)
 800fbd2:	e02e      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 800fbd4:	6979      	ldr	r1, [r7, #20]
 800fbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	f107 0214 	add.w	r2, r7, #20
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe4:	69b8      	ldr	r0, [r7, #24]
 800fbe6:	f7f4 ff87 	bl	8004af8 <mbedtls_base64_decode>
 800fbea:	61f8      	str	r0, [r7, #28]
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00b      	beq.n	800fc0a <mbedtls_pem_read_buffer+0x172>
    {
        mbedtls_platform_zeroize( buf, len );
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	69b8      	ldr	r0, [r7, #24]
 800fbf8:	f000 fe30 	bl	801085c <mbedtls_platform_zeroize>
        mbedtls_free( buf );
 800fbfc:	69b8      	ldr	r0, [r7, #24]
 800fbfe:	f004 fcb9 	bl	8014574 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800fc08:	e013      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>
    }

    if( enc != 0 )
 800fc0a:	6a3b      	ldr	r3, [r7, #32]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d009      	beq.n	800fc24 <mbedtls_pem_read_buffer+0x18c>
            mbedtls_platform_zeroize( buf, len );
            mbedtls_free( buf );
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
        }
#else
        mbedtls_platform_zeroize( buf, len );
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	4619      	mov	r1, r3
 800fc14:	69b8      	ldr	r0, [r7, #24]
 800fc16:	f000 fe21 	bl	801085c <mbedtls_platform_zeroize>
        mbedtls_free( buf );
 800fc1a:	69b8      	ldr	r0, [r7, #24]
 800fc1c:	f004 fcaa 	bl	8014574 <free>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 800fc20:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <mbedtls_pem_read_buffer+0x1b0>)
 800fc22:	e006      	b.n	800fc32 <mbedtls_pem_read_buffer+0x19a>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	69ba      	ldr	r2, [r7, #24]
 800fc28:	601a      	str	r2, [r3, #0]
    ctx->buflen = len;
 800fc2a:	697a      	ldr	r2, [r7, #20]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	605a      	str	r2, [r3, #4]

    return( 0 );
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3730      	adds	r7, #48	; 0x30
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	ffffeb80 	.word	0xffffeb80
 800fc40:	ffffef80 	.word	0xffffef80
 800fc44:	08017438 	.word	0x08017438
 800fc48:	ffffec00 	.word	0xffffec00
 800fc4c:	ffffef00 	.word	0xffffef00
 800fc50:	ffffee80 	.word	0xffffee80

0800fc54 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
    if ( ctx->buf != NULL )
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d00c      	beq.n	800fc7e <mbedtls_pem_free+0x2a>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	4610      	mov	r0, r2
 800fc70:	f000 fdf4 	bl	801085c <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f004 fc7b 	bl	8014574 <free>
    }
    mbedtls_free( ctx->info );
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f004 fc76 	bl	8014574 <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 800fc88:	210c      	movs	r1, #12
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 fde6 	bl	801085c <mbedtls_platform_zeroize>
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <mbedtls_pk_init>:

/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]
    ctx->pk_ctx = NULL;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	605a      	str	r2, [r3, #4]
}
 800fcac:	bf00      	nop
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00f      	beq.n	800fce6 <mbedtls_pk_free+0x2e>
        return;

    if ( ctx->pk_info != NULL )
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d006      	beq.n	800fcdc <mbedtls_pk_free+0x24>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	6852      	ldr	r2, [r2, #4]
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 800fcdc:	2108      	movs	r1, #8
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fdbc 	bl	801085c <mbedtls_platform_zeroize>
 800fce4:	e000      	b.n	800fce8 <mbedtls_pk_free+0x30>
        return;
 800fce6:	bf00      	nop
}
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
	...

0800fcf0 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	71fb      	strb	r3, [r7, #7]
    switch( pk_type ) {
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d005      	beq.n	800fd0c <mbedtls_pk_info_from_type+0x1c>
 800fd00:	2b04      	cmp	r3, #4
 800fd02:	d005      	beq.n	800fd10 <mbedtls_pk_info_from_type+0x20>
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d105      	bne.n	800fd14 <mbedtls_pk_info_from_type+0x24>
        case MBEDTLS_PK_RSA:
            return( &mbedtls_rsa_info );
#endif
#if defined(MBEDTLS_ECP_C)
        case MBEDTLS_PK_ECKEY:
            return( &mbedtls_eckey_info );
 800fd08:	4b06      	ldr	r3, [pc, #24]	; (800fd24 <mbedtls_pk_info_from_type+0x34>)
 800fd0a:	e004      	b.n	800fd16 <mbedtls_pk_info_from_type+0x26>
        case MBEDTLS_PK_ECKEY_DH:
            return( &mbedtls_eckeydh_info );
 800fd0c:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <mbedtls_pk_info_from_type+0x38>)
 800fd0e:	e002      	b.n	800fd16 <mbedtls_pk_info_from_type+0x26>
#endif
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
 800fd10:	4b06      	ldr	r3, [pc, #24]	; (800fd2c <mbedtls_pk_info_from_type+0x3c>)
 800fd12:	e000      	b.n	800fd16 <mbedtls_pk_info_from_type+0x26>
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 800fd14:	2300      	movs	r3, #0
    }
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	08019b00 	.word	0x08019b00
 800fd28:	08019b30 	.word	0x08019b30
 800fd2c:	08019b60 	.word	0x08019b60

0800fd30 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d003      	beq.n	800fd48 <mbedtls_pk_setup+0x18>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800fd48:	4b0a      	ldr	r3, [pc, #40]	; (800fd74 <mbedtls_pk_setup+0x44>)
 800fd4a:	e00f      	b.n	800fd6c <mbedtls_pk_setup+0x3c>

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd50:	4798      	blx	r3
 800fd52:	4602      	mov	r2, r0
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	605a      	str	r2, [r3, #4]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d101      	bne.n	800fd64 <mbedtls_pk_setup+0x34>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 800fd60:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <mbedtls_pk_setup+0x48>)
 800fd62:	e003      	b.n	800fd6c <mbedtls_pk_setup+0x3c>

    ctx->pk_info = info;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	683a      	ldr	r2, [r7, #0]
 800fd68:	601a      	str	r2, [r3, #0]

    return( 0 );
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3708      	adds	r7, #8
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	ffffc180 	.word	0xffffc180
 800fd78:	ffffc080 	.word	0xffffc080

0800fd7c <pk_hashlen_helper>:

/*
 * Helper for mbedtls_pk_sign and mbedtls_pk_verify
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	71fb      	strb	r3, [r7, #7]
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <pk_hashlen_helper+0x18>
        return( 0 );
 800fd90:	2300      	movs	r3, #0
 800fd92:	e012      	b.n	800fdba <pk_hashlen_helper+0x3e>

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff fc52 	bl	800f640 <mbedtls_md_info_from_type>
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d102      	bne.n	800fdaa <pk_hashlen_helper+0x2e>
        return( -1 );
 800fda4:	f04f 33ff 	mov.w	r3, #4294967295
 800fda8:	e007      	b.n	800fdba <pk_hashlen_helper+0x3e>

    *hash_len = mbedtls_md_get_size( md_info );
 800fdaa:	68f8      	ldr	r0, [r7, #12]
 800fdac:	f7ff fc8e 	bl	800f6cc <mbedtls_md_get_size>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	601a      	str	r2, [r3, #0]
    return( 0 );
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
	...

0800fdc4 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
 800fdc4:	b590      	push	{r4, r7, lr}
 800fdc6:	b089      	sub	sp, #36	; 0x24
 800fdc8:	af04      	add	r7, sp, #16
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	607a      	str	r2, [r7, #4]
 800fdce:	603b      	str	r3, [r7, #0]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	72fb      	strb	r3, [r7, #11]
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d008      	beq.n	800fdee <mbedtls_pk_sign_restartable+0x2a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800fddc:	463a      	mov	r2, r7
 800fdde:	7afb      	ldrb	r3, [r7, #11]
 800fde0:	4611      	mov	r1, r2
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7ff ffca 	bl	800fd7c <pk_hashlen_helper>
 800fde8:	4603      	mov	r3, r0
    if( ctx->pk_info == NULL ||
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <mbedtls_pk_sign_restartable+0x2e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800fdee:	4b10      	ldr	r3, [pc, #64]	; (800fe30 <mbedtls_pk_sign_restartable+0x6c>)
 800fdf0:	e019      	b.n	800fe26 <mbedtls_pk_sign_restartable+0x62>
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	695b      	ldr	r3, [r3, #20]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d101      	bne.n	800fe00 <mbedtls_pk_sign_restartable+0x3c>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800fdfc:	4b0d      	ldr	r3, [pc, #52]	; (800fe34 <mbedtls_pk_sign_restartable+0x70>)
 800fdfe:	e012      	b.n	800fe26 <mbedtls_pk_sign_restartable+0x62>

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	695c      	ldr	r4, [r3, #20]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	6858      	ldr	r0, [r3, #4]
 800fe0a:	683a      	ldr	r2, [r7, #0]
 800fe0c:	7af9      	ldrb	r1, [r7, #11]
 800fe0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe10:	9303      	str	r3, [sp, #12]
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	9302      	str	r3, [sp, #8]
 800fe16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe18:	9301      	str	r3, [sp, #4]
 800fe1a:	6a3b      	ldr	r3, [r7, #32]
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	4613      	mov	r3, r2
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	47a0      	blx	r4
 800fe24:	4603      	mov	r3, r0
                                     sig, sig_len, f_rng, p_rng ) );
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3714      	adds	r7, #20
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd90      	pop	{r4, r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	ffffc180 	.word	0xffffc180
 800fe34:	ffffc100 	.word	0xffffc100

0800fe38 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08a      	sub	sp, #40	; 0x28
 800fe3c:	af06      	add	r7, sp, #24
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	607a      	str	r2, [r7, #4]
 800fe42:	603b      	str	r3, [r7, #0]
 800fe44:	460b      	mov	r3, r1
 800fe46:	72fb      	strb	r3, [r7, #11]
    return( mbedtls_pk_sign_restartable( ctx, md_alg, hash, hash_len,
 800fe48:	7af9      	ldrb	r1, [r7, #11]
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	9304      	str	r3, [sp, #16]
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe50:	9303      	str	r3, [sp, #12]
 800fe52:	6a3b      	ldr	r3, [r7, #32]
 800fe54:	9302      	str	r3, [sp, #8]
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f7ff ffae 	bl	800fdc4 <mbedtls_pk_sign_restartable>
 800fe68:	4603      	mov	r3, r0
                                         sig, sig_len, f_rng, p_rng, NULL ) );
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <eckey_can_do>:
#if defined(MBEDTLS_ECP_C)
/*
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
 800fe72:	b480      	push	{r7}
 800fe74:	b083      	sub	sp, #12
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	4603      	mov	r3, r0
 800fe7a:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 800fe7c:	79fb      	ldrb	r3, [r7, #7]
 800fe7e:	2b02      	cmp	r3, #2
 800fe80:	d005      	beq.n	800fe8e <eckey_can_do+0x1c>
    return( type == MBEDTLS_PK_ECKEY ||
 800fe82:	79fb      	ldrb	r3, [r7, #7]
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	d002      	beq.n	800fe8e <eckey_can_do+0x1c>
            type == MBEDTLS_PK_ECKEY_DH ||
 800fe88:	79fb      	ldrb	r3, [r7, #7]
 800fe8a:	2b04      	cmp	r3, #4
 800fe8c:	d101      	bne.n	800fe92 <eckey_can_do+0x20>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	e000      	b.n	800fe94 <eckey_can_do+0x22>
 800fe92:	2300      	movs	r3, #0
            type == MBEDTLS_PK_ECDSA );
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800feac:	4618      	mov	r0, r3
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <eckey_verify_wrap>:
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b0b2      	sub	sp, #200	; 0xc8
 800febc:	af02      	add	r7, sp, #8
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	607a      	str	r2, [r7, #4]
 800fec2:	603b      	str	r3, [r7, #0]
 800fec4:	460b      	mov	r3, r1
 800fec6:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 800fec8:	f107 0310 	add.w	r3, r7, #16
 800fecc:	4618      	mov	r0, r3
 800fece:	f7f9 fd96 	bl	80099fe <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 800fed2:	f107 0310 	add.w	r3, r7, #16
 800fed6:	68f9      	ldr	r1, [r7, #12]
 800fed8:	4618      	mov	r0, r3
 800feda:	f7f9 fd5f 	bl	800999c <mbedtls_ecdsa_from_keypair>
 800fede:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800fee2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d10e      	bne.n	800ff08 <eckey_verify_wrap+0x50>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 800feea:	7af9      	ldrb	r1, [r7, #11]
 800feec:	f107 0010 	add.w	r0, r7, #16
 800fef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fef4:	9301      	str	r3, [sp, #4]
 800fef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	f000 f8b4 	bl	801006c <ecdsa_verify_wrap>
 800ff04:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

    mbedtls_ecdsa_free( &ecdsa );
 800ff08:	f107 0310 	add.w	r3, r7, #16
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7f9 fd81 	bl	8009a14 <mbedtls_ecdsa_free>

    return( ret );
 800ff12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	37c0      	adds	r7, #192	; 0xc0
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <eckey_sign_wrap>:

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b0b4      	sub	sp, #208	; 0xd0
 800ff22:	af04      	add	r7, sp, #16
 800ff24:	60f8      	str	r0, [r7, #12]
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	603b      	str	r3, [r7, #0]
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 800ff2e:	f107 0310 	add.w	r3, r7, #16
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7f9 fd63 	bl	80099fe <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 800ff38:	f107 0310 	add.w	r3, r7, #16
 800ff3c:	68f9      	ldr	r1, [r7, #12]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f9 fd2c 	bl	800999c <mbedtls_ecdsa_from_keypair>
 800ff44:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800ff48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d114      	bne.n	800ff7a <eckey_sign_wrap+0x5c>
        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,
 800ff50:	7af9      	ldrb	r1, [r7, #11]
 800ff52:	f107 0010 	add.w	r0, r7, #16
 800ff56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff5a:	9303      	str	r3, [sp, #12]
 800ff5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ff60:	9302      	str	r3, [sp, #8]
 800ff62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ff66:	9301      	str	r3, [sp, #4]
 800ff68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	f000 f899 	bl	80100a8 <ecdsa_sign_wrap>
 800ff76:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                               f_rng, p_rng );

    mbedtls_ecdsa_free( &ecdsa );
 800ff7a:	f107 0310 	add.w	r3, r7, #16
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7f9 fd48 	bl	8009a14 <mbedtls_ecdsa_free>

    return( ret );
 800ff84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	37c0      	adds	r7, #192	; 0xc0
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <eckey_check_pair>:
}
#endif /* MBEDTLS_ECP_RESTARTABLE */
#endif /* MBEDTLS_ECDSA_C */

static int eckey_check_pair( const void *pub, const void *prv )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 800ff9a:	6839      	ldr	r1, [r7, #0]
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f7fc fefd 	bl	800cd9c <mbedtls_ecp_check_pub_priv>
 800ffa2:	4603      	mov	r3, r0
                                (const mbedtls_ecp_keypair *) prv ) );
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <eckey_alloc_wrap>:

static void *eckey_alloc_wrap( void )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 800ffb2:	21ac      	movs	r1, #172	; 0xac
 800ffb4:	2001      	movs	r0, #1
 800ffb6:	f004 faa3 	bl	8014500 <calloc>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d002      	beq.n	800ffca <eckey_alloc_wrap+0x1e>
        mbedtls_ecp_keypair_init( ctx );
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7f9 fda0 	bl	8009b0a <mbedtls_ecp_keypair_init>

    return( ctx );
 800ffca:	687b      	ldr	r3, [r7, #4]
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <eckey_free_wrap>:

static void eckey_free_wrap( void *ctx )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7f9 fe10 	bl	8009c02 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f004 fac6 	bl	8014574 <free>
}
 800ffe8:	bf00      	nop
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <eckey_debug>:

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
    items->type = MBEDTLS_PK_DEBUG_ECP;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	2202      	movs	r2, #2
 800fffe:	701a      	strb	r2, [r3, #0]
    items->name = "eckey.Q";
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	4a06      	ldr	r2, [pc, #24]	; (801001c <eckey_debug+0x2c>)
 8010004:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f103 0288 	add.w	r2, r3, #136	; 0x88
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	609a      	str	r2, [r3, #8]
}
 8010010:	bf00      	nop
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr
 801001c:	08017450 	.word	0x08017450

08010020 <eckeydh_can_do>:

/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	4603      	mov	r3, r0
 8010028:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECKEY ||
 801002a:	79fb      	ldrb	r3, [r7, #7]
 801002c:	2b02      	cmp	r3, #2
 801002e:	d002      	beq.n	8010036 <eckeydh_can_do+0x16>
 8010030:	79fb      	ldrb	r3, [r7, #7]
 8010032:	2b03      	cmp	r3, #3
 8010034:	d101      	bne.n	801003a <eckeydh_can_do+0x1a>
 8010036:	2301      	movs	r3, #1
 8010038:	e000      	b.n	801003c <eckeydh_can_do+0x1c>
 801003a:	2300      	movs	r3, #0
            type == MBEDTLS_PK_ECKEY_DH );
}
 801003c:	4618      	mov	r0, r3
 801003e:	370c      	adds	r7, #12
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr

08010048 <ecdsa_can_do>:
};
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	4603      	mov	r3, r0
 8010050:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECDSA );
 8010052:	79fb      	ldrb	r3, [r7, #7]
 8010054:	2b04      	cmp	r3, #4
 8010056:	bf0c      	ite	eq
 8010058:	2301      	moveq	r3, #1
 801005a:	2300      	movne	r3, #0
 801005c:	b2db      	uxtb	r3, r3
}
 801005e:	4618      	mov	r0, r3
 8010060:	370c      	adds	r7, #12
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
	...

0801006c <ecdsa_verify_wrap>:

static int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b088      	sub	sp, #32
 8010070:	af02      	add	r7, sp, #8
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	607a      	str	r2, [r7, #4]
 8010076:	603b      	str	r3, [r7, #0]
 8010078:	460b      	mov	r3, r1
 801007a:	72fb      	strb	r3, [r7, #11]
    int ret;
    ((void) md_alg);

    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	6879      	ldr	r1, [r7, #4]
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f7f9 fbf1 	bl	800986e <mbedtls_ecdsa_read_signature>
 801008c:	6178      	str	r0, [r7, #20]
                                hash, hash_len, sig, sig_len );

    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	f513 4f98 	cmn.w	r3, #19456	; 0x4c00
 8010094:	d101      	bne.n	801009a <ecdsa_verify_wrap+0x2e>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8010096:	4b03      	ldr	r3, [pc, #12]	; (80100a4 <ecdsa_verify_wrap+0x38>)
 8010098:	e000      	b.n	801009c <ecdsa_verify_wrap+0x30>

    return( ret );
 801009a:	697b      	ldr	r3, [r7, #20]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3718      	adds	r7, #24
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	ffffc700 	.word	0xffffc700

080100a8 <ecdsa_sign_wrap>:

static int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b088      	sub	sp, #32
 80100ac:	af04      	add	r7, sp, #16
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	607a      	str	r2, [r7, #4]
 80100b2:	603b      	str	r3, [r7, #0]
 80100b4:	460b      	mov	r3, r1
 80100b6:	72fb      	strb	r3, [r7, #11]
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 80100b8:	7af9      	ldrb	r1, [r7, #11]
 80100ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100bc:	9303      	str	r3, [sp, #12]
 80100be:	6a3b      	ldr	r3, [r7, #32]
 80100c0:	9302      	str	r3, [sp, #8]
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	9301      	str	r3, [sp, #4]
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f7f9 fbb0 	bl	8009834 <mbedtls_ecdsa_write_signature>
 80100d4:	4603      	mov	r3, r0
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b082      	sub	sp, #8
 80100e2:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 80100e4:	21ac      	movs	r1, #172	; 0xac
 80100e6:	2001      	movs	r0, #1
 80100e8:	f004 fa0a 	bl	8014500 <calloc>
 80100ec:	4603      	mov	r3, r0
 80100ee:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d002      	beq.n	80100fc <ecdsa_alloc_wrap+0x1e>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7f9 fc81 	bl	80099fe <mbedtls_ecdsa_init>

    return( ctx );
 80100fc:	687b      	ldr	r3, [r7, #4]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b082      	sub	sp, #8
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f7f9 fc80 	bl	8009a14 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f004 fa2d 	bl	8014574 <free>
}
 801011a:	bf00      	nop
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <mbedtls_pk_ec>:
 *
 * \warning You must make sure the PK context actually holds an EC context
 * before using this function!
 */
static inline mbedtls_ecp_keypair *mbedtls_pk_ec( const mbedtls_pk_context pk )
{
 8010122:	b480      	push	{r7}
 8010124:	b083      	sub	sp, #12
 8010126:	af00      	add	r7, sp, #0
 8010128:	463b      	mov	r3, r7
 801012a:	e883 0003 	stmia.w	r3, {r0, r1}
    return( (mbedtls_ecp_keypair *) (pk).pk_ctx );
 801012e:	687b      	ldr	r3, [r7, #4]
}
 8010130:	4618      	mov	r0, r3
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <pk_get_ecparams>:
 *   -- implicitCurve   NULL
 * }
 */
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
    int ret;

    if ( end - *p < 1 )
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	6812      	ldr	r2, [r2, #0]
 801014e:	1a9b      	subs	r3, r3, r2
 8010150:	2b00      	cmp	r3, #0
 8010152:	dc01      	bgt.n	8010158 <pk_get_ecparams+0x1c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8010154:	4b1a      	ldr	r3, [pc, #104]	; (80101c0 <pk_get_ecparams+0x84>)
 8010156:	e02e      	b.n	80101b6 <pk_get_ecparams+0x7a>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Tag may be either OID or SEQUENCE */
    params->tag = **p;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	601a      	str	r2, [r3, #0]
    if( params->tag != MBEDTLS_ASN1_OID
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2b06      	cmp	r3, #6
 801016a:	d001      	beq.n	8010170 <pk_get_ecparams+0x34>
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
#endif
            )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801016c:	4b15      	ldr	r3, [pc, #84]	; (80101c4 <pk_get_ecparams+0x88>)
 801016e:	e022      	b.n	80101b6 <pk_get_ecparams+0x7a>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    }

    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	68b9      	ldr	r1, [r7, #8]
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f7f4 fa06 	bl	800458c <mbedtls_asn1_get_tag>
 8010180:	6178      	str	r0, [r7, #20]
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d003      	beq.n	8010190 <pk_get_ecparams+0x54>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 801018e:	e012      	b.n	80101b6 <pk_get_ecparams+0x7a>
    }

    params->p = *p;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	609a      	str	r2, [r3, #8]
    *p += params->len;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	441a      	add	r2, r3
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	601a      	str	r2, [r3, #0]

    if( *p != end )
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d001      	beq.n	80101b4 <pk_get_ecparams+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80101b0:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <pk_get_ecparams+0x8c>)
 80101b2:	e000      	b.n	80101b6 <pk_get_ecparams+0x7a>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3718      	adds	r7, #24
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	ffffc2a0 	.word	0xffffc2a0
 80101c4:	ffffc29e 	.word	0xffffc29e
 80101c8:	ffffc29a 	.word	0xffffc29a

080101cc <pk_use_ecparams>:
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b06      	cmp	r3, #6
 80101dc:	d10a      	bne.n	80101f4 <pk_use_ecparams+0x28>
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 80101de:	f107 030b 	add.w	r3, r7, #11
 80101e2:	4619      	mov	r1, r3
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f7ff fc31 	bl	800fa4c <mbedtls_oid_get_ec_grp>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d003      	beq.n	80101f8 <pk_use_ecparams+0x2c>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 80101f0:	4b0f      	ldr	r3, [pc, #60]	; (8010230 <pk_use_ecparams+0x64>)
 80101f2:	e018      	b.n	8010226 <pk_use_ecparams+0x5a>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80101f4:	4b0f      	ldr	r3, [pc, #60]	; (8010234 <pk_use_ecparams+0x68>)
 80101f6:	e016      	b.n	8010226 <pk_use_ecparams+0x5a>
    }

    /*
     * grp may already be initilialized; if so, make sure IDs match
     */
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d006      	beq.n	801020e <pk_use_ecparams+0x42>
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	781a      	ldrb	r2, [r3, #0]
 8010204:	7afb      	ldrb	r3, [r7, #11]
 8010206:	429a      	cmp	r2, r3
 8010208:	d001      	beq.n	801020e <pk_use_ecparams+0x42>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801020a:	4b0a      	ldr	r3, [pc, #40]	; (8010234 <pk_use_ecparams+0x68>)
 801020c:	e00b      	b.n	8010226 <pk_use_ecparams+0x5a>

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 801020e:	7afb      	ldrb	r3, [r7, #11]
 8010210:	4619      	mov	r1, r3
 8010212:	6838      	ldr	r0, [r7, #0]
 8010214:	f7fc ff9c 	bl	800d150 <mbedtls_ecp_group_load>
 8010218:	60f8      	str	r0, [r7, #12]
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <pk_use_ecparams+0x58>
        return( ret );
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	e000      	b.n	8010226 <pk_use_ecparams+0x5a>

    return( 0 );
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	ffffc600 	.word	0xffffc600
 8010234:	ffffc300 	.word	0xffffc300

08010238 <pk_get_ecpubkey>:
 * desired. Take care to pass along the possible ECP_FEATURE_UNAVAILABLE
 * return code of mbedtls_ecp_point_read_binary() and leave p in a usable state.
 */
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
 8010238:	b590      	push	{r4, r7, lr}
 801023a:	b087      	sub	sp, #28
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f103 0188 	add.w	r1, r3, #136	; 0x88
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681c      	ldr	r4, [r3, #0]
                    (const unsigned char *) *p, end - *p ) ) == 0 )
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	6812      	ldr	r2, [r2, #0]
 8010256:	1a9b      	subs	r3, r3, r2
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8010258:	4622      	mov	r2, r4
 801025a:	f7f9 fd6b 	bl	8009d34 <mbedtls_ecp_point_read_binary>
 801025e:	6178      	str	r0, [r7, #20]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d107      	bne.n	8010276 <pk_get_ecpubkey+0x3e>
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	3388      	adds	r3, #136	; 0x88
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f7fc fc56 	bl	800cb20 <mbedtls_ecp_check_pubkey>
 8010274:	6178      	str	r0, [r7, #20]
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	601a      	str	r2, [r3, #0]

    return( ret );
 801027c:	697b      	ldr	r3, [r7, #20]
}
 801027e:	4618      	mov	r0, r3
 8010280:	371c      	adds	r7, #28
 8010282:	46bd      	mov	sp, r7
 8010284:	bd90      	pop	{r4, r7, pc}
	...

08010288 <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b088      	sub	sp, #32
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
 8010294:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8010296:	220c      	movs	r2, #12
 8010298:	2100      	movs	r1, #0
 801029a:	6838      	ldr	r0, [r7, #0]
 801029c:	f004 f9a5 	bl	80145ea <memset>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80102a0:	f107 0210 	add.w	r2, r7, #16
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	68b9      	ldr	r1, [r7, #8]
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f7f4 fa25 	bl	80046f8 <mbedtls_asn1_get_alg>
 80102ae:	61f8      	str	r0, [r7, #28]
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d003      	beq.n	80102be <pk_get_pk_alg+0x36>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 80102bc:	e01d      	b.n	80102fa <pk_get_pk_alg+0x72>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 80102be:	f107 0310 	add.w	r3, r7, #16
 80102c2:	6879      	ldr	r1, [r7, #4]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff fb75 	bl	800f9b4 <mbedtls_oid_get_pk_alg>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d001      	beq.n	80102d4 <pk_get_pk_alg+0x4c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80102d0:	4b0c      	ldr	r3, [pc, #48]	; (8010304 <pk_get_pk_alg+0x7c>)
 80102d2:	e012      	b.n	80102fa <pk_get_pk_alg+0x72>

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d10d      	bne.n	80102f8 <pk_get_pk_alg+0x70>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	681b      	ldr	r3, [r3, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80102e0:	2b05      	cmp	r3, #5
 80102e2:	d003      	beq.n	80102ec <pk_get_pk_alg+0x64>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d103      	bne.n	80102f4 <pk_get_pk_alg+0x6c>
                params->len != 0 ) )
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	685b      	ldr	r3, [r3, #4]
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d001      	beq.n	80102f8 <pk_get_pk_alg+0x70>
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80102f4:	4b04      	ldr	r3, [pc, #16]	; (8010308 <pk_get_pk_alg+0x80>)
 80102f6:	e000      	b.n	80102fa <pk_get_pk_alg+0x72>
    }

    return( 0 );
 80102f8:	2300      	movs	r3, #0
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3720      	adds	r7, #32
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	ffffc380 	.word	0xffffc380
 8010308:	ffffc580 	.word	0xffffc580

0801030c <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 801030c:	b590      	push	{r4, r7, lr}
 801030e:	b091      	sub	sp, #68	; 0x44
 8010310:	af02      	add	r7, sp, #8
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	613b      	str	r3, [r7, #16]
    unsigned char *end = p + keylen;
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4413      	add	r3, r2
 8010322:	62fb      	str	r3, [r7, #44]	; 0x2c
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8010324:	f107 0220 	add.w	r2, r7, #32
 8010328:	f107 0010 	add.w	r0, r7, #16
 801032c:	2330      	movs	r3, #48	; 0x30
 801032e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010330:	f7f4 f92c 	bl	800458c <mbedtls_asn1_get_tag>
 8010334:	6378      	str	r0, [r7, #52]	; 0x34
 8010336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010338:	2b00      	cmp	r3, #0
 801033a:	d003      	beq.n	8010344 <pk_parse_key_sec1_der+0x38>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801033c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033e:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 8010342:	e0f4      	b.n	801052e <pk_parse_key_sec1_der+0x222>
    }

    end = p + len;
 8010344:	693a      	ldr	r2, [r7, #16]
 8010346:	6a3b      	ldr	r3, [r7, #32]
 8010348:	4413      	add	r3, r2
 801034a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 801034c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010350:	f107 0310 	add.w	r3, r7, #16
 8010354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010356:	4618      	mov	r0, r3
 8010358:	f7f4 f941 	bl	80045de <mbedtls_asn1_get_int>
 801035c:	6378      	str	r0, [r7, #52]	; 0x34
 801035e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010360:	2b00      	cmp	r3, #0
 8010362:	d003      	beq.n	801036c <pk_parse_key_sec1_der+0x60>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8010364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010366:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 801036a:	e0e0      	b.n	801052e <pk_parse_key_sec1_der+0x222>

    if( version != 1 )
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	2b01      	cmp	r3, #1
 8010370:	d001      	beq.n	8010376 <pk_parse_key_sec1_der+0x6a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8010372:	4b71      	ldr	r3, [pc, #452]	; (8010538 <pk_parse_key_sec1_der+0x22c>)
 8010374:	e0db      	b.n	801052e <pk_parse_key_sec1_der+0x222>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8010376:	f107 0220 	add.w	r2, r7, #32
 801037a:	f107 0010 	add.w	r0, r7, #16
 801037e:	2304      	movs	r3, #4
 8010380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010382:	f7f4 f903 	bl	800458c <mbedtls_asn1_get_tag>
 8010386:	6378      	str	r0, [r7, #52]	; 0x34
 8010388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038a:	2b00      	cmp	r3, #0
 801038c:	d003      	beq.n	8010396 <pk_parse_key_sec1_der+0x8a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801038e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010390:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 8010394:	e0cb      	b.n	801052e <pk_parse_key_sec1_der+0x222>

    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	337c      	adds	r3, #124	; 0x7c
 801039a:	6939      	ldr	r1, [r7, #16]
 801039c:	6a3a      	ldr	r2, [r7, #32]
 801039e:	4618      	mov	r0, r3
 80103a0:	f7f5 f9c0 	bl	8005724 <mbedtls_mpi_read_binary>
 80103a4:	6378      	str	r0, [r7, #52]	; 0x34
 80103a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d006      	beq.n	80103ba <pk_parse_key_sec1_der+0xae>
    {
        mbedtls_ecp_keypair_free( eck );
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f7f9 fc28 	bl	8009c02 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b4:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 80103b8:	e0b9      	b.n	801052e <pk_parse_key_sec1_der+0x222>
    }

    p += len;
 80103ba:	693a      	ldr	r2, [r7, #16]
 80103bc:	6a3b      	ldr	r3, [r7, #32]
 80103be:	4413      	add	r3, r2
 80103c0:	613b      	str	r3, [r7, #16]

    pubkey_done = 0;
 80103c2:	2300      	movs	r3, #0
 80103c4:	633b      	str	r3, [r7, #48]	; 0x30
    if( p != end )
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d034      	beq.n	8010438 <pk_parse_key_sec1_der+0x12c>
    {
        /*
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80103ce:	f107 0220 	add.w	r2, r7, #32
 80103d2:	f107 0010 	add.w	r0, r7, #16
 80103d6:	23a0      	movs	r3, #160	; 0xa0
 80103d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103da:	f7f4 f8d7 	bl	800458c <mbedtls_asn1_get_tag>
 80103de:	6378      	str	r0, [r7, #52]	; 0x34
 80103e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d11d      	bne.n	8010422 <pk_parse_key_sec1_der+0x116>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80103e6:	693a      	ldr	r2, [r7, #16]
 80103e8:	6a3b      	ldr	r3, [r7, #32]
 80103ea:	18d1      	adds	r1, r2, r3
 80103ec:	f107 0214 	add.w	r2, r7, #20
 80103f0:	f107 0310 	add.w	r3, r7, #16
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7ff fea1 	bl	801013c <pk_get_ecparams>
 80103fa:	6378      	str	r0, [r7, #52]	; 0x34
 80103fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10a      	bne.n	8010418 <pk_parse_key_sec1_der+0x10c>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
 8010402:	68fa      	ldr	r2, [r7, #12]
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8010404:	f107 0314 	add.w	r3, r7, #20
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff fede 	bl	80101cc <pk_use_ecparams>
 8010410:	6378      	str	r0, [r7, #52]	; 0x34
 8010412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00f      	beq.n	8010438 <pk_parse_key_sec1_der+0x12c>
            {
                mbedtls_ecp_keypair_free( eck );
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f7f9 fbf2 	bl	8009c02 <mbedtls_ecp_keypair_free>
                return( ret );
 801041e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010420:	e085      	b.n	801052e <pk_parse_key_sec1_der+0x222>
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8010422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010424:	f113 0f62 	cmn.w	r3, #98	; 0x62
 8010428:	d006      	beq.n	8010438 <pk_parse_key_sec1_der+0x12c>
        {
            mbedtls_ecp_keypair_free( eck );
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7f9 fbe9 	bl	8009c02 <mbedtls_ecp_keypair_free>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8010430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010432:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 8010436:	e07a      	b.n	801052e <pk_parse_key_sec1_der+0x222>
        }
    }

    if( p != end )
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801043c:	429a      	cmp	r2, r3
 801043e:	d046      	beq.n	80104ce <pk_parse_key_sec1_der+0x1c2>
    {
        /*
         * Is 'publickey' present? If not, or if we can't read it (eg because it
         * is compressed), create it from the private key.
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8010440:	f107 0220 	add.w	r2, r7, #32
 8010444:	f107 0010 	add.w	r0, r7, #16
 8010448:	23a1      	movs	r3, #161	; 0xa1
 801044a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801044c:	f7f4 f89e 	bl	800458c <mbedtls_asn1_get_tag>
 8010450:	6378      	str	r0, [r7, #52]	; 0x34
 8010452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010454:	2b00      	cmp	r3, #0
 8010456:	d12f      	bne.n	80104b8 <pk_parse_key_sec1_der+0x1ac>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;
 8010458:	693a      	ldr	r2, [r7, #16]
 801045a:	6a3b      	ldr	r3, [r7, #32]
 801045c:	4413      	add	r3, r2
 801045e:	62bb      	str	r3, [r7, #40]	; 0x28

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 8010460:	f107 0220 	add.w	r2, r7, #32
 8010464:	f107 0310 	add.w	r3, r7, #16
 8010468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801046a:	4618      	mov	r0, r3
 801046c:	f7f4 f91b 	bl	80046a6 <mbedtls_asn1_get_bitstring_null>
 8010470:	6378      	str	r0, [r7, #52]	; 0x34
 8010472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010474:	2b00      	cmp	r3, #0
 8010476:	d003      	beq.n	8010480 <pk_parse_key_sec1_der+0x174>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8010478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801047a:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 801047e:	e056      	b.n	801052e <pk_parse_key_sec1_der+0x222>

            if( p + len != end2 )
 8010480:	693a      	ldr	r2, [r7, #16]
 8010482:	6a3b      	ldr	r3, [r7, #32]
 8010484:	4413      	add	r3, r2
 8010486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010488:	429a      	cmp	r2, r3
 801048a:	d001      	beq.n	8010490 <pk_parse_key_sec1_der+0x184>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801048c:	4b2b      	ldr	r3, [pc, #172]	; (801053c <pk_parse_key_sec1_der+0x230>)
 801048e:	e04e      	b.n	801052e <pk_parse_key_sec1_der+0x222>
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 8010490:	f107 0310 	add.w	r3, r7, #16
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010498:	4618      	mov	r0, r3
 801049a:	f7ff fecd 	bl	8010238 <pk_get_ecpubkey>
 801049e:	6378      	str	r0, [r7, #52]	; 0x34
 80104a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d102      	bne.n	80104ac <pk_parse_key_sec1_der+0x1a0>
                pubkey_done = 1;
 80104a6:	2301      	movs	r3, #1
 80104a8:	633b      	str	r3, [r7, #48]	; 0x30
 80104aa:	e010      	b.n	80104ce <pk_parse_key_sec1_der+0x1c2>
            {
                /*
                 * The only acceptable failure mode of pk_get_ecpubkey() above
                 * is if the point format is not recognized.
                 */
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 80104ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ae:	f513 4f9d 	cmn.w	r3, #20096	; 0x4e80
 80104b2:	d00c      	beq.n	80104ce <pk_parse_key_sec1_der+0x1c2>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80104b4:	4b22      	ldr	r3, [pc, #136]	; (8010540 <pk_parse_key_sec1_der+0x234>)
 80104b6:	e03a      	b.n	801052e <pk_parse_key_sec1_der+0x222>
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80104b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ba:	f113 0f62 	cmn.w	r3, #98	; 0x62
 80104be:	d006      	beq.n	80104ce <pk_parse_key_sec1_der+0x1c2>
        {
            mbedtls_ecp_keypair_free( eck );
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	f7f9 fb9e 	bl	8009c02 <mbedtls_ecp_keypair_free>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80104c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c8:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 80104cc:	e02f      	b.n	801052e <pk_parse_key_sec1_der+0x222>
        }
    }

    if( ! pubkey_done &&
 80104ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d11b      	bne.n	801050c <pk_parse_key_sec1_der+0x200>
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f103 0188 	add.w	r1, r3, #136	; 0x88
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f103 0428 	add.w	r4, r3, #40	; 0x28
    if( ! pubkey_done &&
 80104e8:	2300      	movs	r3, #0
 80104ea:	9301      	str	r3, [sp, #4]
 80104ec:	2300      	movs	r3, #0
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	4623      	mov	r3, r4
 80104f2:	f7fc f907 	bl	800c704 <mbedtls_ecp_mul>
 80104f6:	6378      	str	r0, [r7, #52]	; 0x34
 80104f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d006      	beq.n	801050c <pk_parse_key_sec1_der+0x200>
                                                      NULL, NULL ) ) != 0 )
    {
        mbedtls_ecp_keypair_free( eck );
 80104fe:	68f8      	ldr	r0, [r7, #12]
 8010500:	f7f9 fb7f 	bl	8009c02 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8010504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010506:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 801050a:	e010      	b.n	801052e <pk_parse_key_sec1_der+0x222>
    }

    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 801050c:	68fa      	ldr	r2, [r7, #12]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	337c      	adds	r3, #124	; 0x7c
 8010512:	4619      	mov	r1, r3
 8010514:	4610      	mov	r0, r2
 8010516:	f7fc fb35 	bl	800cb84 <mbedtls_ecp_check_privkey>
 801051a:	6378      	str	r0, [r7, #52]	; 0x34
 801051c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051e:	2b00      	cmp	r3, #0
 8010520:	d004      	beq.n	801052c <pk_parse_key_sec1_der+0x220>
    {
        mbedtls_ecp_keypair_free( eck );
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f7f9 fb6d 	bl	8009c02 <mbedtls_ecp_keypair_free>
        return( ret );
 8010528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052a:	e000      	b.n	801052e <pk_parse_key_sec1_der+0x222>
    }

    return( 0 );
 801052c:	2300      	movs	r3, #0
}
 801052e:	4618      	mov	r0, r3
 8010530:	373c      	adds	r7, #60	; 0x3c
 8010532:	46bd      	mov	sp, r7
 8010534:	bd90      	pop	{r4, r7, pc}
 8010536:	bf00      	nop
 8010538:	ffffc280 	.word	0xffffc280
 801053c:	ffffc29a 	.word	0xffffc29a
 8010540:	ffffc300 	.word	0xffffc300

08010544 <pk_parse_key_pkcs8_unencrypted_der>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b08e      	sub	sp, #56	; 0x38
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	617b      	str	r3, [r7, #20]
    unsigned char *end = p + keylen;
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4413      	add	r3, r2
 801055a:	633b      	str	r3, [r7, #48]	; 0x30
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 801055c:	2300      	movs	r3, #0
 801055e:	74fb      	strb	r3, [r7, #19]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8010560:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010564:	f107 0014 	add.w	r0, r7, #20
 8010568:	2330      	movs	r3, #48	; 0x30
 801056a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801056c:	f7f4 f80e 	bl	800458c <mbedtls_asn1_get_tag>
 8010570:	6378      	str	r0, [r7, #52]	; 0x34
 8010572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010574:	2b00      	cmp	r3, #0
 8010576:	d003      	beq.n	8010580 <pk_parse_key_pkcs8_unencrypted_der+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8010578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801057a:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 801057e:	e082      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>
    }

    end = p + len;
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010584:	4413      	add	r3, r2
 8010586:	633b      	str	r3, [r7, #48]	; 0x30

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8010588:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801058c:	f107 0314 	add.w	r3, r7, #20
 8010590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010592:	4618      	mov	r0, r3
 8010594:	f7f4 f823 	bl	80045de <mbedtls_asn1_get_int>
 8010598:	6378      	str	r0, [r7, #52]	; 0x34
 801059a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059c:	2b00      	cmp	r3, #0
 801059e:	d003      	beq.n	80105a8 <pk_parse_key_pkcs8_unencrypted_der+0x64>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80105a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a2:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 80105a6:	e06e      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>

    if( version != 0 )
 80105a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d003      	beq.n	80105b6 <pk_parse_key_pkcs8_unencrypted_der+0x72>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 80105ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b0:	f5a3 5376 	sub.w	r3, r3, #15744	; 0x3d80
 80105b4:	e067      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 80105b6:	f107 0318 	add.w	r3, r7, #24
 80105ba:	f107 0213 	add.w	r2, r7, #19
 80105be:	f107 0014 	add.w	r0, r7, #20
 80105c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105c4:	f7ff fe60 	bl	8010288 <pk_get_pk_alg>
 80105c8:	6378      	str	r0, [r7, #52]	; 0x34
 80105ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d003      	beq.n	80105d8 <pk_parse_key_pkcs8_unencrypted_der+0x94>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80105d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d2:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 80105d6:	e056      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80105d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80105dc:	f107 0014 	add.w	r0, r7, #20
 80105e0:	2304      	movs	r3, #4
 80105e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105e4:	f7f3 ffd2 	bl	800458c <mbedtls_asn1_get_tag>
 80105e8:	6378      	str	r0, [r7, #52]	; 0x34
 80105ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d003      	beq.n	80105f8 <pk_parse_key_pkcs8_unencrypted_der+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80105f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f2:	f5a3 5374 	sub.w	r3, r3, #15616	; 0x3d00
 80105f6:	e046      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>

    if( len < 1 )
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d101      	bne.n	8010602 <pk_parse_key_pkcs8_unencrypted_der+0xbe>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80105fe:	4b24      	ldr	r3, [pc, #144]	; (8010690 <pk_parse_key_pkcs8_unencrypted_der+0x14c>)
 8010600:	e041      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8010602:	7cfb      	ldrb	r3, [r7, #19]
 8010604:	4618      	mov	r0, r3
 8010606:	f7ff fb73 	bl	800fcf0 <mbedtls_pk_info_from_type>
 801060a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060e:	2b00      	cmp	r3, #0
 8010610:	d101      	bne.n	8010616 <pk_parse_key_pkcs8_unencrypted_der+0xd2>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8010612:	4b20      	ldr	r3, [pc, #128]	; (8010694 <pk_parse_key_pkcs8_unencrypted_der+0x150>)
 8010614:	e037      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8010616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f7ff fb89 	bl	800fd30 <mbedtls_pk_setup>
 801061e:	6378      	str	r0, [r7, #52]	; 0x34
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	2b00      	cmp	r3, #0
 8010624:	d001      	beq.n	801062a <pk_parse_key_pkcs8_unencrypted_der+0xe6>
        return( ret );
 8010626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010628:	e02d      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>
            return( ret );
        }
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 801062a:	7cfb      	ldrb	r3, [r7, #19]
 801062c:	2b02      	cmp	r3, #2
 801062e:	d002      	beq.n	8010636 <pk_parse_key_pkcs8_unencrypted_der+0xf2>
 8010630:	7cfb      	ldrb	r3, [r7, #19]
 8010632:	2b03      	cmp	r3, #3
 8010634:	d123      	bne.n	801067e <pk_parse_key_pkcs8_unencrypted_der+0x13a>
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	e893 0003 	ldmia.w	r3, {r0, r1}
 801063c:	f7ff fd71 	bl	8010122 <mbedtls_pk_ec>
 8010640:	4603      	mov	r3, r0
 8010642:	461a      	mov	r2, r3
 8010644:	f107 0318 	add.w	r3, r7, #24
 8010648:	4611      	mov	r1, r2
 801064a:	4618      	mov	r0, r3
 801064c:	f7ff fdbe 	bl	80101cc <pk_use_ecparams>
 8010650:	6378      	str	r0, [r7, #52]	; 0x34
 8010652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10d      	bne.n	8010674 <pk_parse_key_pkcs8_unencrypted_der+0x130>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801065e:	f7ff fd60 	bl	8010122 <mbedtls_pk_ec>
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8010666:	4619      	mov	r1, r3
 8010668:	f7ff fe50 	bl	801030c <pk_parse_key_sec1_der>
 801066c:	6378      	str	r0, [r7, #52]	; 0x34
 801066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010670:	2b00      	cmp	r3, #0
 8010672:	d006      	beq.n	8010682 <pk_parse_key_pkcs8_unencrypted_der+0x13e>
        {
            mbedtls_pk_free( pk );
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f7ff fb1f 	bl	800fcb8 <mbedtls_pk_free>
            return( ret );
 801067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067c:	e003      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 801067e:	4b05      	ldr	r3, [pc, #20]	; (8010694 <pk_parse_key_pkcs8_unencrypted_der+0x150>)
 8010680:	e001      	b.n	8010686 <pk_parse_key_pkcs8_unencrypted_der+0x142>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8010682:	bf00      	nop

    return( 0 );
 8010684:	2300      	movs	r3, #0
}
 8010686:	4618      	mov	r0, r3
 8010688:	3738      	adds	r7, #56	; 0x38
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
 801068e:	bf00      	nop
 8010690:	ffffc2a0 	.word	0xffffc2a0
 8010694:	ffffc380 	.word	0xffffc380

08010698 <mbedtls_pk_parse_key>:
    return buffer;
}
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b08e      	sub	sp, #56	; 0x38
 801069c:	af04      	add	r7, sp, #16
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	60b9      	str	r1, [r7, #8]
 80106a2:	607a      	str	r2, [r7, #4]
 80106a4:	603b      	str	r3, [r7, #0]
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d101      	bne.n	80106b0 <mbedtls_pk_parse_key+0x18>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80106ac:	4b62      	ldr	r3, [pc, #392]	; (8010838 <mbedtls_pk_parse_key+0x1a0>)
 80106ae:	e0bf      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
 80106b0:	f107 0310 	add.w	r3, r7, #16
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7ff f9e1 	bl	800fa7c <mbedtls_pem_init>
        return( ret );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	3b01      	subs	r3, #1
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	4413      	add	r3, r2
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d002      	beq.n	80106ce <mbedtls_pk_parse_key+0x36>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 80106c8:	4b5c      	ldr	r3, [pc, #368]	; (801083c <mbedtls_pk_parse_key+0x1a4>)
 80106ca:	627b      	str	r3, [r7, #36]	; 0x24
 80106cc:	e00e      	b.n	80106ec <mbedtls_pk_parse_key+0x54>
    else
        ret = mbedtls_pem_read_buffer( &pem,
 80106ce:	f107 0010 	add.w	r0, r7, #16
 80106d2:	f107 031c 	add.w	r3, r7, #28
 80106d6:	9302      	str	r3, [sp, #8]
 80106d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106da:	9301      	str	r3, [sp, #4]
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	4a57      	ldr	r2, [pc, #348]	; (8010840 <mbedtls_pk_parse_key+0x1a8>)
 80106e4:	4957      	ldr	r1, [pc, #348]	; (8010844 <mbedtls_pk_parse_key+0x1ac>)
 80106e6:	f7ff f9d7 	bl	800fa98 <mbedtls_pem_read_buffer>
 80106ea:	6278      	str	r0, [r7, #36]	; 0x24
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d123      	bne.n	801073a <mbedtls_pk_parse_key+0xa2>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 80106f2:	2002      	movs	r0, #2
 80106f4:	f7ff fafc 	bl	800fcf0 <mbedtls_pk_info_from_type>
 80106f8:	6238      	str	r0, [r7, #32]

        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80106fa:	6a39      	ldr	r1, [r7, #32]
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	f7ff fb17 	bl	800fd30 <mbedtls_pk_setup>
 8010702:	6278      	str	r0, [r7, #36]	; 0x24
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	2b00      	cmp	r3, #0
 8010708:	d10d      	bne.n	8010726 <mbedtls_pk_parse_key+0x8e>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010710:	f7ff fd07 	bl	8010122 <mbedtls_pk_ec>
                                           pem.buf, pem.buflen ) ) != 0 )
 8010714:	693b      	ldr	r3, [r7, #16]
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 8010716:	697a      	ldr	r2, [r7, #20]
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8010718:	4619      	mov	r1, r3
 801071a:	f7ff fdf7 	bl	801030c <pk_parse_key_sec1_der>
 801071e:	6278      	str	r0, [r7, #36]	; 0x24
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	2b00      	cmp	r3, #0
 8010724:	d002      	beq.n	801072c <mbedtls_pk_parse_key+0x94>
        {
            mbedtls_pk_free( pk );
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f7ff fac6 	bl	800fcb8 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 801072c:	f107 0310 	add.w	r3, r7, #16
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff fa8f 	bl	800fc54 <mbedtls_pem_free>
        return( ret );
 8010736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010738:	e07a      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 801073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073c:	f513 5f9c 	cmn.w	r3, #4992	; 0x1380
 8010740:	d101      	bne.n	8010746 <mbedtls_pk_parse_key+0xae>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8010742:	4b41      	ldr	r3, [pc, #260]	; (8010848 <mbedtls_pk_parse_key+0x1b0>)
 8010744:	e074      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8010746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010748:	f513 5f98 	cmn.w	r3, #4864	; 0x1300
 801074c:	d101      	bne.n	8010752 <mbedtls_pk_parse_key+0xba>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 801074e:	4b3f      	ldr	r3, [pc, #252]	; (801084c <mbedtls_pk_parse_key+0x1b4>)
 8010750:	e06e      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	f513 5f84 	cmn.w	r3, #4224	; 0x1080
 8010758:	d001      	beq.n	801075e <mbedtls_pk_parse_key+0xc6>
        return( ret );
 801075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075c:	e068      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' ){
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	3b01      	subs	r3, #1
 8010762:	68ba      	ldr	r2, [r7, #8]
 8010764:	4413      	add	r3, r2
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d002      	beq.n	8010772 <mbedtls_pk_parse_key+0xda>
    	        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 801076c:	4b33      	ldr	r3, [pc, #204]	; (801083c <mbedtls_pk_parse_key+0x1a4>)
 801076e:	627b      	str	r3, [r7, #36]	; 0x24
 8010770:	e00e      	b.n	8010790 <mbedtls_pk_parse_key+0xf8>
    }
    else{
    	ret = mbedtls_pem_read_buffer( &pem,
 8010772:	f107 0010 	add.w	r0, r7, #16
 8010776:	f107 031c 	add.w	r3, r7, #28
 801077a:	9302      	str	r3, [sp, #8]
 801077c:	2300      	movs	r3, #0
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	2300      	movs	r3, #0
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	4a32      	ldr	r2, [pc, #200]	; (8010850 <mbedtls_pk_parse_key+0x1b8>)
 8010788:	4932      	ldr	r1, [pc, #200]	; (8010854 <mbedtls_pk_parse_key+0x1bc>)
 801078a:	f7ff f985 	bl	800fa98 <mbedtls_pem_read_buffer>
 801078e:	6278      	str	r0, [r7, #36]	; 0x24
    	                               "-----END PRIVATE KEY-----",
    	                               key, NULL, 0, &len );

    }

    if( ret == 0 )
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	2b00      	cmp	r3, #0
 8010794:	d113      	bne.n	80107be <mbedtls_pk_parse_key+0x126>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
                                                pem.buf, pem.buflen ) ) != 0 )
 8010796:	693b      	ldr	r3, [r7, #16]
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8010798:	697a      	ldr	r2, [r7, #20]
 801079a:	4619      	mov	r1, r3
 801079c:	68f8      	ldr	r0, [r7, #12]
 801079e:	f7ff fed1 	bl	8010544 <pk_parse_key_pkcs8_unencrypted_der>
 80107a2:	6278      	str	r0, [r7, #36]	; 0x24
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d002      	beq.n	80107b0 <mbedtls_pk_parse_key+0x118>
        {
            mbedtls_pk_free( pk );
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	f7ff fa84 	bl	800fcb8 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 80107b0:	f107 0310 	add.w	r3, r7, #16
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff fa4d 	bl	800fc54 <mbedtls_pem_free>
        return( ret );
 80107ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107bc:	e038      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80107be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c0:	f513 5f84 	cmn.w	r3, #4224	; 0x1080
 80107c4:	d001      	beq.n	80107ca <mbedtls_pk_parse_key+0x132>
        return( ret );
 80107c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c8:	e032      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	68b9      	ldr	r1, [r7, #8]
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f7ff feb8 	bl	8010544 <pk_parse_key_pkcs8_unencrypted_der>
 80107d4:	6278      	str	r0, [r7, #36]	; 0x24
 80107d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d101      	bne.n	80107e0 <mbedtls_pk_parse_key+0x148>
        return( 0 );
 80107dc:	2300      	movs	r3, #0
 80107de:	e027      	b.n	8010830 <mbedtls_pk_parse_key+0x198>

    mbedtls_pk_free( pk );
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f7ff fa69 	bl	800fcb8 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f7ff fa56 	bl	800fc98 <mbedtls_pk_init>
    mbedtls_pk_free( pk );
    mbedtls_pk_init( pk );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 80107ec:	2002      	movs	r0, #2
 80107ee:	f7ff fa7f 	bl	800fcf0 <mbedtls_pk_info_from_type>
 80107f2:	6238      	str	r0, [r7, #32]
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 80107f4:	6a39      	ldr	r1, [r7, #32]
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f7ff fa9a 	bl	800fd30 <mbedtls_pk_setup>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d10f      	bne.n	8010822 <mbedtls_pk_parse_key+0x18a>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010808:	f7ff fc8b 	bl	8010122 <mbedtls_pk_ec>
 801080c:	4603      	mov	r3, r0
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	68b9      	ldr	r1, [r7, #8]
 8010812:	4618      	mov	r0, r3
 8010814:	f7ff fd7a 	bl	801030c <pk_parse_key_sec1_der>
 8010818:	4603      	mov	r3, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 801081a:	2b00      	cmp	r3, #0
 801081c:	d101      	bne.n	8010822 <mbedtls_pk_parse_key+0x18a>
                               key, keylen ) == 0 )
    {
        return( 0 );
 801081e:	2300      	movs	r3, #0
 8010820:	e006      	b.n	8010830 <mbedtls_pk_parse_key+0x198>
    }
    mbedtls_pk_free( pk );
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff fa48 	bl	800fcb8 <mbedtls_pk_free>
     * when it fails. If MBEDTLS_ECP_C is defined but MBEDTLS_RSA_C
     * isn't, this leads to mbedtls_pk_free() being called
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */
    UART_DEBUG_Transmit("Final\r\n");
 8010828:	480b      	ldr	r0, [pc, #44]	; (8010858 <mbedtls_pk_parse_key+0x1c0>)
 801082a:	f7f0 fb7b 	bl	8000f24 <UART_DEBUG_Transmit>
    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801082e:	4b02      	ldr	r3, [pc, #8]	; (8010838 <mbedtls_pk_parse_key+0x1a0>)
}
 8010830:	4618      	mov	r0, r3
 8010832:	3728      	adds	r7, #40	; 0x28
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	ffffc300 	.word	0xffffc300
 801083c:	ffffef80 	.word	0xffffef80
 8010840:	0801746c 	.word	0x0801746c
 8010844:	0801748c 	.word	0x0801748c
 8010848:	ffffc480 	.word	0xffffc480
 801084c:	ffffc400 	.word	0xffffc400
 8010850:	080174ac 	.word	0x080174ac
 8010854:	080174c8 	.word	0x080174c8
 8010858:	080174e4 	.word	0x080174e4

0801085c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8010866:	4b05      	ldr	r3, [pc, #20]	; (801087c <mbedtls_platform_zeroize+0x20>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	683a      	ldr	r2, [r7, #0]
 801086c:	2100      	movs	r1, #0
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	4798      	blx	r3
}
 8010872:	bf00      	nop
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	20000628 	.word	0x20000628

08010880 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8010888:	226c      	movs	r2, #108	; 0x6c
 801088a:	2100      	movs	r1, #0
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f003 feac 	bl	80145ea <memset>
}
 8010892:	bf00      	nop
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d004      	beq.n	80108b2 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 80108a8:	216c      	movs	r1, #108	; 0x6c
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7ff ffd6 	bl	801085c <mbedtls_platform_zeroize>
 80108b0:	e000      	b.n	80108b4 <mbedtls_sha256_free+0x1a>
        return;
 80108b2:	bf00      	nop
}
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b082      	sub	sp, #8
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	4610      	mov	r0, r2
 80108ca:	4619      	mov	r1, r3
 80108cc:	236c      	movs	r3, #108	; 0x6c
 80108ce:	461a      	mov	r2, r3
 80108d0:	f003 fe67 	bl	80145a2 <memcpy>
}
 80108d4:	bf00      	nop
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d118      	bne.n	801092a <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	4a1d      	ldr	r2, [pc, #116]	; (8010970 <mbedtls_sha256_starts_ret+0x94>)
 80108fc:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4a1c      	ldr	r2, [pc, #112]	; (8010974 <mbedtls_sha256_starts_ret+0x98>)
 8010902:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4a1c      	ldr	r2, [pc, #112]	; (8010978 <mbedtls_sha256_starts_ret+0x9c>)
 8010908:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4a1b      	ldr	r2, [pc, #108]	; (801097c <mbedtls_sha256_starts_ret+0xa0>)
 801090e:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4a1b      	ldr	r2, [pc, #108]	; (8010980 <mbedtls_sha256_starts_ret+0xa4>)
 8010914:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4a1a      	ldr	r2, [pc, #104]	; (8010984 <mbedtls_sha256_starts_ret+0xa8>)
 801091a:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	4a1a      	ldr	r2, [pc, #104]	; (8010988 <mbedtls_sha256_starts_ret+0xac>)
 8010920:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4a19      	ldr	r2, [pc, #100]	; (801098c <mbedtls_sha256_starts_ret+0xb0>)
 8010926:	625a      	str	r2, [r3, #36]	; 0x24
 8010928:	e017      	b.n	801095a <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4a18      	ldr	r2, [pc, #96]	; (8010990 <mbedtls_sha256_starts_ret+0xb4>)
 801092e:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	4a18      	ldr	r2, [pc, #96]	; (8010994 <mbedtls_sha256_starts_ret+0xb8>)
 8010934:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4a17      	ldr	r2, [pc, #92]	; (8010998 <mbedtls_sha256_starts_ret+0xbc>)
 801093a:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	4a17      	ldr	r2, [pc, #92]	; (801099c <mbedtls_sha256_starts_ret+0xc0>)
 8010940:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a16      	ldr	r2, [pc, #88]	; (80109a0 <mbedtls_sha256_starts_ret+0xc4>)
 8010946:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	4a16      	ldr	r2, [pc, #88]	; (80109a4 <mbedtls_sha256_starts_ret+0xc8>)
 801094c:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	4a15      	ldr	r2, [pc, #84]	; (80109a8 <mbedtls_sha256_starts_ret+0xcc>)
 8010952:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4a15      	ldr	r2, [pc, #84]	; (80109ac <mbedtls_sha256_starts_ret+0xd0>)
 8010958:	625a      	str	r2, [r3, #36]	; 0x24
    }

    ctx->is224 = is224;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	669a      	str	r2, [r3, #104]	; 0x68

    return( 0 );
 8010960:	2300      	movs	r3, #0
}
 8010962:	4618      	mov	r0, r3
 8010964:	370c      	adds	r7, #12
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	6a09e667 	.word	0x6a09e667
 8010974:	bb67ae85 	.word	0xbb67ae85
 8010978:	3c6ef372 	.word	0x3c6ef372
 801097c:	a54ff53a 	.word	0xa54ff53a
 8010980:	510e527f 	.word	0x510e527f
 8010984:	9b05688c 	.word	0x9b05688c
 8010988:	1f83d9ab 	.word	0x1f83d9ab
 801098c:	5be0cd19 	.word	0x5be0cd19
 8010990:	c1059ed8 	.word	0xc1059ed8
 8010994:	367cd507 	.word	0x367cd507
 8010998:	3070dd17 	.word	0x3070dd17
 801099c:	f70e5939 	.word	0xf70e5939
 80109a0:	ffc00b31 	.word	0xffc00b31
 80109a4:	68581511 	.word	0x68581511
 80109a8:	64f98fa7 	.word	0x64f98fa7
 80109ac:	befa4fa4 	.word	0xbefa4fa4

080109b0 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80109b0:	b490      	push	{r4, r7}
 80109b2:	b0ce      	sub	sp, #312	; 0x138
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	1d3b      	adds	r3, r7, #4
 80109b8:	6018      	str	r0, [r3, #0]
 80109ba:	463b      	mov	r3, r7
 80109bc:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80109be:	2300      	movs	r3, #0
 80109c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80109c4:	e011      	b.n	80109ea <mbedtls_internal_sha256_process+0x3a>
        A[i] = ctx->state[i];
 80109c6:	1d3b      	adds	r3, r7, #4
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80109ce:	3202      	adds	r2, #2
 80109d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109d4:	f107 030c 	add.w	r3, r7, #12
 80109d8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80109dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80109e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80109e4:	3301      	adds	r3, #1
 80109e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80109ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80109ee:	2b07      	cmp	r3, #7
 80109f0:	d9e9      	bls.n	80109c6 <mbedtls_internal_sha256_process+0x16>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80109f2:	2300      	movs	r3, #0
 80109f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80109f8:	e030      	b.n	8010a5c <mbedtls_internal_sha256_process+0xac>
        GET_UINT32_BE( W[i], data, 4 * i );
 80109fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	463a      	mov	r2, r7
 8010a02:	6812      	ldr	r2, [r2, #0]
 8010a04:	4413      	add	r3, r2
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	061a      	lsls	r2, r3, #24
 8010a0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	3301      	adds	r3, #1
 8010a12:	4639      	mov	r1, r7
 8010a14:	6809      	ldr	r1, [r1, #0]
 8010a16:	440b      	add	r3, r1
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	041b      	lsls	r3, r3, #16
 8010a1c:	431a      	orrs	r2, r3
 8010a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	3302      	adds	r3, #2
 8010a26:	4639      	mov	r1, r7
 8010a28:	6809      	ldr	r1, [r1, #0]
 8010a2a:	440b      	add	r3, r1
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	021b      	lsls	r3, r3, #8
 8010a30:	4313      	orrs	r3, r2
 8010a32:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8010a36:	0092      	lsls	r2, r2, #2
 8010a38:	3203      	adds	r2, #3
 8010a3a:	4639      	mov	r1, r7
 8010a3c:	6809      	ldr	r1, [r1, #0]
 8010a3e:	440a      	add	r2, r1
 8010a40:	7812      	ldrb	r2, [r2, #0]
 8010a42:	ea43 0102 	orr.w	r1, r3, r2
 8010a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010a4a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8010a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8010a52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010a56:	3301      	adds	r3, #1
 8010a58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8010a5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010a60:	2b0f      	cmp	r3, #15
 8010a62:	d9ca      	bls.n	80109fa <mbedtls_internal_sha256_process+0x4a>

    for( i = 0; i < 16; i += 8 )
 8010a64:	2300      	movs	r3, #0
 8010a66:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8010a6a:	e375      	b.n	8011158 <mbedtls_internal_sha256_process+0x7a8>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8010a6c:	f107 030c 	add.w	r3, r7, #12
 8010a70:	69da      	ldr	r2, [r3, #28]
 8010a72:	f107 030c 	add.w	r3, r7, #12
 8010a76:	691b      	ldr	r3, [r3, #16]
 8010a78:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010a7c:	f107 030c 	add.w	r3, r7, #12
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010a86:	4059      	eors	r1, r3
 8010a88:	f107 030c 	add.w	r3, r7, #12
 8010a8c:	691b      	ldr	r3, [r3, #16]
 8010a8e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010a92:	404b      	eors	r3, r1
 8010a94:	441a      	add	r2, r3
 8010a96:	f107 030c 	add.w	r3, r7, #12
 8010a9a:	6999      	ldr	r1, [r3, #24]
 8010a9c:	f107 030c 	add.w	r3, r7, #12
 8010aa0:	6918      	ldr	r0, [r3, #16]
 8010aa2:	f107 030c 	add.w	r3, r7, #12
 8010aa6:	695c      	ldr	r4, [r3, #20]
 8010aa8:	f107 030c 	add.w	r3, r7, #12
 8010aac:	699b      	ldr	r3, [r3, #24]
 8010aae:	4063      	eors	r3, r4
 8010ab0:	4003      	ands	r3, r0
 8010ab2:	404b      	eors	r3, r1
 8010ab4:	441a      	add	r2, r3
 8010ab6:	49d7      	ldr	r1, [pc, #860]	; (8010e14 <mbedtls_internal_sha256_process+0x464>)
 8010ab8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010abc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010ac0:	441a      	add	r2, r3
 8010ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ac6:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8010aca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ace:	4413      	add	r3, r2
 8010ad0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010ad4:	f107 030c 	add.w	r3, r7, #12
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010ade:	f107 030c 	add.w	r3, r7, #12
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010ae8:	405a      	eors	r2, r3
 8010aea:	f107 030c 	add.w	r3, r7, #12
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010af4:	405a      	eors	r2, r3
 8010af6:	f107 030c 	add.w	r3, r7, #12
 8010afa:	6819      	ldr	r1, [r3, #0]
 8010afc:	f107 030c 	add.w	r3, r7, #12
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	4019      	ands	r1, r3
 8010b04:	f107 030c 	add.w	r3, r7, #12
 8010b08:	6898      	ldr	r0, [r3, #8]
 8010b0a:	f107 030c 	add.w	r3, r7, #12
 8010b0e:	681c      	ldr	r4, [r3, #0]
 8010b10:	f107 030c 	add.w	r3, r7, #12
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	4323      	orrs	r3, r4
 8010b18:	4003      	ands	r3, r0
 8010b1a:	430b      	orrs	r3, r1
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010b22:	f107 030c 	add.w	r3, r7, #12
 8010b26:	68da      	ldr	r2, [r3, #12]
 8010b28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b2c:	441a      	add	r2, r3
 8010b2e:	f107 030c 	add.w	r3, r7, #12
 8010b32:	60da      	str	r2, [r3, #12]
 8010b34:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010b3c:	441a      	add	r2, r3
 8010b3e:	f107 030c 	add.w	r3, r7, #12
 8010b42:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8010b44:	f107 030c 	add.w	r3, r7, #12
 8010b48:	699a      	ldr	r2, [r3, #24]
 8010b4a:	f107 030c 	add.w	r3, r7, #12
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010b54:	f107 030c 	add.w	r3, r7, #12
 8010b58:	68db      	ldr	r3, [r3, #12]
 8010b5a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010b5e:	4059      	eors	r1, r3
 8010b60:	f107 030c 	add.w	r3, r7, #12
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010b6a:	404b      	eors	r3, r1
 8010b6c:	441a      	add	r2, r3
 8010b6e:	f107 030c 	add.w	r3, r7, #12
 8010b72:	6959      	ldr	r1, [r3, #20]
 8010b74:	f107 030c 	add.w	r3, r7, #12
 8010b78:	68d8      	ldr	r0, [r3, #12]
 8010b7a:	f107 030c 	add.w	r3, r7, #12
 8010b7e:	691c      	ldr	r4, [r3, #16]
 8010b80:	f107 030c 	add.w	r3, r7, #12
 8010b84:	695b      	ldr	r3, [r3, #20]
 8010b86:	4063      	eors	r3, r4
 8010b88:	4003      	ands	r3, r0
 8010b8a:	404b      	eors	r3, r1
 8010b8c:	441a      	add	r2, r3
 8010b8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010b92:	3301      	adds	r3, #1
 8010b94:	499f      	ldr	r1, [pc, #636]	; (8010e14 <mbedtls_internal_sha256_process+0x464>)
 8010b96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010b9a:	441a      	add	r2, r3
 8010b9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010ba0:	1c59      	adds	r1, r3, #1
 8010ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010baa:	4413      	add	r3, r2
 8010bac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010bb0:	f107 030c 	add.w	r3, r7, #12
 8010bb4:	69db      	ldr	r3, [r3, #28]
 8010bb6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010bba:	f107 030c 	add.w	r3, r7, #12
 8010bbe:	69db      	ldr	r3, [r3, #28]
 8010bc0:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010bc4:	405a      	eors	r2, r3
 8010bc6:	f107 030c 	add.w	r3, r7, #12
 8010bca:	69db      	ldr	r3, [r3, #28]
 8010bcc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010bd0:	405a      	eors	r2, r3
 8010bd2:	f107 030c 	add.w	r3, r7, #12
 8010bd6:	69d9      	ldr	r1, [r3, #28]
 8010bd8:	f107 030c 	add.w	r3, r7, #12
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	4019      	ands	r1, r3
 8010be0:	f107 030c 	add.w	r3, r7, #12
 8010be4:	6858      	ldr	r0, [r3, #4]
 8010be6:	f107 030c 	add.w	r3, r7, #12
 8010bea:	69dc      	ldr	r4, [r3, #28]
 8010bec:	f107 030c 	add.w	r3, r7, #12
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4323      	orrs	r3, r4
 8010bf4:	4003      	ands	r3, r0
 8010bf6:	430b      	orrs	r3, r1
 8010bf8:	4413      	add	r3, r2
 8010bfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010bfe:	f107 030c 	add.w	r3, r7, #12
 8010c02:	689a      	ldr	r2, [r3, #8]
 8010c04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c08:	441a      	add	r2, r3
 8010c0a:	f107 030c 	add.w	r3, r7, #12
 8010c0e:	609a      	str	r2, [r3, #8]
 8010c10:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010c18:	441a      	add	r2, r3
 8010c1a:	f107 030c 	add.w	r3, r7, #12
 8010c1e:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8010c20:	f107 030c 	add.w	r3, r7, #12
 8010c24:	695a      	ldr	r2, [r3, #20]
 8010c26:	f107 030c 	add.w	r3, r7, #12
 8010c2a:	689b      	ldr	r3, [r3, #8]
 8010c2c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010c30:	f107 030c 	add.w	r3, r7, #12
 8010c34:	689b      	ldr	r3, [r3, #8]
 8010c36:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010c3a:	4059      	eors	r1, r3
 8010c3c:	f107 030c 	add.w	r3, r7, #12
 8010c40:	689b      	ldr	r3, [r3, #8]
 8010c42:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010c46:	404b      	eors	r3, r1
 8010c48:	441a      	add	r2, r3
 8010c4a:	f107 030c 	add.w	r3, r7, #12
 8010c4e:	6919      	ldr	r1, [r3, #16]
 8010c50:	f107 030c 	add.w	r3, r7, #12
 8010c54:	6898      	ldr	r0, [r3, #8]
 8010c56:	f107 030c 	add.w	r3, r7, #12
 8010c5a:	68dc      	ldr	r4, [r3, #12]
 8010c5c:	f107 030c 	add.w	r3, r7, #12
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	4063      	eors	r3, r4
 8010c64:	4003      	ands	r3, r0
 8010c66:	404b      	eors	r3, r1
 8010c68:	441a      	add	r2, r3
 8010c6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010c6e:	3302      	adds	r3, #2
 8010c70:	4968      	ldr	r1, [pc, #416]	; (8010e14 <mbedtls_internal_sha256_process+0x464>)
 8010c72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010c76:	441a      	add	r2, r3
 8010c78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010c7c:	1c99      	adds	r1, r3, #2
 8010c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c86:	4413      	add	r3, r2
 8010c88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010c8c:	f107 030c 	add.w	r3, r7, #12
 8010c90:	699b      	ldr	r3, [r3, #24]
 8010c92:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010c96:	f107 030c 	add.w	r3, r7, #12
 8010c9a:	699b      	ldr	r3, [r3, #24]
 8010c9c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010ca0:	405a      	eors	r2, r3
 8010ca2:	f107 030c 	add.w	r3, r7, #12
 8010ca6:	699b      	ldr	r3, [r3, #24]
 8010ca8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010cac:	405a      	eors	r2, r3
 8010cae:	f107 030c 	add.w	r3, r7, #12
 8010cb2:	6999      	ldr	r1, [r3, #24]
 8010cb4:	f107 030c 	add.w	r3, r7, #12
 8010cb8:	69db      	ldr	r3, [r3, #28]
 8010cba:	4019      	ands	r1, r3
 8010cbc:	f107 030c 	add.w	r3, r7, #12
 8010cc0:	6818      	ldr	r0, [r3, #0]
 8010cc2:	f107 030c 	add.w	r3, r7, #12
 8010cc6:	699c      	ldr	r4, [r3, #24]
 8010cc8:	f107 030c 	add.w	r3, r7, #12
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	4323      	orrs	r3, r4
 8010cd0:	4003      	ands	r3, r0
 8010cd2:	430b      	orrs	r3, r1
 8010cd4:	4413      	add	r3, r2
 8010cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010cda:	f107 030c 	add.w	r3, r7, #12
 8010cde:	685a      	ldr	r2, [r3, #4]
 8010ce0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010ce4:	441a      	add	r2, r3
 8010ce6:	f107 030c 	add.w	r3, r7, #12
 8010cea:	605a      	str	r2, [r3, #4]
 8010cec:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010cf4:	441a      	add	r2, r3
 8010cf6:	f107 030c 	add.w	r3, r7, #12
 8010cfa:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8010cfc:	f107 030c 	add.w	r3, r7, #12
 8010d00:	691a      	ldr	r2, [r3, #16]
 8010d02:	f107 030c 	add.w	r3, r7, #12
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010d0c:	f107 030c 	add.w	r3, r7, #12
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010d16:	4059      	eors	r1, r3
 8010d18:	f107 030c 	add.w	r3, r7, #12
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010d22:	404b      	eors	r3, r1
 8010d24:	441a      	add	r2, r3
 8010d26:	f107 030c 	add.w	r3, r7, #12
 8010d2a:	68d9      	ldr	r1, [r3, #12]
 8010d2c:	f107 030c 	add.w	r3, r7, #12
 8010d30:	6858      	ldr	r0, [r3, #4]
 8010d32:	f107 030c 	add.w	r3, r7, #12
 8010d36:	689c      	ldr	r4, [r3, #8]
 8010d38:	f107 030c 	add.w	r3, r7, #12
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	4063      	eors	r3, r4
 8010d40:	4003      	ands	r3, r0
 8010d42:	404b      	eors	r3, r1
 8010d44:	441a      	add	r2, r3
 8010d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010d4a:	3303      	adds	r3, #3
 8010d4c:	4931      	ldr	r1, [pc, #196]	; (8010e14 <mbedtls_internal_sha256_process+0x464>)
 8010d4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010d52:	441a      	add	r2, r3
 8010d54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010d58:	1cd9      	adds	r1, r3, #3
 8010d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d62:	4413      	add	r3, r2
 8010d64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010d68:	f107 030c 	add.w	r3, r7, #12
 8010d6c:	695b      	ldr	r3, [r3, #20]
 8010d6e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010d72:	f107 030c 	add.w	r3, r7, #12
 8010d76:	695b      	ldr	r3, [r3, #20]
 8010d78:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010d7c:	405a      	eors	r2, r3
 8010d7e:	f107 030c 	add.w	r3, r7, #12
 8010d82:	695b      	ldr	r3, [r3, #20]
 8010d84:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010d88:	405a      	eors	r2, r3
 8010d8a:	f107 030c 	add.w	r3, r7, #12
 8010d8e:	6959      	ldr	r1, [r3, #20]
 8010d90:	f107 030c 	add.w	r3, r7, #12
 8010d94:	699b      	ldr	r3, [r3, #24]
 8010d96:	4019      	ands	r1, r3
 8010d98:	f107 030c 	add.w	r3, r7, #12
 8010d9c:	69d8      	ldr	r0, [r3, #28]
 8010d9e:	f107 030c 	add.w	r3, r7, #12
 8010da2:	695c      	ldr	r4, [r3, #20]
 8010da4:	f107 030c 	add.w	r3, r7, #12
 8010da8:	699b      	ldr	r3, [r3, #24]
 8010daa:	4323      	orrs	r3, r4
 8010dac:	4003      	ands	r3, r0
 8010dae:	430b      	orrs	r3, r1
 8010db0:	4413      	add	r3, r2
 8010db2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010db6:	f107 030c 	add.w	r3, r7, #12
 8010dba:	681a      	ldr	r2, [r3, #0]
 8010dbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010dc0:	441a      	add	r2, r3
 8010dc2:	f107 030c 	add.w	r3, r7, #12
 8010dc6:	601a      	str	r2, [r3, #0]
 8010dc8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010dd0:	441a      	add	r2, r3
 8010dd2:	f107 030c 	add.w	r3, r7, #12
 8010dd6:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8010dd8:	f107 030c 	add.w	r3, r7, #12
 8010ddc:	68da      	ldr	r2, [r3, #12]
 8010dde:	f107 030c 	add.w	r3, r7, #12
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010de8:	f107 030c 	add.w	r3, r7, #12
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010df2:	4059      	eors	r1, r3
 8010df4:	f107 030c 	add.w	r3, r7, #12
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010dfe:	404b      	eors	r3, r1
 8010e00:	441a      	add	r2, r3
 8010e02:	f107 030c 	add.w	r3, r7, #12
 8010e06:	6899      	ldr	r1, [r3, #8]
 8010e08:	f107 030c 	add.w	r3, r7, #12
 8010e0c:	6818      	ldr	r0, [r3, #0]
 8010e0e:	f107 030c 	add.w	r3, r7, #12
 8010e12:	e001      	b.n	8010e18 <mbedtls_internal_sha256_process+0x468>
 8010e14:	08019b90 	.word	0x08019b90
 8010e18:	685c      	ldr	r4, [r3, #4]
 8010e1a:	f107 030c 	add.w	r3, r7, #12
 8010e1e:	689b      	ldr	r3, [r3, #8]
 8010e20:	4063      	eors	r3, r4
 8010e22:	4003      	ands	r3, r0
 8010e24:	404b      	eors	r3, r1
 8010e26:	441a      	add	r2, r3
 8010e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010e2c:	3304      	adds	r3, #4
 8010e2e:	49cf      	ldr	r1, [pc, #828]	; (801116c <mbedtls_internal_sha256_process+0x7bc>)
 8010e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010e34:	441a      	add	r2, r3
 8010e36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010e3a:	1d19      	adds	r1, r3, #4
 8010e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e44:	4413      	add	r3, r2
 8010e46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010e4a:	f107 030c 	add.w	r3, r7, #12
 8010e4e:	691b      	ldr	r3, [r3, #16]
 8010e50:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010e54:	f107 030c 	add.w	r3, r7, #12
 8010e58:	691b      	ldr	r3, [r3, #16]
 8010e5a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010e5e:	405a      	eors	r2, r3
 8010e60:	f107 030c 	add.w	r3, r7, #12
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010e6a:	405a      	eors	r2, r3
 8010e6c:	f107 030c 	add.w	r3, r7, #12
 8010e70:	6919      	ldr	r1, [r3, #16]
 8010e72:	f107 030c 	add.w	r3, r7, #12
 8010e76:	695b      	ldr	r3, [r3, #20]
 8010e78:	4019      	ands	r1, r3
 8010e7a:	f107 030c 	add.w	r3, r7, #12
 8010e7e:	6998      	ldr	r0, [r3, #24]
 8010e80:	f107 030c 	add.w	r3, r7, #12
 8010e84:	691c      	ldr	r4, [r3, #16]
 8010e86:	f107 030c 	add.w	r3, r7, #12
 8010e8a:	695b      	ldr	r3, [r3, #20]
 8010e8c:	4323      	orrs	r3, r4
 8010e8e:	4003      	ands	r3, r0
 8010e90:	430b      	orrs	r3, r1
 8010e92:	4413      	add	r3, r2
 8010e94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010e98:	f107 030c 	add.w	r3, r7, #12
 8010e9c:	69da      	ldr	r2, [r3, #28]
 8010e9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010ea2:	441a      	add	r2, r3
 8010ea4:	f107 030c 	add.w	r3, r7, #12
 8010ea8:	61da      	str	r2, [r3, #28]
 8010eaa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010eb2:	441a      	add	r2, r3
 8010eb4:	f107 030c 	add.w	r3, r7, #12
 8010eb8:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8010eba:	f107 030c 	add.w	r3, r7, #12
 8010ebe:	689a      	ldr	r2, [r3, #8]
 8010ec0:	f107 030c 	add.w	r3, r7, #12
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010eca:	f107 030c 	add.w	r3, r7, #12
 8010ece:	69db      	ldr	r3, [r3, #28]
 8010ed0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010ed4:	4059      	eors	r1, r3
 8010ed6:	f107 030c 	add.w	r3, r7, #12
 8010eda:	69db      	ldr	r3, [r3, #28]
 8010edc:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010ee0:	404b      	eors	r3, r1
 8010ee2:	441a      	add	r2, r3
 8010ee4:	f107 030c 	add.w	r3, r7, #12
 8010ee8:	6859      	ldr	r1, [r3, #4]
 8010eea:	f107 030c 	add.w	r3, r7, #12
 8010eee:	69d8      	ldr	r0, [r3, #28]
 8010ef0:	f107 030c 	add.w	r3, r7, #12
 8010ef4:	681c      	ldr	r4, [r3, #0]
 8010ef6:	f107 030c 	add.w	r3, r7, #12
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	4063      	eors	r3, r4
 8010efe:	4003      	ands	r3, r0
 8010f00:	404b      	eors	r3, r1
 8010f02:	441a      	add	r2, r3
 8010f04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010f08:	3305      	adds	r3, #5
 8010f0a:	4998      	ldr	r1, [pc, #608]	; (801116c <mbedtls_internal_sha256_process+0x7bc>)
 8010f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010f10:	441a      	add	r2, r3
 8010f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010f16:	1d59      	adds	r1, r3, #5
 8010f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f20:	4413      	add	r3, r2
 8010f22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010f26:	f107 030c 	add.w	r3, r7, #12
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010f30:	f107 030c 	add.w	r3, r7, #12
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010f3a:	405a      	eors	r2, r3
 8010f3c:	f107 030c 	add.w	r3, r7, #12
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010f46:	405a      	eors	r2, r3
 8010f48:	f107 030c 	add.w	r3, r7, #12
 8010f4c:	68d9      	ldr	r1, [r3, #12]
 8010f4e:	f107 030c 	add.w	r3, r7, #12
 8010f52:	691b      	ldr	r3, [r3, #16]
 8010f54:	4019      	ands	r1, r3
 8010f56:	f107 030c 	add.w	r3, r7, #12
 8010f5a:	6958      	ldr	r0, [r3, #20]
 8010f5c:	f107 030c 	add.w	r3, r7, #12
 8010f60:	68dc      	ldr	r4, [r3, #12]
 8010f62:	f107 030c 	add.w	r3, r7, #12
 8010f66:	691b      	ldr	r3, [r3, #16]
 8010f68:	4323      	orrs	r3, r4
 8010f6a:	4003      	ands	r3, r0
 8010f6c:	430b      	orrs	r3, r1
 8010f6e:	4413      	add	r3, r2
 8010f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010f74:	f107 030c 	add.w	r3, r7, #12
 8010f78:	699a      	ldr	r2, [r3, #24]
 8010f7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010f7e:	441a      	add	r2, r3
 8010f80:	f107 030c 	add.w	r3, r7, #12
 8010f84:	619a      	str	r2, [r3, #24]
 8010f86:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010f8e:	441a      	add	r2, r3
 8010f90:	f107 030c 	add.w	r3, r7, #12
 8010f94:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8010f96:	f107 030c 	add.w	r3, r7, #12
 8010f9a:	685a      	ldr	r2, [r3, #4]
 8010f9c:	f107 030c 	add.w	r3, r7, #12
 8010fa0:	699b      	ldr	r3, [r3, #24]
 8010fa2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010fa6:	f107 030c 	add.w	r3, r7, #12
 8010faa:	699b      	ldr	r3, [r3, #24]
 8010fac:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010fb0:	4059      	eors	r1, r3
 8010fb2:	f107 030c 	add.w	r3, r7, #12
 8010fb6:	699b      	ldr	r3, [r3, #24]
 8010fb8:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010fbc:	404b      	eors	r3, r1
 8010fbe:	441a      	add	r2, r3
 8010fc0:	f107 030c 	add.w	r3, r7, #12
 8010fc4:	6819      	ldr	r1, [r3, #0]
 8010fc6:	f107 030c 	add.w	r3, r7, #12
 8010fca:	6998      	ldr	r0, [r3, #24]
 8010fcc:	f107 030c 	add.w	r3, r7, #12
 8010fd0:	69dc      	ldr	r4, [r3, #28]
 8010fd2:	f107 030c 	add.w	r3, r7, #12
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4063      	eors	r3, r4
 8010fda:	4003      	ands	r3, r0
 8010fdc:	404b      	eors	r3, r1
 8010fde:	441a      	add	r2, r3
 8010fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010fe4:	3306      	adds	r3, #6
 8010fe6:	4961      	ldr	r1, [pc, #388]	; (801116c <mbedtls_internal_sha256_process+0x7bc>)
 8010fe8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010fec:	441a      	add	r2, r3
 8010fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010ff2:	1d99      	adds	r1, r3, #6
 8010ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011002:	f107 030c 	add.w	r3, r7, #12
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801100c:	f107 030c 	add.w	r3, r7, #12
 8011010:	689b      	ldr	r3, [r3, #8]
 8011012:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011016:	405a      	eors	r2, r3
 8011018:	f107 030c 	add.w	r3, r7, #12
 801101c:	689b      	ldr	r3, [r3, #8]
 801101e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011022:	405a      	eors	r2, r3
 8011024:	f107 030c 	add.w	r3, r7, #12
 8011028:	6899      	ldr	r1, [r3, #8]
 801102a:	f107 030c 	add.w	r3, r7, #12
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	4019      	ands	r1, r3
 8011032:	f107 030c 	add.w	r3, r7, #12
 8011036:	6918      	ldr	r0, [r3, #16]
 8011038:	f107 030c 	add.w	r3, r7, #12
 801103c:	689c      	ldr	r4, [r3, #8]
 801103e:	f107 030c 	add.w	r3, r7, #12
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	4323      	orrs	r3, r4
 8011046:	4003      	ands	r3, r0
 8011048:	430b      	orrs	r3, r1
 801104a:	4413      	add	r3, r2
 801104c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011050:	f107 030c 	add.w	r3, r7, #12
 8011054:	695a      	ldr	r2, [r3, #20]
 8011056:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801105a:	441a      	add	r2, r3
 801105c:	f107 030c 	add.w	r3, r7, #12
 8011060:	615a      	str	r2, [r3, #20]
 8011062:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801106a:	441a      	add	r2, r3
 801106c:	f107 030c 	add.w	r3, r7, #12
 8011070:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8011072:	f107 030c 	add.w	r3, r7, #12
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	f107 030c 	add.w	r3, r7, #12
 801107c:	695b      	ldr	r3, [r3, #20]
 801107e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011082:	f107 030c 	add.w	r3, r7, #12
 8011086:	695b      	ldr	r3, [r3, #20]
 8011088:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801108c:	4059      	eors	r1, r3
 801108e:	f107 030c 	add.w	r3, r7, #12
 8011092:	695b      	ldr	r3, [r3, #20]
 8011094:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011098:	404b      	eors	r3, r1
 801109a:	441a      	add	r2, r3
 801109c:	f107 030c 	add.w	r3, r7, #12
 80110a0:	69d9      	ldr	r1, [r3, #28]
 80110a2:	f107 030c 	add.w	r3, r7, #12
 80110a6:	6958      	ldr	r0, [r3, #20]
 80110a8:	f107 030c 	add.w	r3, r7, #12
 80110ac:	699c      	ldr	r4, [r3, #24]
 80110ae:	f107 030c 	add.w	r3, r7, #12
 80110b2:	69db      	ldr	r3, [r3, #28]
 80110b4:	4063      	eors	r3, r4
 80110b6:	4003      	ands	r3, r0
 80110b8:	404b      	eors	r3, r1
 80110ba:	441a      	add	r2, r3
 80110bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80110c0:	3307      	adds	r3, #7
 80110c2:	492a      	ldr	r1, [pc, #168]	; (801116c <mbedtls_internal_sha256_process+0x7bc>)
 80110c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80110c8:	441a      	add	r2, r3
 80110ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80110ce:	1dd9      	adds	r1, r3, #7
 80110d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80110d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110d8:	4413      	add	r3, r2
 80110da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80110de:	f107 030c 	add.w	r3, r7, #12
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80110e8:	f107 030c 	add.w	r3, r7, #12
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	ea4f 3373 	mov.w	r3, r3, ror #13
 80110f2:	405a      	eors	r2, r3
 80110f4:	f107 030c 	add.w	r3, r7, #12
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80110fe:	405a      	eors	r2, r3
 8011100:	f107 030c 	add.w	r3, r7, #12
 8011104:	6859      	ldr	r1, [r3, #4]
 8011106:	f107 030c 	add.w	r3, r7, #12
 801110a:	689b      	ldr	r3, [r3, #8]
 801110c:	4019      	ands	r1, r3
 801110e:	f107 030c 	add.w	r3, r7, #12
 8011112:	68d8      	ldr	r0, [r3, #12]
 8011114:	f107 030c 	add.w	r3, r7, #12
 8011118:	685c      	ldr	r4, [r3, #4]
 801111a:	f107 030c 	add.w	r3, r7, #12
 801111e:	689b      	ldr	r3, [r3, #8]
 8011120:	4323      	orrs	r3, r4
 8011122:	4003      	ands	r3, r0
 8011124:	430b      	orrs	r3, r1
 8011126:	4413      	add	r3, r2
 8011128:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801112c:	f107 030c 	add.w	r3, r7, #12
 8011130:	691a      	ldr	r2, [r3, #16]
 8011132:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011136:	441a      	add	r2, r3
 8011138:	f107 030c 	add.w	r3, r7, #12
 801113c:	611a      	str	r2, [r3, #16]
 801113e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011146:	441a      	add	r2, r3
 8011148:	f107 030c 	add.w	r3, r7, #12
 801114c:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 801114e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011152:	3308      	adds	r3, #8
 8011154:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011158:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801115c:	2b0f      	cmp	r3, #15
 801115e:	f67f ac85 	bls.w	8010a6c <mbedtls_internal_sha256_process+0xbc>
    }

    for( i = 16; i < 64; i += 8 )
 8011162:	2310      	movs	r3, #16
 8011164:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011168:	f000 be01 	b.w	8011d6e <mbedtls_internal_sha256_process+0x13be>
 801116c:	08019b90 	.word	0x08019b90
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8011170:	f107 030c 	add.w	r3, r7, #12
 8011174:	69da      	ldr	r2, [r3, #28]
 8011176:	f107 030c 	add.w	r3, r7, #12
 801117a:	691b      	ldr	r3, [r3, #16]
 801117c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011180:	f107 030c 	add.w	r3, r7, #12
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801118a:	4059      	eors	r1, r3
 801118c:	f107 030c 	add.w	r3, r7, #12
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011196:	404b      	eors	r3, r1
 8011198:	441a      	add	r2, r3
 801119a:	f107 030c 	add.w	r3, r7, #12
 801119e:	6999      	ldr	r1, [r3, #24]
 80111a0:	f107 030c 	add.w	r3, r7, #12
 80111a4:	6918      	ldr	r0, [r3, #16]
 80111a6:	f107 030c 	add.w	r3, r7, #12
 80111aa:	695c      	ldr	r4, [r3, #20]
 80111ac:	f107 030c 	add.w	r3, r7, #12
 80111b0:	699b      	ldr	r3, [r3, #24]
 80111b2:	4063      	eors	r3, r4
 80111b4:	4003      	ands	r3, r0
 80111b6:	404b      	eors	r3, r1
 80111b8:	441a      	add	r2, r3
 80111ba:	49e9      	ldr	r1, [pc, #932]	; (8011560 <mbedtls_internal_sha256_process+0xbb0>)
 80111bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80111c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80111c4:	441a      	add	r2, r3
 80111c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80111ca:	1e99      	subs	r1, r3, #2
 80111cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80111d4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80111d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80111dc:	1e98      	subs	r0, r3, #2
 80111de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80111e6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80111ea:	4059      	eors	r1, r3
 80111ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80111f0:	1e98      	subs	r0, r3, #2
 80111f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80111fa:	0a9b      	lsrs	r3, r3, #10
 80111fc:	4059      	eors	r1, r3
 80111fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011202:	1fd8      	subs	r0, r3, #7
 8011204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011208:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801120c:	4419      	add	r1, r3
 801120e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011212:	f1a3 000f 	sub.w	r0, r3, #15
 8011216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801121a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801121e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011226:	f1a3 040f 	sub.w	r4, r3, #15
 801122a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801122e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011232:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8011236:	4058      	eors	r0, r3
 8011238:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801123c:	f1a3 040f 	sub.w	r4, r3, #15
 8011240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011244:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011248:	08db      	lsrs	r3, r3, #3
 801124a:	4043      	eors	r3, r0
 801124c:	4419      	add	r1, r3
 801124e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011252:	f1a3 0010 	sub.w	r0, r3, #16
 8011256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801125a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801125e:	18c8      	adds	r0, r1, r3
 8011260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011264:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8011268:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 801126c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011270:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8011274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011278:	4413      	add	r3, r2
 801127a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801127e:	f107 030c 	add.w	r3, r7, #12
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011288:	f107 030c 	add.w	r3, r7, #12
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011292:	405a      	eors	r2, r3
 8011294:	f107 030c 	add.w	r3, r7, #12
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801129e:	405a      	eors	r2, r3
 80112a0:	f107 030c 	add.w	r3, r7, #12
 80112a4:	6819      	ldr	r1, [r3, #0]
 80112a6:	f107 030c 	add.w	r3, r7, #12
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	4019      	ands	r1, r3
 80112ae:	f107 030c 	add.w	r3, r7, #12
 80112b2:	6898      	ldr	r0, [r3, #8]
 80112b4:	f107 030c 	add.w	r3, r7, #12
 80112b8:	681c      	ldr	r4, [r3, #0]
 80112ba:	f107 030c 	add.w	r3, r7, #12
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	4323      	orrs	r3, r4
 80112c2:	4003      	ands	r3, r0
 80112c4:	430b      	orrs	r3, r1
 80112c6:	4413      	add	r3, r2
 80112c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80112cc:	f107 030c 	add.w	r3, r7, #12
 80112d0:	68da      	ldr	r2, [r3, #12]
 80112d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80112d6:	441a      	add	r2, r3
 80112d8:	f107 030c 	add.w	r3, r7, #12
 80112dc:	60da      	str	r2, [r3, #12]
 80112de:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80112e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80112e6:	441a      	add	r2, r3
 80112e8:	f107 030c 	add.w	r3, r7, #12
 80112ec:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80112ee:	f107 030c 	add.w	r3, r7, #12
 80112f2:	699a      	ldr	r2, [r3, #24]
 80112f4:	f107 030c 	add.w	r3, r7, #12
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80112fe:	f107 030c 	add.w	r3, r7, #12
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011308:	4059      	eors	r1, r3
 801130a:	f107 030c 	add.w	r3, r7, #12
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011314:	404b      	eors	r3, r1
 8011316:	441a      	add	r2, r3
 8011318:	f107 030c 	add.w	r3, r7, #12
 801131c:	6959      	ldr	r1, [r3, #20]
 801131e:	f107 030c 	add.w	r3, r7, #12
 8011322:	68d8      	ldr	r0, [r3, #12]
 8011324:	f107 030c 	add.w	r3, r7, #12
 8011328:	691c      	ldr	r4, [r3, #16]
 801132a:	f107 030c 	add.w	r3, r7, #12
 801132e:	695b      	ldr	r3, [r3, #20]
 8011330:	4063      	eors	r3, r4
 8011332:	4003      	ands	r3, r0
 8011334:	404b      	eors	r3, r1
 8011336:	441a      	add	r2, r3
 8011338:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801133c:	3301      	adds	r3, #1
 801133e:	4988      	ldr	r1, [pc, #544]	; (8011560 <mbedtls_internal_sha256_process+0xbb0>)
 8011340:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011344:	441a      	add	r2, r3
 8011346:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801134a:	1e59      	subs	r1, r3, #1
 801134c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011350:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011354:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011358:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801135c:	1e58      	subs	r0, r3, #1
 801135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011362:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011366:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801136a:	4059      	eors	r1, r3
 801136c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011370:	1e58      	subs	r0, r3, #1
 8011372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011376:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801137a:	0a9b      	lsrs	r3, r3, #10
 801137c:	4059      	eors	r1, r3
 801137e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011382:	1f98      	subs	r0, r3, #6
 8011384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011388:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801138c:	4419      	add	r1, r3
 801138e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011392:	f1a3 000e 	sub.w	r0, r3, #14
 8011396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801139a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801139e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80113a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80113a6:	f1a3 040e 	sub.w	r4, r3, #14
 80113aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80113b2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80113b6:	4058      	eors	r0, r3
 80113b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80113bc:	f1a3 040e 	sub.w	r4, r3, #14
 80113c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80113c8:	08db      	lsrs	r3, r3, #3
 80113ca:	4043      	eors	r3, r0
 80113cc:	18c8      	adds	r0, r1, r3
 80113ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80113d2:	f1a3 010f 	sub.w	r1, r3, #15
 80113d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113da:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80113de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80113e2:	3301      	adds	r3, #1
 80113e4:	4408      	add	r0, r1
 80113e6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80113ea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80113ee:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80113f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80113f6:	4413      	add	r3, r2
 80113f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80113fc:	f107 030c 	add.w	r3, r7, #12
 8011400:	69db      	ldr	r3, [r3, #28]
 8011402:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011406:	f107 030c 	add.w	r3, r7, #12
 801140a:	69db      	ldr	r3, [r3, #28]
 801140c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011410:	405a      	eors	r2, r3
 8011412:	f107 030c 	add.w	r3, r7, #12
 8011416:	69db      	ldr	r3, [r3, #28]
 8011418:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801141c:	405a      	eors	r2, r3
 801141e:	f107 030c 	add.w	r3, r7, #12
 8011422:	69d9      	ldr	r1, [r3, #28]
 8011424:	f107 030c 	add.w	r3, r7, #12
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4019      	ands	r1, r3
 801142c:	f107 030c 	add.w	r3, r7, #12
 8011430:	6858      	ldr	r0, [r3, #4]
 8011432:	f107 030c 	add.w	r3, r7, #12
 8011436:	69dc      	ldr	r4, [r3, #28]
 8011438:	f107 030c 	add.w	r3, r7, #12
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4323      	orrs	r3, r4
 8011440:	4003      	ands	r3, r0
 8011442:	430b      	orrs	r3, r1
 8011444:	4413      	add	r3, r2
 8011446:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801144a:	f107 030c 	add.w	r3, r7, #12
 801144e:	689a      	ldr	r2, [r3, #8]
 8011450:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011454:	441a      	add	r2, r3
 8011456:	f107 030c 	add.w	r3, r7, #12
 801145a:	609a      	str	r2, [r3, #8]
 801145c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011464:	441a      	add	r2, r3
 8011466:	f107 030c 	add.w	r3, r7, #12
 801146a:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 801146c:	f107 030c 	add.w	r3, r7, #12
 8011470:	695a      	ldr	r2, [r3, #20]
 8011472:	f107 030c 	add.w	r3, r7, #12
 8011476:	689b      	ldr	r3, [r3, #8]
 8011478:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801147c:	f107 030c 	add.w	r3, r7, #12
 8011480:	689b      	ldr	r3, [r3, #8]
 8011482:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011486:	4059      	eors	r1, r3
 8011488:	f107 030c 	add.w	r3, r7, #12
 801148c:	689b      	ldr	r3, [r3, #8]
 801148e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011492:	404b      	eors	r3, r1
 8011494:	441a      	add	r2, r3
 8011496:	f107 030c 	add.w	r3, r7, #12
 801149a:	6919      	ldr	r1, [r3, #16]
 801149c:	f107 030c 	add.w	r3, r7, #12
 80114a0:	6898      	ldr	r0, [r3, #8]
 80114a2:	f107 030c 	add.w	r3, r7, #12
 80114a6:	68dc      	ldr	r4, [r3, #12]
 80114a8:	f107 030c 	add.w	r3, r7, #12
 80114ac:	691b      	ldr	r3, [r3, #16]
 80114ae:	4063      	eors	r3, r4
 80114b0:	4003      	ands	r3, r0
 80114b2:	404b      	eors	r3, r1
 80114b4:	441a      	add	r2, r3
 80114b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80114ba:	3302      	adds	r3, #2
 80114bc:	4928      	ldr	r1, [pc, #160]	; (8011560 <mbedtls_internal_sha256_process+0xbb0>)
 80114be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80114c2:	441a      	add	r2, r3
 80114c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114c8:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80114cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80114d0:	ea4f 4173 	mov.w	r1, r3, ror #17
 80114d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114d8:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80114dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80114e0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80114e4:	4059      	eors	r1, r3
 80114e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114ea:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80114ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80114f2:	0a9b      	lsrs	r3, r3, #10
 80114f4:	4059      	eors	r1, r3
 80114f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80114fa:	1f58      	subs	r0, r3, #5
 80114fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011500:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011504:	4419      	add	r1, r3
 8011506:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801150a:	f1a3 000d 	sub.w	r0, r3, #13
 801150e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011512:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011516:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801151a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801151e:	f1a3 040d 	sub.w	r4, r3, #13
 8011522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011526:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801152a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801152e:	4058      	eors	r0, r3
 8011530:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011534:	f1a3 040d 	sub.w	r4, r3, #13
 8011538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801153c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011540:	08db      	lsrs	r3, r3, #3
 8011542:	4043      	eors	r3, r0
 8011544:	18c8      	adds	r0, r1, r3
 8011546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801154a:	f1a3 010e 	sub.w	r1, r3, #14
 801154e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011552:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011556:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801155a:	3302      	adds	r3, #2
 801155c:	4408      	add	r0, r1
 801155e:	e001      	b.n	8011564 <mbedtls_internal_sha256_process+0xbb4>
 8011560:	08019b90 	.word	0x08019b90
 8011564:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011568:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801156c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011574:	4413      	add	r3, r2
 8011576:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801157a:	f107 030c 	add.w	r3, r7, #12
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011584:	f107 030c 	add.w	r3, r7, #12
 8011588:	699b      	ldr	r3, [r3, #24]
 801158a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801158e:	405a      	eors	r2, r3
 8011590:	f107 030c 	add.w	r3, r7, #12
 8011594:	699b      	ldr	r3, [r3, #24]
 8011596:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801159a:	405a      	eors	r2, r3
 801159c:	f107 030c 	add.w	r3, r7, #12
 80115a0:	6999      	ldr	r1, [r3, #24]
 80115a2:	f107 030c 	add.w	r3, r7, #12
 80115a6:	69db      	ldr	r3, [r3, #28]
 80115a8:	4019      	ands	r1, r3
 80115aa:	f107 030c 	add.w	r3, r7, #12
 80115ae:	6818      	ldr	r0, [r3, #0]
 80115b0:	f107 030c 	add.w	r3, r7, #12
 80115b4:	699c      	ldr	r4, [r3, #24]
 80115b6:	f107 030c 	add.w	r3, r7, #12
 80115ba:	69db      	ldr	r3, [r3, #28]
 80115bc:	4323      	orrs	r3, r4
 80115be:	4003      	ands	r3, r0
 80115c0:	430b      	orrs	r3, r1
 80115c2:	4413      	add	r3, r2
 80115c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80115c8:	f107 030c 	add.w	r3, r7, #12
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80115d2:	441a      	add	r2, r3
 80115d4:	f107 030c 	add.w	r3, r7, #12
 80115d8:	605a      	str	r2, [r3, #4]
 80115da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80115de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80115e2:	441a      	add	r2, r3
 80115e4:	f107 030c 	add.w	r3, r7, #12
 80115e8:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80115ea:	f107 030c 	add.w	r3, r7, #12
 80115ee:	691a      	ldr	r2, [r3, #16]
 80115f0:	f107 030c 	add.w	r3, r7, #12
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80115fa:	f107 030c 	add.w	r3, r7, #12
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011604:	4059      	eors	r1, r3
 8011606:	f107 030c 	add.w	r3, r7, #12
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011610:	404b      	eors	r3, r1
 8011612:	441a      	add	r2, r3
 8011614:	f107 030c 	add.w	r3, r7, #12
 8011618:	68d9      	ldr	r1, [r3, #12]
 801161a:	f107 030c 	add.w	r3, r7, #12
 801161e:	6858      	ldr	r0, [r3, #4]
 8011620:	f107 030c 	add.w	r3, r7, #12
 8011624:	689c      	ldr	r4, [r3, #8]
 8011626:	f107 030c 	add.w	r3, r7, #12
 801162a:	68db      	ldr	r3, [r3, #12]
 801162c:	4063      	eors	r3, r4
 801162e:	4003      	ands	r3, r0
 8011630:	404b      	eors	r3, r1
 8011632:	441a      	add	r2, r3
 8011634:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011638:	3303      	adds	r3, #3
 801163a:	49e9      	ldr	r1, [pc, #932]	; (80119e0 <mbedtls_internal_sha256_process+0x1030>)
 801163c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011640:	441a      	add	r2, r3
 8011642:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011646:	1c59      	adds	r1, r3, #1
 8011648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801164c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011650:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011654:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011658:	1c58      	adds	r0, r3, #1
 801165a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801165e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011662:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8011666:	4059      	eors	r1, r3
 8011668:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801166c:	1c58      	adds	r0, r3, #1
 801166e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011672:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011676:	0a9b      	lsrs	r3, r3, #10
 8011678:	4059      	eors	r1, r3
 801167a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801167e:	1f18      	subs	r0, r3, #4
 8011680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011684:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011688:	4419      	add	r1, r3
 801168a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801168e:	f1a3 000c 	sub.w	r0, r3, #12
 8011692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011696:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801169a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801169e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116a2:	f1a3 040c 	sub.w	r4, r3, #12
 80116a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80116ae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80116b2:	4058      	eors	r0, r3
 80116b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116b8:	f1a3 040c 	sub.w	r4, r3, #12
 80116bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80116c4:	08db      	lsrs	r3, r3, #3
 80116c6:	4043      	eors	r3, r0
 80116c8:	18c8      	adds	r0, r1, r3
 80116ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116ce:	f1a3 010d 	sub.w	r1, r3, #13
 80116d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80116da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116de:	3303      	adds	r3, #3
 80116e0:	4408      	add	r0, r1
 80116e2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80116e6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80116ea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80116ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80116f2:	4413      	add	r3, r2
 80116f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80116f8:	f107 030c 	add.w	r3, r7, #12
 80116fc:	695b      	ldr	r3, [r3, #20]
 80116fe:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011702:	f107 030c 	add.w	r3, r7, #12
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	ea4f 3373 	mov.w	r3, r3, ror #13
 801170c:	405a      	eors	r2, r3
 801170e:	f107 030c 	add.w	r3, r7, #12
 8011712:	695b      	ldr	r3, [r3, #20]
 8011714:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011718:	405a      	eors	r2, r3
 801171a:	f107 030c 	add.w	r3, r7, #12
 801171e:	6959      	ldr	r1, [r3, #20]
 8011720:	f107 030c 	add.w	r3, r7, #12
 8011724:	699b      	ldr	r3, [r3, #24]
 8011726:	4019      	ands	r1, r3
 8011728:	f107 030c 	add.w	r3, r7, #12
 801172c:	69d8      	ldr	r0, [r3, #28]
 801172e:	f107 030c 	add.w	r3, r7, #12
 8011732:	695c      	ldr	r4, [r3, #20]
 8011734:	f107 030c 	add.w	r3, r7, #12
 8011738:	699b      	ldr	r3, [r3, #24]
 801173a:	4323      	orrs	r3, r4
 801173c:	4003      	ands	r3, r0
 801173e:	430b      	orrs	r3, r1
 8011740:	4413      	add	r3, r2
 8011742:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011746:	f107 030c 	add.w	r3, r7, #12
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011750:	441a      	add	r2, r3
 8011752:	f107 030c 	add.w	r3, r7, #12
 8011756:	601a      	str	r2, [r3, #0]
 8011758:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801175c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011760:	441a      	add	r2, r3
 8011762:	f107 030c 	add.w	r3, r7, #12
 8011766:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8011768:	f107 030c 	add.w	r3, r7, #12
 801176c:	68da      	ldr	r2, [r3, #12]
 801176e:	f107 030c 	add.w	r3, r7, #12
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011778:	f107 030c 	add.w	r3, r7, #12
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011782:	4059      	eors	r1, r3
 8011784:	f107 030c 	add.w	r3, r7, #12
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801178e:	404b      	eors	r3, r1
 8011790:	441a      	add	r2, r3
 8011792:	f107 030c 	add.w	r3, r7, #12
 8011796:	6899      	ldr	r1, [r3, #8]
 8011798:	f107 030c 	add.w	r3, r7, #12
 801179c:	6818      	ldr	r0, [r3, #0]
 801179e:	f107 030c 	add.w	r3, r7, #12
 80117a2:	685c      	ldr	r4, [r3, #4]
 80117a4:	f107 030c 	add.w	r3, r7, #12
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	4063      	eors	r3, r4
 80117ac:	4003      	ands	r3, r0
 80117ae:	404b      	eors	r3, r1
 80117b0:	441a      	add	r2, r3
 80117b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117b6:	3304      	adds	r3, #4
 80117b8:	4989      	ldr	r1, [pc, #548]	; (80119e0 <mbedtls_internal_sha256_process+0x1030>)
 80117ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80117be:	441a      	add	r2, r3
 80117c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117c4:	1c99      	adds	r1, r3, #2
 80117c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117ce:	ea4f 4173 	mov.w	r1, r3, ror #17
 80117d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117d6:	1c98      	adds	r0, r3, #2
 80117d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80117e0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80117e4:	4059      	eors	r1, r3
 80117e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117ea:	1c98      	adds	r0, r3, #2
 80117ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80117f4:	0a9b      	lsrs	r3, r3, #10
 80117f6:	4059      	eors	r1, r3
 80117f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117fc:	1ed8      	subs	r0, r3, #3
 80117fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011802:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011806:	4419      	add	r1, r3
 8011808:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801180c:	f1a3 000b 	sub.w	r0, r3, #11
 8011810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011814:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011818:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801181c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011820:	f1a3 040b 	sub.w	r4, r3, #11
 8011824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011828:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801182c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8011830:	4058      	eors	r0, r3
 8011832:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011836:	f1a3 040b 	sub.w	r4, r3, #11
 801183a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801183e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011842:	08db      	lsrs	r3, r3, #3
 8011844:	4043      	eors	r3, r0
 8011846:	18c8      	adds	r0, r1, r3
 8011848:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801184c:	f1a3 010c 	sub.w	r1, r3, #12
 8011850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011854:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011858:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801185c:	3304      	adds	r3, #4
 801185e:	4408      	add	r0, r1
 8011860:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011864:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8011868:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801186c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011870:	4413      	add	r3, r2
 8011872:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011876:	f107 030c 	add.w	r3, r7, #12
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011880:	f107 030c 	add.w	r3, r7, #12
 8011884:	691b      	ldr	r3, [r3, #16]
 8011886:	ea4f 3373 	mov.w	r3, r3, ror #13
 801188a:	405a      	eors	r2, r3
 801188c:	f107 030c 	add.w	r3, r7, #12
 8011890:	691b      	ldr	r3, [r3, #16]
 8011892:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011896:	405a      	eors	r2, r3
 8011898:	f107 030c 	add.w	r3, r7, #12
 801189c:	6919      	ldr	r1, [r3, #16]
 801189e:	f107 030c 	add.w	r3, r7, #12
 80118a2:	695b      	ldr	r3, [r3, #20]
 80118a4:	4019      	ands	r1, r3
 80118a6:	f107 030c 	add.w	r3, r7, #12
 80118aa:	6998      	ldr	r0, [r3, #24]
 80118ac:	f107 030c 	add.w	r3, r7, #12
 80118b0:	691c      	ldr	r4, [r3, #16]
 80118b2:	f107 030c 	add.w	r3, r7, #12
 80118b6:	695b      	ldr	r3, [r3, #20]
 80118b8:	4323      	orrs	r3, r4
 80118ba:	4003      	ands	r3, r0
 80118bc:	430b      	orrs	r3, r1
 80118be:	4413      	add	r3, r2
 80118c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80118c4:	f107 030c 	add.w	r3, r7, #12
 80118c8:	69da      	ldr	r2, [r3, #28]
 80118ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80118ce:	441a      	add	r2, r3
 80118d0:	f107 030c 	add.w	r3, r7, #12
 80118d4:	61da      	str	r2, [r3, #28]
 80118d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80118da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80118de:	441a      	add	r2, r3
 80118e0:	f107 030c 	add.w	r3, r7, #12
 80118e4:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80118e6:	f107 030c 	add.w	r3, r7, #12
 80118ea:	689a      	ldr	r2, [r3, #8]
 80118ec:	f107 030c 	add.w	r3, r7, #12
 80118f0:	69db      	ldr	r3, [r3, #28]
 80118f2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80118f6:	f107 030c 	add.w	r3, r7, #12
 80118fa:	69db      	ldr	r3, [r3, #28]
 80118fc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011900:	4059      	eors	r1, r3
 8011902:	f107 030c 	add.w	r3, r7, #12
 8011906:	69db      	ldr	r3, [r3, #28]
 8011908:	ea4f 6373 	mov.w	r3, r3, ror #25
 801190c:	404b      	eors	r3, r1
 801190e:	441a      	add	r2, r3
 8011910:	f107 030c 	add.w	r3, r7, #12
 8011914:	6859      	ldr	r1, [r3, #4]
 8011916:	f107 030c 	add.w	r3, r7, #12
 801191a:	69d8      	ldr	r0, [r3, #28]
 801191c:	f107 030c 	add.w	r3, r7, #12
 8011920:	681c      	ldr	r4, [r3, #0]
 8011922:	f107 030c 	add.w	r3, r7, #12
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	4063      	eors	r3, r4
 801192a:	4003      	ands	r3, r0
 801192c:	404b      	eors	r3, r1
 801192e:	441a      	add	r2, r3
 8011930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011934:	3305      	adds	r3, #5
 8011936:	492a      	ldr	r1, [pc, #168]	; (80119e0 <mbedtls_internal_sha256_process+0x1030>)
 8011938:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801193c:	441a      	add	r2, r3
 801193e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011942:	1cd9      	adds	r1, r3, #3
 8011944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011948:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801194c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011950:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011954:	1cd8      	adds	r0, r3, #3
 8011956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801195a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801195e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8011962:	4059      	eors	r1, r3
 8011964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011968:	1cd8      	adds	r0, r3, #3
 801196a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801196e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011972:	0a9b      	lsrs	r3, r3, #10
 8011974:	4059      	eors	r1, r3
 8011976:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801197a:	1e98      	subs	r0, r3, #2
 801197c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011980:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011984:	4419      	add	r1, r3
 8011986:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801198a:	f1a3 000a 	sub.w	r0, r3, #10
 801198e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011992:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011996:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801199a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801199e:	f1a3 040a 	sub.w	r4, r3, #10
 80119a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80119aa:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80119ae:	4058      	eors	r0, r3
 80119b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119b4:	f1a3 040a 	sub.w	r4, r3, #10
 80119b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80119c0:	08db      	lsrs	r3, r3, #3
 80119c2:	4043      	eors	r3, r0
 80119c4:	18c8      	adds	r0, r1, r3
 80119c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119ca:	f1a3 010b 	sub.w	r1, r3, #11
 80119ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80119d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119da:	3305      	adds	r3, #5
 80119dc:	4408      	add	r0, r1
 80119de:	e001      	b.n	80119e4 <mbedtls_internal_sha256_process+0x1034>
 80119e0:	08019b90 	.word	0x08019b90
 80119e4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80119e8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80119ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80119f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80119f4:	4413      	add	r3, r2
 80119f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80119fa:	f107 030c 	add.w	r3, r7, #12
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011a04:	f107 030c 	add.w	r3, r7, #12
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011a0e:	405a      	eors	r2, r3
 8011a10:	f107 030c 	add.w	r3, r7, #12
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011a1a:	405a      	eors	r2, r3
 8011a1c:	f107 030c 	add.w	r3, r7, #12
 8011a20:	68d9      	ldr	r1, [r3, #12]
 8011a22:	f107 030c 	add.w	r3, r7, #12
 8011a26:	691b      	ldr	r3, [r3, #16]
 8011a28:	4019      	ands	r1, r3
 8011a2a:	f107 030c 	add.w	r3, r7, #12
 8011a2e:	6958      	ldr	r0, [r3, #20]
 8011a30:	f107 030c 	add.w	r3, r7, #12
 8011a34:	68dc      	ldr	r4, [r3, #12]
 8011a36:	f107 030c 	add.w	r3, r7, #12
 8011a3a:	691b      	ldr	r3, [r3, #16]
 8011a3c:	4323      	orrs	r3, r4
 8011a3e:	4003      	ands	r3, r0
 8011a40:	430b      	orrs	r3, r1
 8011a42:	4413      	add	r3, r2
 8011a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011a48:	f107 030c 	add.w	r3, r7, #12
 8011a4c:	699a      	ldr	r2, [r3, #24]
 8011a4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a52:	441a      	add	r2, r3
 8011a54:	f107 030c 	add.w	r3, r7, #12
 8011a58:	619a      	str	r2, [r3, #24]
 8011a5a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011a62:	441a      	add	r2, r3
 8011a64:	f107 030c 	add.w	r3, r7, #12
 8011a68:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8011a6a:	f107 030c 	add.w	r3, r7, #12
 8011a6e:	685a      	ldr	r2, [r3, #4]
 8011a70:	f107 030c 	add.w	r3, r7, #12
 8011a74:	699b      	ldr	r3, [r3, #24]
 8011a76:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011a7a:	f107 030c 	add.w	r3, r7, #12
 8011a7e:	699b      	ldr	r3, [r3, #24]
 8011a80:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011a84:	4059      	eors	r1, r3
 8011a86:	f107 030c 	add.w	r3, r7, #12
 8011a8a:	699b      	ldr	r3, [r3, #24]
 8011a8c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011a90:	404b      	eors	r3, r1
 8011a92:	441a      	add	r2, r3
 8011a94:	f107 030c 	add.w	r3, r7, #12
 8011a98:	6819      	ldr	r1, [r3, #0]
 8011a9a:	f107 030c 	add.w	r3, r7, #12
 8011a9e:	6998      	ldr	r0, [r3, #24]
 8011aa0:	f107 030c 	add.w	r3, r7, #12
 8011aa4:	69dc      	ldr	r4, [r3, #28]
 8011aa6:	f107 030c 	add.w	r3, r7, #12
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4063      	eors	r3, r4
 8011aae:	4003      	ands	r3, r0
 8011ab0:	404b      	eors	r3, r1
 8011ab2:	441a      	add	r2, r3
 8011ab4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ab8:	3306      	adds	r3, #6
 8011aba:	49c4      	ldr	r1, [pc, #784]	; (8011dcc <mbedtls_internal_sha256_process+0x141c>)
 8011abc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011ac0:	441a      	add	r2, r3
 8011ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ac6:	1d19      	adds	r1, r3, #4
 8011ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011acc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ad0:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ad8:	1d18      	adds	r0, r3, #4
 8011ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ade:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011ae2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8011ae6:	4059      	eors	r1, r3
 8011ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011aec:	1d18      	adds	r0, r3, #4
 8011aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011af2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011af6:	0a9b      	lsrs	r3, r3, #10
 8011af8:	4059      	eors	r1, r3
 8011afa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011afe:	1e58      	subs	r0, r3, #1
 8011b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011b08:	4419      	add	r1, r3
 8011b0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b0e:	f1a3 0009 	sub.w	r0, r3, #9
 8011b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011b1a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011b1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b22:	f1a3 0409 	sub.w	r4, r3, #9
 8011b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011b2e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8011b32:	4058      	eors	r0, r3
 8011b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b38:	f1a3 0409 	sub.w	r4, r3, #9
 8011b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b40:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011b44:	08db      	lsrs	r3, r3, #3
 8011b46:	4043      	eors	r3, r0
 8011b48:	18c8      	adds	r0, r1, r3
 8011b4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b4e:	f1a3 010a 	sub.w	r1, r3, #10
 8011b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b56:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011b5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b5e:	3306      	adds	r3, #6
 8011b60:	4408      	add	r0, r1
 8011b62:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011b66:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8011b6a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011b6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011b72:	4413      	add	r3, r2
 8011b74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011b78:	f107 030c 	add.w	r3, r7, #12
 8011b7c:	689b      	ldr	r3, [r3, #8]
 8011b7e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011b82:	f107 030c 	add.w	r3, r7, #12
 8011b86:	689b      	ldr	r3, [r3, #8]
 8011b88:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011b8c:	405a      	eors	r2, r3
 8011b8e:	f107 030c 	add.w	r3, r7, #12
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011b98:	405a      	eors	r2, r3
 8011b9a:	f107 030c 	add.w	r3, r7, #12
 8011b9e:	6899      	ldr	r1, [r3, #8]
 8011ba0:	f107 030c 	add.w	r3, r7, #12
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	4019      	ands	r1, r3
 8011ba8:	f107 030c 	add.w	r3, r7, #12
 8011bac:	6918      	ldr	r0, [r3, #16]
 8011bae:	f107 030c 	add.w	r3, r7, #12
 8011bb2:	689c      	ldr	r4, [r3, #8]
 8011bb4:	f107 030c 	add.w	r3, r7, #12
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	4323      	orrs	r3, r4
 8011bbc:	4003      	ands	r3, r0
 8011bbe:	430b      	orrs	r3, r1
 8011bc0:	4413      	add	r3, r2
 8011bc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011bc6:	f107 030c 	add.w	r3, r7, #12
 8011bca:	695a      	ldr	r2, [r3, #20]
 8011bcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011bd0:	441a      	add	r2, r3
 8011bd2:	f107 030c 	add.w	r3, r7, #12
 8011bd6:	615a      	str	r2, [r3, #20]
 8011bd8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011be0:	441a      	add	r2, r3
 8011be2:	f107 030c 	add.w	r3, r7, #12
 8011be6:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8011be8:	f107 030c 	add.w	r3, r7, #12
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	f107 030c 	add.w	r3, r7, #12
 8011bf2:	695b      	ldr	r3, [r3, #20]
 8011bf4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011bf8:	f107 030c 	add.w	r3, r7, #12
 8011bfc:	695b      	ldr	r3, [r3, #20]
 8011bfe:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011c02:	4059      	eors	r1, r3
 8011c04:	f107 030c 	add.w	r3, r7, #12
 8011c08:	695b      	ldr	r3, [r3, #20]
 8011c0a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011c0e:	404b      	eors	r3, r1
 8011c10:	441a      	add	r2, r3
 8011c12:	f107 030c 	add.w	r3, r7, #12
 8011c16:	69d9      	ldr	r1, [r3, #28]
 8011c18:	f107 030c 	add.w	r3, r7, #12
 8011c1c:	6958      	ldr	r0, [r3, #20]
 8011c1e:	f107 030c 	add.w	r3, r7, #12
 8011c22:	699c      	ldr	r4, [r3, #24]
 8011c24:	f107 030c 	add.w	r3, r7, #12
 8011c28:	69db      	ldr	r3, [r3, #28]
 8011c2a:	4063      	eors	r3, r4
 8011c2c:	4003      	ands	r3, r0
 8011c2e:	404b      	eors	r3, r1
 8011c30:	441a      	add	r2, r3
 8011c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c36:	3307      	adds	r3, #7
 8011c38:	4964      	ldr	r1, [pc, #400]	; (8011dcc <mbedtls_internal_sha256_process+0x141c>)
 8011c3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011c3e:	441a      	add	r2, r3
 8011c40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c44:	1d59      	adds	r1, r3, #5
 8011c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c4e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c56:	1d58      	adds	r0, r3, #5
 8011c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011c60:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8011c64:	4059      	eors	r1, r3
 8011c66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c6a:	1d58      	adds	r0, r3, #5
 8011c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011c74:	0a9b      	lsrs	r3, r3, #10
 8011c76:	4059      	eors	r1, r3
 8011c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c7c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8011c80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011c84:	4419      	add	r1, r3
 8011c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c8a:	f1a3 0008 	sub.w	r0, r3, #8
 8011c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011c96:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c9e:	f1a3 0408 	sub.w	r4, r3, #8
 8011ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ca6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011caa:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8011cae:	4058      	eors	r0, r3
 8011cb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011cb4:	f1a3 0408 	sub.w	r4, r3, #8
 8011cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011cbc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011cc0:	08db      	lsrs	r3, r3, #3
 8011cc2:	4043      	eors	r3, r0
 8011cc4:	18c8      	adds	r0, r1, r3
 8011cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011cca:	f1a3 0109 	sub.w	r1, r3, #9
 8011cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011cd2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011cd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011cda:	3307      	adds	r3, #7
 8011cdc:	4408      	add	r0, r1
 8011cde:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011ce2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8011ce6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011cea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011cee:	4413      	add	r3, r2
 8011cf0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011cf4:	f107 030c 	add.w	r3, r7, #12
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011cfe:	f107 030c 	add.w	r3, r7, #12
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011d08:	405a      	eors	r2, r3
 8011d0a:	f107 030c 	add.w	r3, r7, #12
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011d14:	405a      	eors	r2, r3
 8011d16:	f107 030c 	add.w	r3, r7, #12
 8011d1a:	6859      	ldr	r1, [r3, #4]
 8011d1c:	f107 030c 	add.w	r3, r7, #12
 8011d20:	689b      	ldr	r3, [r3, #8]
 8011d22:	4019      	ands	r1, r3
 8011d24:	f107 030c 	add.w	r3, r7, #12
 8011d28:	68d8      	ldr	r0, [r3, #12]
 8011d2a:	f107 030c 	add.w	r3, r7, #12
 8011d2e:	685c      	ldr	r4, [r3, #4]
 8011d30:	f107 030c 	add.w	r3, r7, #12
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	4323      	orrs	r3, r4
 8011d38:	4003      	ands	r3, r0
 8011d3a:	430b      	orrs	r3, r1
 8011d3c:	4413      	add	r3, r2
 8011d3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011d42:	f107 030c 	add.w	r3, r7, #12
 8011d46:	691a      	ldr	r2, [r3, #16]
 8011d48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011d4c:	441a      	add	r2, r3
 8011d4e:	f107 030c 	add.w	r3, r7, #12
 8011d52:	611a      	str	r2, [r3, #16]
 8011d54:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011d5c:	441a      	add	r2, r3
 8011d5e:	f107 030c 	add.w	r3, r7, #12
 8011d62:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 8011d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d68:	3308      	adds	r3, #8
 8011d6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d72:	2b3f      	cmp	r3, #63	; 0x3f
 8011d74:	f67f a9fc 	bls.w	8011170 <mbedtls_internal_sha256_process+0x7c0>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8011d78:	2300      	movs	r3, #0
 8011d7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011d7e:	e019      	b.n	8011db4 <mbedtls_internal_sha256_process+0x1404>
        ctx->state[i] += A[i];
 8011d80:	1d3b      	adds	r3, r7, #4
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011d88:	3202      	adds	r2, #2
 8011d8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011d8e:	f107 030c 	add.w	r3, r7, #12
 8011d92:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8011d96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d9a:	18d1      	adds	r1, r2, r3
 8011d9c:	1d3b      	adds	r3, r7, #4
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011da4:	3202      	adds	r2, #2
 8011da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8011daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011dae:	3301      	adds	r3, #1
 8011db0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011db4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011db8:	2b07      	cmp	r3, #7
 8011dba:	d9e1      	bls.n	8011d80 <mbedtls_internal_sha256_process+0x13d0>

    return( 0 );
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bc90      	pop	{r4, r7}
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	08019b90 	.word	0x08019b90

08011dd0 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b088      	sub	sp, #32
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	60b9      	str	r1, [r7, #8]
 8011dda:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d101      	bne.n	8011de6 <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8011de2:	2300      	movs	r3, #0
 8011de4:	e065      	b.n	8011eb2 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011dee:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8011df6:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	441a      	add	r2, r3
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d904      	bls.n	8011e20 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	1c5a      	adds	r2, r3, #1
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d034      	beq.n	8011e90 <mbedtls_sha256_update_ret+0xc0>
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	69bb      	ldr	r3, [r7, #24]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d330      	bcc.n	8011e90 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	4413      	add	r3, r2
 8011e38:	69ba      	ldr	r2, [r7, #24]
 8011e3a:	68b9      	ldr	r1, [r7, #8]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f002 fbb0 	bl	80145a2 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	3328      	adds	r3, #40	; 0x28
 8011e46:	4619      	mov	r1, r3
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f7fe fdb1 	bl	80109b0 <mbedtls_internal_sha256_process>
 8011e4e:	6178      	str	r0, [r7, #20]
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d001      	beq.n	8011e5a <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	e02b      	b.n	8011eb2 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8011e5a:	68ba      	ldr	r2, [r7, #8]
 8011e5c:	69bb      	ldr	r3, [r7, #24]
 8011e5e:	4413      	add	r3, r2
 8011e60:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	607b      	str	r3, [r7, #4]
        left = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8011e6e:	e00f      	b.n	8011e90 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8011e70:	68b9      	ldr	r1, [r7, #8]
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f7fe fd9c 	bl	80109b0 <mbedtls_internal_sha256_process>
 8011e78:	6178      	str	r0, [r7, #20]
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d001      	beq.n	8011e84 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	e016      	b.n	8011eb2 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	3340      	adds	r3, #64	; 0x40
 8011e88:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3b40      	subs	r3, #64	; 0x40
 8011e8e:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b3f      	cmp	r3, #63	; 0x3f
 8011e94:	d8ec      	bhi.n	8011e70 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d009      	beq.n	8011eb0 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	4413      	add	r3, r2
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	68b9      	ldr	r1, [r7, #8]
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f002 fb79 	bl	80145a2 <memcpy>

    return( 0 );
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3720      	adds	r7, #32
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b086      	sub	sp, #24
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ecc:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	1c5a      	adds	r2, r3, #1
 8011ed2:	617a      	str	r2, [r7, #20]
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	2280      	movs	r2, #128	; 0x80
 8011eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	2b38      	cmp	r3, #56	; 0x38
 8011ee2:	d80c      	bhi.n	8011efe <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	18d0      	adds	r0, r2, r3
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	2100      	movs	r1, #0
 8011ef8:	f002 fb77 	bl	80145ea <memset>
 8011efc:	e01e      	b.n	8011f3c <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	18d0      	adds	r0, r2, r3
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8011f0e:	461a      	mov	r2, r3
 8011f10:	2100      	movs	r1, #0
 8011f12:	f002 fb6a 	bl	80145ea <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	3328      	adds	r3, #40	; 0x28
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f7fe fd47 	bl	80109b0 <mbedtls_internal_sha256_process>
 8011f22:	6138      	str	r0, [r7, #16]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d001      	beq.n	8011f2e <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	e128      	b.n	8012180 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	3328      	adds	r3, #40	; 0x28
 8011f32:	2238      	movs	r2, #56	; 0x38
 8011f34:	2100      	movs	r1, #0
 8011f36:	4618      	mov	r0, r3
 8011f38:	f002 fb57 	bl	80145ea <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	00db      	lsls	r3, r3, #3
 8011f52:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	0e1b      	lsrs	r3, r3, #24
 8011f58:	b2da      	uxtb	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	0c1b      	lsrs	r3, r3, #16
 8011f64:	b2da      	uxtb	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	0a1b      	lsrs	r3, r3, #8
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	b2da      	uxtb	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	0e1b      	lsrs	r3, r3, #24
 8011f86:	b2da      	uxtb	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	0c1b      	lsrs	r3, r3, #16
 8011f92:	b2da      	uxtb	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	0a1b      	lsrs	r3, r3, #8
 8011f9e:	b2da      	uxtb	r2, r3
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	b2da      	uxtb	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	3328      	adds	r3, #40	; 0x28
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7fe fcfa 	bl	80109b0 <mbedtls_internal_sha256_process>
 8011fbc:	6138      	str	r0, [r7, #16]
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d001      	beq.n	8011fc8 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	e0db      	b.n	8012180 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	689b      	ldr	r3, [r3, #8]
 8011fcc:	0e1b      	lsrs	r3, r3, #24
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	701a      	strb	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	689b      	ldr	r3, [r3, #8]
 8011fd8:	0c1a      	lsrs	r2, r3, #16
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	3301      	adds	r3, #1
 8011fde:	b2d2      	uxtb	r2, r2
 8011fe0:	701a      	strb	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	0a1a      	lsrs	r2, r3, #8
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	3302      	adds	r3, #2
 8011fec:	b2d2      	uxtb	r2, r2
 8011fee:	701a      	strb	r2, [r3, #0]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	689a      	ldr	r2, [r3, #8]
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	3303      	adds	r3, #3
 8011ff8:	b2d2      	uxtb	r2, r2
 8011ffa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	0e1a      	lsrs	r2, r3, #24
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	3304      	adds	r3, #4
 8012006:	b2d2      	uxtb	r2, r2
 8012008:	701a      	strb	r2, [r3, #0]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	0c1a      	lsrs	r2, r3, #16
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	3305      	adds	r3, #5
 8012014:	b2d2      	uxtb	r2, r2
 8012016:	701a      	strb	r2, [r3, #0]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	68db      	ldr	r3, [r3, #12]
 801201c:	0a1a      	lsrs	r2, r3, #8
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	3306      	adds	r3, #6
 8012022:	b2d2      	uxtb	r2, r2
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	68da      	ldr	r2, [r3, #12]
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	3307      	adds	r3, #7
 801202e:	b2d2      	uxtb	r2, r2
 8012030:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	691b      	ldr	r3, [r3, #16]
 8012036:	0e1a      	lsrs	r2, r3, #24
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	3308      	adds	r3, #8
 801203c:	b2d2      	uxtb	r2, r2
 801203e:	701a      	strb	r2, [r3, #0]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	691b      	ldr	r3, [r3, #16]
 8012044:	0c1a      	lsrs	r2, r3, #16
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	3309      	adds	r3, #9
 801204a:	b2d2      	uxtb	r2, r2
 801204c:	701a      	strb	r2, [r3, #0]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	0a1a      	lsrs	r2, r3, #8
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	330a      	adds	r3, #10
 8012058:	b2d2      	uxtb	r2, r2
 801205a:	701a      	strb	r2, [r3, #0]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	691a      	ldr	r2, [r3, #16]
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	330b      	adds	r3, #11
 8012064:	b2d2      	uxtb	r2, r2
 8012066:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	695b      	ldr	r3, [r3, #20]
 801206c:	0e1a      	lsrs	r2, r3, #24
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	330c      	adds	r3, #12
 8012072:	b2d2      	uxtb	r2, r2
 8012074:	701a      	strb	r2, [r3, #0]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	695b      	ldr	r3, [r3, #20]
 801207a:	0c1a      	lsrs	r2, r3, #16
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	330d      	adds	r3, #13
 8012080:	b2d2      	uxtb	r2, r2
 8012082:	701a      	strb	r2, [r3, #0]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	695b      	ldr	r3, [r3, #20]
 8012088:	0a1a      	lsrs	r2, r3, #8
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	330e      	adds	r3, #14
 801208e:	b2d2      	uxtb	r2, r2
 8012090:	701a      	strb	r2, [r3, #0]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	695a      	ldr	r2, [r3, #20]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	330f      	adds	r3, #15
 801209a:	b2d2      	uxtb	r2, r2
 801209c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	699b      	ldr	r3, [r3, #24]
 80120a2:	0e1a      	lsrs	r2, r3, #24
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	3310      	adds	r3, #16
 80120a8:	b2d2      	uxtb	r2, r2
 80120aa:	701a      	strb	r2, [r3, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	699b      	ldr	r3, [r3, #24]
 80120b0:	0c1a      	lsrs	r2, r3, #16
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	3311      	adds	r3, #17
 80120b6:	b2d2      	uxtb	r2, r2
 80120b8:	701a      	strb	r2, [r3, #0]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	699b      	ldr	r3, [r3, #24]
 80120be:	0a1a      	lsrs	r2, r3, #8
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	3312      	adds	r3, #18
 80120c4:	b2d2      	uxtb	r2, r2
 80120c6:	701a      	strb	r2, [r3, #0]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	699a      	ldr	r2, [r3, #24]
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	3313      	adds	r3, #19
 80120d0:	b2d2      	uxtb	r2, r2
 80120d2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	69db      	ldr	r3, [r3, #28]
 80120d8:	0e1a      	lsrs	r2, r3, #24
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	3314      	adds	r3, #20
 80120de:	b2d2      	uxtb	r2, r2
 80120e0:	701a      	strb	r2, [r3, #0]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	69db      	ldr	r3, [r3, #28]
 80120e6:	0c1a      	lsrs	r2, r3, #16
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	3315      	adds	r3, #21
 80120ec:	b2d2      	uxtb	r2, r2
 80120ee:	701a      	strb	r2, [r3, #0]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	69db      	ldr	r3, [r3, #28]
 80120f4:	0a1a      	lsrs	r2, r3, #8
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	3316      	adds	r3, #22
 80120fa:	b2d2      	uxtb	r2, r2
 80120fc:	701a      	strb	r2, [r3, #0]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	69da      	ldr	r2, [r3, #28]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	3317      	adds	r3, #23
 8012106:	b2d2      	uxtb	r2, r2
 8012108:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6a1b      	ldr	r3, [r3, #32]
 801210e:	0e1a      	lsrs	r2, r3, #24
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	3318      	adds	r3, #24
 8012114:	b2d2      	uxtb	r2, r2
 8012116:	701a      	strb	r2, [r3, #0]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6a1b      	ldr	r3, [r3, #32]
 801211c:	0c1a      	lsrs	r2, r3, #16
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	3319      	adds	r3, #25
 8012122:	b2d2      	uxtb	r2, r2
 8012124:	701a      	strb	r2, [r3, #0]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6a1b      	ldr	r3, [r3, #32]
 801212a:	0a1a      	lsrs	r2, r3, #8
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	331a      	adds	r3, #26
 8012130:	b2d2      	uxtb	r2, r2
 8012132:	701a      	strb	r2, [r3, #0]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6a1a      	ldr	r2, [r3, #32]
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	331b      	adds	r3, #27
 801213c:	b2d2      	uxtb	r2, r2
 801213e:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012144:	2b00      	cmp	r3, #0
 8012146:	d11a      	bne.n	801217e <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801214c:	0e1a      	lsrs	r2, r3, #24
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	331c      	adds	r3, #28
 8012152:	b2d2      	uxtb	r2, r2
 8012154:	701a      	strb	r2, [r3, #0]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801215a:	0c1a      	lsrs	r2, r3, #16
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	331d      	adds	r3, #29
 8012160:	b2d2      	uxtb	r2, r2
 8012162:	701a      	strb	r2, [r3, #0]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012168:	0a1a      	lsrs	r2, r3, #8
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	331e      	adds	r3, #30
 801216e:	b2d2      	uxtb	r2, r2
 8012170:	701a      	strb	r2, [r3, #0]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	331f      	adds	r3, #31
 801217a:	b2d2      	uxtb	r2, r2
 801217c:	701a      	strb	r2, [r3, #0]

    return( 0 );
 801217e:	2300      	movs	r3, #0
}
 8012180:	4618      	mov	r0, r3
 8012182:	3718      	adds	r7, #24
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b0a0      	sub	sp, #128	; 0x80
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	607a      	str	r2, [r7, #4]
 8012194:	603b      	str	r3, [r7, #0]

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 8012196:	f107 0310 	add.w	r3, r7, #16
 801219a:	4618      	mov	r0, r3
 801219c:	f7fe fb70 	bl	8010880 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80121a0:	f107 0310 	add.w	r3, r7, #16
 80121a4:	6839      	ldr	r1, [r7, #0]
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe fb98 	bl	80108dc <mbedtls_sha256_starts_ret>
 80121ac:	67f8      	str	r0, [r7, #124]	; 0x7c
 80121ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d114      	bne.n	80121de <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80121b4:	f107 0310 	add.w	r3, r7, #16
 80121b8:	68ba      	ldr	r2, [r7, #8]
 80121ba:	68f9      	ldr	r1, [r7, #12]
 80121bc:	4618      	mov	r0, r3
 80121be:	f7ff fe07 	bl	8011dd0 <mbedtls_sha256_update_ret>
 80121c2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80121c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d10b      	bne.n	80121e2 <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80121ca:	f107 0310 	add.w	r3, r7, #16
 80121ce:	6879      	ldr	r1, [r7, #4]
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7ff fe72 	bl	8011eba <mbedtls_sha256_finish_ret>
 80121d6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80121d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80121da:	2b00      	cmp	r3, #0
        goto exit;

exit:
 80121dc:	e002      	b.n	80121e4 <mbedtls_sha256_ret+0x5c>
        goto exit;
 80121de:	bf00      	nop
 80121e0:	e000      	b.n	80121e4 <mbedtls_sha256_ret+0x5c>
        goto exit;
 80121e2:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 80121e4:	f107 0310 	add.w	r3, r7, #16
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fe fb56 	bl	801089a <mbedtls_sha256_free>

    return( ret );
 80121ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3780      	adds	r7, #128	; 0x80
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8012200:	22d8      	movs	r2, #216	; 0xd8
 8012202:	2100      	movs	r1, #0
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f002 f9f0 	bl	80145ea <memset>
}
 801220a:	bf00      	nop
 801220c:	3708      	adds	r7, #8
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}

08012212 <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
 8012212:	b580      	push	{r7, lr}
 8012214:	b082      	sub	sp, #8
 8012216:	af00      	add	r7, sp, #0
 8012218:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d004      	beq.n	801222a <mbedtls_sha512_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 8012220:	21d8      	movs	r1, #216	; 0xd8
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7fe fb1a 	bl	801085c <mbedtls_platform_zeroize>
 8012228:	e000      	b.n	801222c <mbedtls_sha512_free+0x1a>
        return;
 801222a:	bf00      	nop
}
 801222c:	3708      	adds	r7, #8
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}

08012232 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 8012232:	b580      	push	{r7, lr}
 8012234:	b082      	sub	sp, #8
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
 801223a:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	4610      	mov	r0, r2
 8012242:	4619      	mov	r1, r3
 8012244:	23d8      	movs	r3, #216	; 0xd8
 8012246:	461a      	mov	r2, r3
 8012248:	f002 f9ab 	bl	80145a2 <memcpy>
}
 801224c:	bf00      	nop
 801224e:	3708      	adds	r7, #8
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	0000      	movs	r0, r0
	...

08012258 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 8012258:	b490      	push	{r4, r7}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	f04f 0300 	mov.w	r3, #0
 8012268:	f04f 0400 	mov.w	r4, #0
 801226c:	e9c2 3400 	strd	r3, r4, [r2]
    ctx->total[1] = 0;
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	f04f 0300 	mov.w	r3, #0
 8012276:	f04f 0400 	mov.w	r4, #0
 801227a:	e9c2 3402 	strd	r3, r4, [r2, #8]

    if( is384 == 0 )
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d130      	bne.n	80122e6 <mbedtls_sha512_starts_ret+0x8e>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	a436      	add	r4, pc, #216	; (adr r4, 8012360 <mbedtls_sha512_starts_ret+0x108>)
 8012288:	e9d4 3400 	ldrd	r3, r4, [r4]
 801228c:	e9c2 3404 	strd	r3, r4, [r2, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	a435      	add	r4, pc, #212	; (adr r4, 8012368 <mbedtls_sha512_starts_ret+0x110>)
 8012294:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012298:	e9c2 3406 	strd	r3, r4, [r2, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	a434      	add	r4, pc, #208	; (adr r4, 8012370 <mbedtls_sha512_starts_ret+0x118>)
 80122a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122a4:	e9c2 3408 	strd	r3, r4, [r2, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 80122a8:	687a      	ldr	r2, [r7, #4]
 80122aa:	a433      	add	r4, pc, #204	; (adr r4, 8012378 <mbedtls_sha512_starts_ret+0x120>)
 80122ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122b0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	a432      	add	r4, pc, #200	; (adr r4, 8012380 <mbedtls_sha512_starts_ret+0x128>)
 80122b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122bc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 80122c0:	687a      	ldr	r2, [r7, #4]
 80122c2:	a431      	add	r4, pc, #196	; (adr r4, 8012388 <mbedtls_sha512_starts_ret+0x130>)
 80122c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122c8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	a430      	add	r4, pc, #192	; (adr r4, 8012390 <mbedtls_sha512_starts_ret+0x138>)
 80122d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122d4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 80122d8:	687a      	ldr	r2, [r7, #4]
 80122da:	a42f      	add	r4, pc, #188	; (adr r4, 8012398 <mbedtls_sha512_starts_ret+0x140>)
 80122dc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122e0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 80122e4:	e02f      	b.n	8012346 <mbedtls_sha512_starts_ret+0xee>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	a42d      	add	r4, pc, #180	; (adr r4, 80123a0 <mbedtls_sha512_starts_ret+0x148>)
 80122ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122ee:	e9c2 3404 	strd	r3, r4, [r2, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	a42c      	add	r4, pc, #176	; (adr r4, 80123a8 <mbedtls_sha512_starts_ret+0x150>)
 80122f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80122fa:	e9c2 3406 	strd	r3, r4, [r2, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	a42b      	add	r4, pc, #172	; (adr r4, 80123b0 <mbedtls_sha512_starts_ret+0x158>)
 8012302:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012306:	e9c2 3408 	strd	r3, r4, [r2, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	a42a      	add	r4, pc, #168	; (adr r4, 80123b8 <mbedtls_sha512_starts_ret+0x160>)
 801230e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012312:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	a429      	add	r4, pc, #164	; (adr r4, 80123c0 <mbedtls_sha512_starts_ret+0x168>)
 801231a:	e9d4 3400 	ldrd	r3, r4, [r4]
 801231e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	a428      	add	r4, pc, #160	; (adr r4, 80123c8 <mbedtls_sha512_starts_ret+0x170>)
 8012326:	e9d4 3400 	ldrd	r3, r4, [r4]
 801232a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	a427      	add	r4, pc, #156	; (adr r4, 80123d0 <mbedtls_sha512_starts_ret+0x178>)
 8012332:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012336:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 801233a:	687a      	ldr	r2, [r7, #4]
 801233c:	a426      	add	r4, pc, #152	; (adr r4, 80123d8 <mbedtls_sha512_starts_ret+0x180>)
 801233e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012342:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    }

    ctx->is384 = is384;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	683a      	ldr	r2, [r7, #0]
 801234a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    return( 0 );
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bc90      	pop	{r4, r7}
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	f3af 8000 	nop.w
 8012360:	f3bcc908 	.word	0xf3bcc908
 8012364:	6a09e667 	.word	0x6a09e667
 8012368:	84caa73b 	.word	0x84caa73b
 801236c:	bb67ae85 	.word	0xbb67ae85
 8012370:	fe94f82b 	.word	0xfe94f82b
 8012374:	3c6ef372 	.word	0x3c6ef372
 8012378:	5f1d36f1 	.word	0x5f1d36f1
 801237c:	a54ff53a 	.word	0xa54ff53a
 8012380:	ade682d1 	.word	0xade682d1
 8012384:	510e527f 	.word	0x510e527f
 8012388:	2b3e6c1f 	.word	0x2b3e6c1f
 801238c:	9b05688c 	.word	0x9b05688c
 8012390:	fb41bd6b 	.word	0xfb41bd6b
 8012394:	1f83d9ab 	.word	0x1f83d9ab
 8012398:	137e2179 	.word	0x137e2179
 801239c:	5be0cd19 	.word	0x5be0cd19
 80123a0:	c1059ed8 	.word	0xc1059ed8
 80123a4:	cbbb9d5d 	.word	0xcbbb9d5d
 80123a8:	367cd507 	.word	0x367cd507
 80123ac:	629a292a 	.word	0x629a292a
 80123b0:	3070dd17 	.word	0x3070dd17
 80123b4:	9159015a 	.word	0x9159015a
 80123b8:	f70e5939 	.word	0xf70e5939
 80123bc:	152fecd8 	.word	0x152fecd8
 80123c0:	ffc00b31 	.word	0xffc00b31
 80123c4:	67332667 	.word	0x67332667
 80123c8:	68581511 	.word	0x68581511
 80123cc:	8eb44a87 	.word	0x8eb44a87
 80123d0:	64f98fa7 	.word	0x64f98fa7
 80123d4:	db0c2e0d 	.word	0xdb0c2e0d
 80123d8:	befa4fa4 	.word	0xbefa4fa4
 80123dc:	47b5481d 	.word	0x47b5481d

080123e0 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 80123e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80123e4:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80123ee:	6018      	str	r0, [r3, #0]
 80123f0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80123f4:	6019      	str	r1, [r3, #0]
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 80123f6:	2300      	movs	r3, #0
 80123f8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80123fc:	e0bc      	b.n	8012578 <mbedtls_internal_sha512_process+0x198>
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80123fe:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012402:	00db      	lsls	r3, r3, #3
 8012404:	461a      	mov	r2, r3
 8012406:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	4413      	add	r3, r2
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	b2db      	uxtb	r3, r3
 8012412:	f04f 0400 	mov.w	r4, #0
 8012416:	f04f 0500 	mov.w	r5, #0
 801241a:	f04f 0600 	mov.w	r6, #0
 801241e:	061e      	lsls	r6, r3, #24
 8012420:	2500      	movs	r5, #0
 8012422:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	1c5a      	adds	r2, r3, #1
 801242a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4413      	add	r3, r2
 8012432:	781b      	ldrb	r3, [r3, #0]
 8012434:	b2db      	uxtb	r3, r3
 8012436:	f04f 0400 	mov.w	r4, #0
 801243a:	f04f 0100 	mov.w	r1, #0
 801243e:	f04f 0200 	mov.w	r2, #0
 8012442:	041a      	lsls	r2, r3, #16
 8012444:	2100      	movs	r1, #0
 8012446:	ea45 0301 	orr.w	r3, r5, r1
 801244a:	ea46 0402 	orr.w	r4, r6, r2
 801244e:	461d      	mov	r5, r3
 8012450:	4626      	mov	r6, r4
 8012452:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012456:	00db      	lsls	r3, r3, #3
 8012458:	1c9a      	adds	r2, r3, #2
 801245a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	4413      	add	r3, r2
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	b2db      	uxtb	r3, r3
 8012466:	f04f 0400 	mov.w	r4, #0
 801246a:	f04f 0100 	mov.w	r1, #0
 801246e:	f04f 0200 	mov.w	r2, #0
 8012472:	021a      	lsls	r2, r3, #8
 8012474:	2100      	movs	r1, #0
 8012476:	ea45 0501 	orr.w	r5, r5, r1
 801247a:	ea46 0602 	orr.w	r6, r6, r2
 801247e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012482:	00db      	lsls	r3, r3, #3
 8012484:	1cda      	adds	r2, r3, #3
 8012486:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4413      	add	r3, r2
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	b2db      	uxtb	r3, r3
 8012492:	f04f 0400 	mov.w	r4, #0
 8012496:	f04f 0100 	mov.w	r1, #0
 801249a:	f04f 0200 	mov.w	r2, #0
 801249e:	001a      	movs	r2, r3
 80124a0:	2100      	movs	r1, #0
 80124a2:	ea45 0301 	orr.w	r3, r5, r1
 80124a6:	ea46 0402 	orr.w	r4, r6, r2
 80124aa:	4618      	mov	r0, r3
 80124ac:	4621      	mov	r1, r4
 80124ae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	1d1a      	adds	r2, r3, #4
 80124b6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	4413      	add	r3, r2
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	f04f 0400 	mov.w	r4, #0
 80124c6:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80124ca:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80124ce:	ea40 0508 	orr.w	r5, r0, r8
 80124d2:	ea41 0609 	orr.w	r6, r1, r9
 80124d6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80124da:	00db      	lsls	r3, r3, #3
 80124dc:	1d5a      	adds	r2, r3, #5
 80124de:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4413      	add	r3, r2
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	f04f 0400 	mov.w	r4, #0
 80124ee:	f04f 0100 	mov.w	r1, #0
 80124f2:	f04f 0200 	mov.w	r2, #0
 80124f6:	0422      	lsls	r2, r4, #16
 80124f8:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 80124fc:	0419      	lsls	r1, r3, #16
 80124fe:	ea45 0501 	orr.w	r5, r5, r1
 8012502:	ea46 0602 	orr.w	r6, r6, r2
 8012506:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	1d9a      	adds	r2, r3, #6
 801250e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4413      	add	r3, r2
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	b2db      	uxtb	r3, r3
 801251a:	f04f 0400 	mov.w	r4, #0
 801251e:	f04f 0100 	mov.w	r1, #0
 8012522:	f04f 0200 	mov.w	r2, #0
 8012526:	0222      	lsls	r2, r4, #8
 8012528:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 801252c:	0219      	lsls	r1, r3, #8
 801252e:	ea45 0301 	orr.w	r3, r5, r1
 8012532:	ea46 0402 	orr.w	r4, r6, r2
 8012536:	4618      	mov	r0, r3
 8012538:	4621      	mov	r1, r4
 801253a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801253e:	00db      	lsls	r3, r3, #3
 8012540:	1dda      	adds	r2, r3, #7
 8012542:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4413      	add	r3, r2
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	b2db      	uxtb	r3, r3
 801254e:	f04f 0400 	mov.w	r4, #0
 8012552:	ea40 0503 	orr.w	r5, r0, r3
 8012556:	ea41 0604 	orr.w	r6, r1, r4
 801255a:	4629      	mov	r1, r5
 801255c:	4632      	mov	r2, r6
 801255e:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8012562:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012566:	00db      	lsls	r3, r3, #3
 8012568:	4403      	add	r3, r0
 801256a:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 16; i++ )
 801256e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012572:	3301      	adds	r3, #1
 8012574:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8012578:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801257c:	2b0f      	cmp	r3, #15
 801257e:	f77f af3e 	ble.w	80123fe <mbedtls_internal_sha512_process+0x1e>
    }

    for( ; i < 80; i++ )
 8012582:	e0b5      	b.n	80126f0 <mbedtls_internal_sha512_process+0x310>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8012584:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012588:	3b02      	subs	r3, #2
 801258a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 801258e:	00db      	lsls	r3, r3, #3
 8012590:	4413      	add	r3, r2
 8012592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012596:	0361      	lsls	r1, r4, #13
 8012598:	0cda      	lsrs	r2, r3, #19
 801259a:	430a      	orrs	r2, r1
 801259c:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 80125a0:	035a      	lsls	r2, r3, #13
 80125a2:	0ce3      	lsrs	r3, r4, #19
 80125a4:	4313      	orrs	r3, r2
 80125a6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80125aa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80125ae:	3b02      	subs	r3, #2
 80125b0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80125b4:	00db      	lsls	r3, r3, #3
 80125b6:	4413      	add	r3, r2
 80125b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80125bc:	0f59      	lsrs	r1, r3, #29
 80125be:	00e2      	lsls	r2, r4, #3
 80125c0:	430a      	orrs	r2, r1
 80125c2:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 80125c6:	0f62      	lsrs	r2, r4, #29
 80125c8:	00db      	lsls	r3, r3, #3
 80125ca:	4313      	orrs	r3, r2
 80125cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80125d0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80125d4:	e9d3 5600 	ldrd	r5, r6, [r3]
 80125d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80125dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80125e0:	ea85 0503 	eor.w	r5, r5, r3
 80125e4:	ea86 0604 	eor.w	r6, r6, r4
 80125e8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80125ec:	3b02      	subs	r3, #2
 80125ee:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80125f2:	00db      	lsls	r3, r3, #3
 80125f4:	4413      	add	r3, r2
 80125f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80125fa:	f04f 0100 	mov.w	r1, #0
 80125fe:	f04f 0200 	mov.w	r2, #0
 8012602:	0999      	lsrs	r1, r3, #6
 8012604:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8012608:	09a2      	lsrs	r2, r4, #6
 801260a:	ea85 0301 	eor.w	r3, r5, r1
 801260e:	ea86 0402 	eor.w	r4, r6, r2
 8012612:	4618      	mov	r0, r3
 8012614:	4621      	mov	r1, r4
 8012616:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801261a:	3b07      	subs	r3, #7
 801261c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012620:	00db      	lsls	r3, r3, #3
 8012622:	4413      	add	r3, r2
 8012624:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012628:	eb10 0803 	adds.w	r8, r0, r3
 801262c:	eb41 0904 	adc.w	r9, r1, r4
               S0(W[i - 15]) + W[i - 16];
 8012630:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012634:	3b0f      	subs	r3, #15
 8012636:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 801263a:	00db      	lsls	r3, r3, #3
 801263c:	4413      	add	r3, r2
 801263e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012642:	07e1      	lsls	r1, r4, #31
 8012644:	085a      	lsrs	r2, r3, #1
 8012646:	430a      	orrs	r2, r1
 8012648:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 801264c:	07da      	lsls	r2, r3, #31
 801264e:	0863      	lsrs	r3, r4, #1
 8012650:	4313      	orrs	r3, r2
 8012652:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8012656:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801265a:	3b0f      	subs	r3, #15
 801265c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012660:	00db      	lsls	r3, r3, #3
 8012662:	4413      	add	r3, r2
 8012664:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012668:	0621      	lsls	r1, r4, #24
 801266a:	0a1a      	lsrs	r2, r3, #8
 801266c:	ea41 0a02 	orr.w	sl, r1, r2
 8012670:	061a      	lsls	r2, r3, #24
 8012672:	0a23      	lsrs	r3, r4, #8
 8012674:	ea42 0b03 	orr.w	fp, r2, r3
 8012678:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801267c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012680:	ea85 050a 	eor.w	r5, r5, sl
 8012684:	ea86 060b 	eor.w	r6, r6, fp
 8012688:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801268c:	3b0f      	subs	r3, #15
 801268e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012692:	00db      	lsls	r3, r3, #3
 8012694:	4413      	add	r3, r2
 8012696:	e9d3 3400 	ldrd	r3, r4, [r3]
 801269a:	f04f 0100 	mov.w	r1, #0
 801269e:	f04f 0200 	mov.w	r2, #0
 80126a2:	09d9      	lsrs	r1, r3, #7
 80126a4:	ea41 6144 	orr.w	r1, r1, r4, lsl #25
 80126a8:	09e2      	lsrs	r2, r4, #7
 80126aa:	ea85 0301 	eor.w	r3, r5, r1
 80126ae:	ea86 0402 	eor.w	r4, r6, r2
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80126b2:	eb18 0003 	adds.w	r0, r8, r3
 80126b6:	eb49 0104 	adc.w	r1, r9, r4
               S0(W[i - 15]) + W[i - 16];
 80126ba:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80126be:	3b10      	subs	r3, #16
 80126c0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80126c4:	00db      	lsls	r3, r3, #3
 80126c6:	4413      	add	r3, r2
 80126c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80126cc:	18c5      	adds	r5, r0, r3
 80126ce:	eb41 0604 	adc.w	r6, r1, r4
 80126d2:	4629      	mov	r1, r5
 80126d4:	4632      	mov	r2, r6
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80126d6:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 80126da:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80126de:	00db      	lsls	r3, r3, #3
 80126e0:	4403      	add	r3, r0
 80126e2:	e9c3 1200 	strd	r1, r2, [r3]
    for( ; i < 80; i++ )
 80126e6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80126ea:	3301      	adds	r3, #1
 80126ec:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80126f0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80126f4:	2b4f      	cmp	r3, #79	; 0x4f
 80126f6:	f77f af45 	ble.w	8012584 <mbedtls_internal_sha512_process+0x1a4>
    }

    A = ctx->state[0];
 80126fa:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012704:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8012708:	e9c2 3400 	strd	r3, r4, [r2]
    B = ctx->state[1];
 801270c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8012716:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 801271a:	e9c2 3400 	strd	r3, r4, [r2]
    C = ctx->state[2];
 801271e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8012728:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 801272c:	e9c2 3400 	strd	r3, r4, [r2]
    D = ctx->state[3];
 8012730:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 801273a:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 801273e:	e9c2 3400 	strd	r3, r4, [r2]
    E = ctx->state[4];
 8012742:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 801274c:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8012750:	e9c2 3400 	strd	r3, r4, [r2]
    F = ctx->state[5];
 8012754:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801275e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8012762:	e9c2 3400 	strd	r3, r4, [r2]
    G = ctx->state[6];
 8012766:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8012770:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8012774:	e9c2 3400 	strd	r3, r4, [r2]
    H = ctx->state[7];
 8012778:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8012782:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8012786:	e9c2 3400 	strd	r3, r4, [r2]
    i = 0;
 801278a:	2300      	movs	r3, #0
 801278c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 8012790:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8012794:	049a      	lsls	r2, r3, #18
 8012796:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 801279a:	0b9b      	lsrs	r3, r3, #14
 801279c:	4313      	orrs	r3, r2
 801279e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80127a2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80127a6:	049a      	lsls	r2, r3, #18
 80127a8:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80127ac:	0b9b      	lsrs	r3, r3, #14
 80127ae:	4313      	orrs	r3, r2
 80127b0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80127b4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80127b8:	039a      	lsls	r2, r3, #14
 80127ba:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80127be:	0c9b      	lsrs	r3, r3, #18
 80127c0:	4313      	orrs	r3, r2
 80127c2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80127c6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80127ca:	039a      	lsls	r2, r3, #14
 80127cc:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80127d0:	0c9b      	lsrs	r3, r3, #18
 80127d2:	4313      	orrs	r3, r2
 80127d4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80127d8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80127dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80127e0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80127e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80127e8:	ea80 0003 	eor.w	r0, r0, r3
 80127ec:	ea81 0104 	eor.w	r1, r1, r4
 80127f0:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80127f4:	0a5a      	lsrs	r2, r3, #9
 80127f6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80127fa:	05db      	lsls	r3, r3, #23
 80127fc:	4313      	orrs	r3, r2
 80127fe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8012802:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8012806:	0a5a      	lsrs	r2, r3, #9
 8012808:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 801280c:	05db      	lsls	r3, r3, #23
 801280e:	4313      	orrs	r3, r2
 8012810:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8012814:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8012818:	e9d3 3400 	ldrd	r3, r4, [r3]
 801281c:	ea83 0300 	eor.w	r3, r3, r0
 8012820:	ea84 0401 	eor.w	r4, r4, r1
 8012824:	4619      	mov	r1, r3
 8012826:	4622      	mov	r2, r4
 8012828:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801282c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012830:	18cd      	adds	r5, r1, r3
 8012832:	eb42 0604 	adc.w	r6, r2, r4
 8012836:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 801283a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801283e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8012842:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012846:	ea81 0803 	eor.w	r8, r1, r3
 801284a:	ea82 0904 	eor.w	r9, r2, r4
 801284e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8012852:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012856:	ea08 0103 	and.w	r1, r8, r3
 801285a:	ea09 0204 	and.w	r2, r9, r4
 801285e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8012862:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012866:	ea83 0801 	eor.w	r8, r3, r1
 801286a:	ea84 0902 	eor.w	r9, r4, r2
 801286e:	eb15 0a08 	adds.w	sl, r5, r8
 8012872:	eb46 0b09 	adc.w	fp, r6, r9
 8012876:	4ad5      	ldr	r2, [pc, #852]	; (8012bcc <mbedtls_internal_sha512_process+0x7ec>)
 8012878:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	4413      	add	r3, r2
 8012880:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012884:	eb1a 0003 	adds.w	r0, sl, r3
 8012888:	eb4b 0104 	adc.w	r1, fp, r4
 801288c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012890:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012894:	00db      	lsls	r3, r3, #3
 8012896:	4413      	add	r3, r2
 8012898:	e9d3 5600 	ldrd	r5, r6, [r3]
 801289c:	182b      	adds	r3, r5, r0
 801289e:	eb46 0401 	adc.w	r4, r6, r1
 80128a2:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80128a6:	e9c2 3400 	strd	r3, r4, [r2]
 80128aa:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80128ae:	011a      	lsls	r2, r3, #4
 80128b0:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80128b4:	0f1b      	lsrs	r3, r3, #28
 80128b6:	4313      	orrs	r3, r2
 80128b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80128bc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80128c0:	011a      	lsls	r2, r3, #4
 80128c2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80128c6:	0f1b      	lsrs	r3, r3, #28
 80128c8:	4313      	orrs	r3, r2
 80128ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80128ce:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80128d2:	089a      	lsrs	r2, r3, #2
 80128d4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80128d8:	079b      	lsls	r3, r3, #30
 80128da:	4313      	orrs	r3, r2
 80128dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80128e0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80128e4:	089a      	lsrs	r2, r3, #2
 80128e6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80128ea:	079b      	lsls	r3, r3, #30
 80128ec:	4313      	orrs	r3, r2
 80128ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80128f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80128f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80128fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80128fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012902:	ea80 0003 	eor.w	r0, r0, r3
 8012906:	ea81 0104 	eor.w	r1, r1, r4
 801290a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801290e:	09da      	lsrs	r2, r3, #7
 8012910:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8012914:	065b      	lsls	r3, r3, #25
 8012916:	4313      	orrs	r3, r2
 8012918:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801291c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8012920:	09da      	lsrs	r2, r3, #7
 8012922:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8012926:	065b      	lsls	r3, r3, #25
 8012928:	4313      	orrs	r3, r2
 801292a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801292e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8012932:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012936:	ea88 0800 	eor.w	r8, r8, r0
 801293a:	ea89 0901 	eor.w	r9, r9, r1
 801293e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8012942:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012946:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801294a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801294e:	ea01 0503 	and.w	r5, r1, r3
 8012952:	ea02 0604 	and.w	r6, r2, r4
 8012956:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801295a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801295e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8012962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012966:	ea41 0a03 	orr.w	sl, r1, r3
 801296a:	ea42 0b04 	orr.w	fp, r2, r4
 801296e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012972:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012976:	ea03 010a 	and.w	r1, r3, sl
 801297a:	ea04 020b 	and.w	r2, r4, fp
 801297e:	ea41 0a05 	orr.w	sl, r1, r5
 8012982:	ea42 0b06 	orr.w	fp, r2, r6
 8012986:	eb1a 0308 	adds.w	r3, sl, r8
 801298a:	eb4b 0409 	adc.w	r4, fp, r9
 801298e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8012992:	e9c2 3400 	strd	r3, r4, [r2]
 8012996:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 801299a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801299e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80129a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129a6:	185d      	adds	r5, r3, r1
 80129a8:	eb44 0602 	adc.w	r6, r4, r2
 80129ac:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80129b0:	e9c3 5600 	strd	r5, r6, [r3]
 80129b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80129b8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80129bc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80129c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129c4:	185d      	adds	r5, r3, r1
 80129c6:	eb44 0602 	adc.w	r6, r4, r2
 80129ca:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80129ce:	e9c3 5600 	strd	r5, r6, [r3]
 80129d2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80129d6:	3301      	adds	r3, #1
 80129d8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80129dc:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80129e0:	049a      	lsls	r2, r3, #18
 80129e2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80129e6:	0b9b      	lsrs	r3, r3, #14
 80129e8:	4313      	orrs	r3, r2
 80129ea:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80129ee:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80129f2:	049a      	lsls	r2, r3, #18
 80129f4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80129f8:	0b9b      	lsrs	r3, r3, #14
 80129fa:	4313      	orrs	r3, r2
 80129fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8012a00:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8012a04:	039a      	lsls	r2, r3, #14
 8012a06:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8012a0a:	0c9b      	lsrs	r3, r3, #18
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8012a12:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8012a16:	039a      	lsls	r2, r3, #14
 8012a18:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8012a1c:	0c9b      	lsrs	r3, r3, #18
 8012a1e:	4313      	orrs	r3, r2
 8012a20:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8012a24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8012a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012a30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a34:	ea80 0003 	eor.w	r0, r0, r3
 8012a38:	ea81 0104 	eor.w	r1, r1, r4
 8012a3c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8012a40:	0a5a      	lsrs	r2, r3, #9
 8012a42:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8012a46:	05db      	lsls	r3, r3, #23
 8012a48:	4313      	orrs	r3, r2
 8012a4a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8012a4e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8012a52:	0a5a      	lsrs	r2, r3, #9
 8012a54:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8012a58:	05db      	lsls	r3, r3, #23
 8012a5a:	4313      	orrs	r3, r2
 8012a5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012a60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a68:	ea83 0300 	eor.w	r3, r3, r0
 8012a6c:	ea84 0401 	eor.w	r4, r4, r1
 8012a70:	4619      	mov	r1, r3
 8012a72:	4622      	mov	r2, r4
 8012a74:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8012a78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a7c:	18cd      	adds	r5, r1, r3
 8012a7e:	eb42 0604 	adc.w	r6, r2, r4
 8012a82:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8012a86:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012a8a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8012a8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a92:	ea81 0803 	eor.w	r8, r1, r3
 8012a96:	ea82 0904 	eor.w	r9, r2, r4
 8012a9a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8012a9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012aa2:	ea08 0103 	and.w	r1, r8, r3
 8012aa6:	ea09 0204 	and.w	r2, r9, r4
 8012aaa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8012aae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ab2:	ea83 0801 	eor.w	r8, r3, r1
 8012ab6:	ea84 0902 	eor.w	r9, r4, r2
 8012aba:	eb15 0a08 	adds.w	sl, r5, r8
 8012abe:	eb46 0b09 	adc.w	fp, r6, r9
 8012ac2:	4a42      	ldr	r2, [pc, #264]	; (8012bcc <mbedtls_internal_sha512_process+0x7ec>)
 8012ac4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012ac8:	00db      	lsls	r3, r3, #3
 8012aca:	4413      	add	r3, r2
 8012acc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ad0:	eb1a 0003 	adds.w	r0, sl, r3
 8012ad4:	eb4b 0104 	adc.w	r1, fp, r4
 8012ad8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012adc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012ae0:	00db      	lsls	r3, r3, #3
 8012ae2:	4413      	add	r3, r2
 8012ae4:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012ae8:	182b      	adds	r3, r5, r0
 8012aea:	eb46 0401 	adc.w	r4, r6, r1
 8012aee:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8012af2:	e9c2 3400 	strd	r3, r4, [r2]
 8012af6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8012afa:	011a      	lsls	r2, r3, #4
 8012afc:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8012b00:	0f1b      	lsrs	r3, r3, #28
 8012b02:	4313      	orrs	r3, r2
 8012b04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012b08:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8012b0c:	011a      	lsls	r2, r3, #4
 8012b0e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8012b12:	0f1b      	lsrs	r3, r3, #28
 8012b14:	4313      	orrs	r3, r2
 8012b16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8012b1a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8012b1e:	089a      	lsrs	r2, r3, #2
 8012b20:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8012b24:	079b      	lsls	r3, r3, #30
 8012b26:	4313      	orrs	r3, r2
 8012b28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012b2c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8012b30:	089a      	lsrs	r2, r3, #2
 8012b32:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8012b36:	079b      	lsls	r3, r3, #30
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012b46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012b4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b4e:	ea80 0003 	eor.w	r0, r0, r3
 8012b52:	ea81 0104 	eor.w	r1, r1, r4
 8012b56:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8012b5a:	09da      	lsrs	r2, r3, #7
 8012b5c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8012b60:	065b      	lsls	r3, r3, #25
 8012b62:	4313      	orrs	r3, r2
 8012b64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8012b68:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8012b6c:	09da      	lsrs	r2, r3, #7
 8012b6e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8012b72:	065b      	lsls	r3, r3, #25
 8012b74:	4313      	orrs	r3, r2
 8012b76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012b7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012b7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b82:	ea88 0800 	eor.w	r8, r8, r0
 8012b86:	ea89 0901 	eor.w	r9, r9, r1
 8012b8a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8012b8e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012b92:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8012b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b9a:	ea01 0503 	and.w	r5, r1, r3
 8012b9e:	ea02 0604 	and.w	r6, r2, r4
 8012ba2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8012ba6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012baa:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8012bae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012bb2:	ea41 0a03 	orr.w	sl, r1, r3
 8012bb6:	ea42 0b04 	orr.w	fp, r2, r4
 8012bba:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8012bbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012bc2:	ea03 010a 	and.w	r1, r3, sl
 8012bc6:	ea04 020b 	and.w	r2, r4, fp
 8012bca:	e001      	b.n	8012bd0 <mbedtls_internal_sha512_process+0x7f0>
 8012bcc:	08019c90 	.word	0x08019c90
 8012bd0:	ea41 0a05 	orr.w	sl, r1, r5
 8012bd4:	ea42 0b06 	orr.w	fp, r2, r6
 8012bd8:	eb1a 0308 	adds.w	r3, sl, r8
 8012bdc:	eb4b 0409 	adc.w	r4, fp, r9
 8012be0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8012be4:	e9c2 3400 	strd	r3, r4, [r2]
 8012be8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012bec:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012bf0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8012bf4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012bf8:	185d      	adds	r5, r3, r1
 8012bfa:	eb44 0602 	adc.w	r6, r4, r2
 8012bfe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c02:	e9c3 5600 	strd	r5, r6, [r3]
 8012c06:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8012c0a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012c0e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8012c12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012c16:	185d      	adds	r5, r3, r1
 8012c18:	eb44 0602 	adc.w	r6, r4, r2
 8012c1c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8012c20:	e9c3 5600 	strd	r5, r6, [r3]
 8012c24:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012c28:	3301      	adds	r3, #1
 8012c2a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 8012c2e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8012c32:	049a      	lsls	r2, r3, #18
 8012c34:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8012c38:	0b9b      	lsrs	r3, r3, #14
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012c40:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8012c44:	049a      	lsls	r2, r3, #18
 8012c46:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8012c4a:	0b9b      	lsrs	r3, r3, #14
 8012c4c:	4313      	orrs	r3, r2
 8012c4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8012c52:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8012c56:	039a      	lsls	r2, r3, #14
 8012c58:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8012c5c:	0c9b      	lsrs	r3, r3, #18
 8012c5e:	4313      	orrs	r3, r2
 8012c60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8012c64:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8012c68:	039a      	lsls	r2, r3, #14
 8012c6a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8012c6e:	0c9b      	lsrs	r3, r3, #18
 8012c70:	4313      	orrs	r3, r2
 8012c72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012c76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012c86:	ea80 0003 	eor.w	r0, r0, r3
 8012c8a:	ea81 0104 	eor.w	r1, r1, r4
 8012c8e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8012c92:	0a5a      	lsrs	r2, r3, #9
 8012c94:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8012c98:	05db      	lsls	r3, r3, #23
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012ca0:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8012ca4:	0a5a      	lsrs	r2, r3, #9
 8012ca6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8012caa:	05db      	lsls	r3, r3, #23
 8012cac:	4313      	orrs	r3, r2
 8012cae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012cba:	ea83 0300 	eor.w	r3, r3, r0
 8012cbe:	ea84 0401 	eor.w	r4, r4, r1
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	4622      	mov	r2, r4
 8012cc6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8012cca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012cce:	18cd      	adds	r5, r1, r3
 8012cd0:	eb42 0604 	adc.w	r6, r2, r4
 8012cd4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8012cd8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012cdc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8012ce0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ce4:	ea81 0803 	eor.w	r8, r1, r3
 8012ce8:	ea82 0904 	eor.w	r9, r2, r4
 8012cec:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012cf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012cf4:	ea08 0103 	and.w	r1, r8, r3
 8012cf8:	ea09 0204 	and.w	r2, r9, r4
 8012cfc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8012d00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012d04:	ea83 0801 	eor.w	r8, r3, r1
 8012d08:	ea84 0902 	eor.w	r9, r4, r2
 8012d0c:	eb15 0a08 	adds.w	sl, r5, r8
 8012d10:	eb46 0b09 	adc.w	fp, r6, r9
 8012d14:	4ad4      	ldr	r2, [pc, #848]	; (8013068 <mbedtls_internal_sha512_process+0xc88>)
 8012d16:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012d1a:	00db      	lsls	r3, r3, #3
 8012d1c:	4413      	add	r3, r2
 8012d1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012d22:	eb1a 0003 	adds.w	r0, sl, r3
 8012d26:	eb4b 0104 	adc.w	r1, fp, r4
 8012d2a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012d2e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012d32:	00db      	lsls	r3, r3, #3
 8012d34:	4413      	add	r3, r2
 8012d36:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012d3a:	182b      	adds	r3, r5, r0
 8012d3c:	eb46 0401 	adc.w	r4, r6, r1
 8012d40:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8012d44:	e9c2 3400 	strd	r3, r4, [r2]
 8012d48:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8012d4c:	011a      	lsls	r2, r3, #4
 8012d4e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8012d52:	0f1b      	lsrs	r3, r3, #28
 8012d54:	4313      	orrs	r3, r2
 8012d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012d5a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8012d5e:	011a      	lsls	r2, r3, #4
 8012d60:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8012d64:	0f1b      	lsrs	r3, r3, #28
 8012d66:	4313      	orrs	r3, r2
 8012d68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012d6c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8012d70:	089a      	lsrs	r2, r3, #2
 8012d72:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8012d76:	079b      	lsls	r3, r3, #30
 8012d78:	4313      	orrs	r3, r2
 8012d7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012d7e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8012d82:	089a      	lsrs	r2, r3, #2
 8012d84:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8012d88:	079b      	lsls	r3, r3, #30
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012d90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8012d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012d98:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8012d9c:	ea80 0003 	eor.w	r0, r0, r3
 8012da0:	ea81 0104 	eor.w	r1, r1, r4
 8012da4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8012da8:	09da      	lsrs	r2, r3, #7
 8012daa:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8012dae:	065b      	lsls	r3, r3, #25
 8012db0:	4313      	orrs	r3, r2
 8012db2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012db6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8012dba:	09da      	lsrs	r2, r3, #7
 8012dbc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8012dc0:	065b      	lsls	r3, r3, #25
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012dc8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8012dcc:	ea88 0800 	eor.w	r8, r8, r0
 8012dd0:	ea89 0901 	eor.w	r9, r9, r1
 8012dd4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8012dd8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012ddc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8012de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012de4:	ea01 0503 	and.w	r5, r1, r3
 8012de8:	ea02 0604 	and.w	r6, r2, r4
 8012dec:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8012df0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012df4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8012df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012dfc:	ea41 0a03 	orr.w	sl, r1, r3
 8012e00:	ea42 0b04 	orr.w	fp, r2, r4
 8012e04:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8012e08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e0c:	ea03 010a 	and.w	r1, r3, sl
 8012e10:	ea04 020b 	and.w	r2, r4, fp
 8012e14:	ea41 0a05 	orr.w	sl, r1, r5
 8012e18:	ea42 0b06 	orr.w	fp, r2, r6
 8012e1c:	eb1a 0308 	adds.w	r3, sl, r8
 8012e20:	eb4b 0409 	adc.w	r4, fp, r9
 8012e24:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8012e28:	e9c2 3400 	strd	r3, r4, [r2]
 8012e2c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8012e30:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012e34:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8012e38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e3c:	185d      	adds	r5, r3, r1
 8012e3e:	eb44 0602 	adc.w	r6, r4, r2
 8012e42:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8012e46:	e9c3 5600 	strd	r5, r6, [r3]
 8012e4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8012e4e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012e52:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8012e56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e5a:	185d      	adds	r5, r3, r1
 8012e5c:	eb44 0602 	adc.w	r6, r4, r2
 8012e60:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8012e64:	e9c3 5600 	strd	r5, r6, [r3]
 8012e68:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 8012e72:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8012e76:	049a      	lsls	r2, r3, #18
 8012e78:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8012e7c:	0b9b      	lsrs	r3, r3, #14
 8012e7e:	4313      	orrs	r3, r2
 8012e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012e84:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8012e88:	049a      	lsls	r2, r3, #18
 8012e8a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8012e8e:	0b9b      	lsrs	r3, r3, #14
 8012e90:	4313      	orrs	r3, r2
 8012e92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012e96:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8012e9a:	039a      	lsls	r2, r3, #14
 8012e9c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8012ea0:	0c9b      	lsrs	r3, r3, #18
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012ea8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8012eac:	039a      	lsls	r2, r3, #14
 8012eae:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8012eb2:	0c9b      	lsrs	r3, r3, #18
 8012eb4:	4313      	orrs	r3, r2
 8012eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012eba:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8012ebe:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8012ec2:	ea80 0003 	eor.w	r0, r0, r3
 8012ec6:	ea81 0104 	eor.w	r1, r1, r4
 8012eca:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8012ece:	0a5a      	lsrs	r2, r3, #9
 8012ed0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8012ed4:	05db      	lsls	r3, r3, #23
 8012ed6:	4313      	orrs	r3, r2
 8012ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012edc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8012ee0:	0a5a      	lsrs	r2, r3, #9
 8012ee2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8012ee6:	05db      	lsls	r3, r3, #23
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012eee:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8012ef2:	ea83 0300 	eor.w	r3, r3, r0
 8012ef6:	ea84 0401 	eor.w	r4, r4, r1
 8012efa:	4619      	mov	r1, r3
 8012efc:	4622      	mov	r2, r4
 8012efe:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8012f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f06:	18cd      	adds	r5, r1, r3
 8012f08:	eb42 0604 	adc.w	r6, r2, r4
 8012f0c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012f10:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012f14:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8012f18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f1c:	ea81 0803 	eor.w	r8, r1, r3
 8012f20:	ea82 0904 	eor.w	r9, r2, r4
 8012f24:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8012f28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f2c:	ea08 0103 	and.w	r1, r8, r3
 8012f30:	ea09 0204 	and.w	r2, r9, r4
 8012f34:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8012f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f3c:	ea83 0801 	eor.w	r8, r3, r1
 8012f40:	ea84 0902 	eor.w	r9, r4, r2
 8012f44:	eb15 0a08 	adds.w	sl, r5, r8
 8012f48:	eb46 0b09 	adc.w	fp, r6, r9
 8012f4c:	4a46      	ldr	r2, [pc, #280]	; (8013068 <mbedtls_internal_sha512_process+0xc88>)
 8012f4e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012f52:	00db      	lsls	r3, r3, #3
 8012f54:	4413      	add	r3, r2
 8012f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f5a:	eb1a 0003 	adds.w	r0, sl, r3
 8012f5e:	eb4b 0104 	adc.w	r1, fp, r4
 8012f62:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012f66:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012f6a:	00db      	lsls	r3, r3, #3
 8012f6c:	4413      	add	r3, r2
 8012f6e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012f72:	182b      	adds	r3, r5, r0
 8012f74:	eb46 0401 	adc.w	r4, r6, r1
 8012f78:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8012f7c:	e9c2 3400 	strd	r3, r4, [r2]
 8012f80:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8012f84:	011a      	lsls	r2, r3, #4
 8012f86:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8012f8a:	0f1b      	lsrs	r3, r3, #28
 8012f8c:	4313      	orrs	r3, r2
 8012f8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012f92:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8012f96:	011a      	lsls	r2, r3, #4
 8012f98:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8012f9c:	0f1b      	lsrs	r3, r3, #28
 8012f9e:	4313      	orrs	r3, r2
 8012fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012fa4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8012fa8:	089a      	lsrs	r2, r3, #2
 8012faa:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8012fae:	079b      	lsls	r3, r3, #30
 8012fb0:	4313      	orrs	r3, r2
 8012fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012fb6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8012fba:	089a      	lsrs	r2, r3, #2
 8012fbc:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8012fc0:	079b      	lsls	r3, r3, #30
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012fc8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8012fcc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8012fd0:	ea80 0003 	eor.w	r0, r0, r3
 8012fd4:	ea81 0104 	eor.w	r1, r1, r4
 8012fd8:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8012fdc:	09da      	lsrs	r2, r3, #7
 8012fde:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8012fe2:	065b      	lsls	r3, r3, #25
 8012fe4:	4313      	orrs	r3, r2
 8012fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012fea:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8012fee:	09da      	lsrs	r2, r3, #7
 8012ff0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8012ff4:	065b      	lsls	r3, r3, #25
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012ffc:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8013000:	ea88 0800 	eor.w	r8, r8, r0
 8013004:	ea89 0901 	eor.w	r9, r9, r1
 8013008:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 801300c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013010:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8013014:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013018:	ea01 0503 	and.w	r5, r1, r3
 801301c:	ea02 0604 	and.w	r6, r2, r4
 8013020:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8013024:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013028:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 801302c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013030:	ea41 0a03 	orr.w	sl, r1, r3
 8013034:	ea42 0b04 	orr.w	fp, r2, r4
 8013038:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801303c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013040:	ea03 010a 	and.w	r1, r3, sl
 8013044:	ea04 020b 	and.w	r2, r4, fp
 8013048:	ea41 0a05 	orr.w	sl, r1, r5
 801304c:	ea42 0b06 	orr.w	fp, r2, r6
 8013050:	eb1a 0308 	adds.w	r3, sl, r8
 8013054:	eb4b 0409 	adc.w	r4, fp, r9
 8013058:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 801305c:	e9c2 3400 	strd	r3, r4, [r2]
 8013060:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8013064:	e002      	b.n	801306c <mbedtls_internal_sha512_process+0xc8c>
 8013066:	bf00      	nop
 8013068:	08019c90 	.word	0x08019c90
 801306c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013070:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8013074:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013078:	185d      	adds	r5, r3, r1
 801307a:	eb44 0602 	adc.w	r6, r4, r2
 801307e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8013082:	e9c3 5600 	strd	r5, r6, [r3]
 8013086:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801308a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801308e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8013092:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013096:	185d      	adds	r5, r3, r1
 8013098:	eb44 0602 	adc.w	r6, r4, r2
 801309c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80130a0:	e9c3 5600 	strd	r5, r6, [r3]
 80130a4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80130a8:	3301      	adds	r3, #1
 80130aa:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 80130ae:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80130b2:	049a      	lsls	r2, r3, #18
 80130b4:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80130b8:	0b9b      	lsrs	r3, r3, #14
 80130ba:	4313      	orrs	r3, r2
 80130bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80130c0:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80130c4:	049a      	lsls	r2, r3, #18
 80130c6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80130ca:	0b9b      	lsrs	r3, r3, #14
 80130cc:	4313      	orrs	r3, r2
 80130ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80130d2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80130d6:	039a      	lsls	r2, r3, #14
 80130d8:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80130dc:	0c9b      	lsrs	r3, r3, #18
 80130de:	4313      	orrs	r3, r2
 80130e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80130e4:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80130e8:	039a      	lsls	r2, r3, #14
 80130ea:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80130ee:	0c9b      	lsrs	r3, r3, #18
 80130f0:	4313      	orrs	r3, r2
 80130f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80130f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80130fa:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80130fe:	ea80 0003 	eor.w	r0, r0, r3
 8013102:	ea81 0104 	eor.w	r1, r1, r4
 8013106:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801310a:	0a5a      	lsrs	r2, r3, #9
 801310c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8013110:	05db      	lsls	r3, r3, #23
 8013112:	4313      	orrs	r3, r2
 8013114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013118:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801311c:	0a5a      	lsrs	r2, r3, #9
 801311e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8013122:	05db      	lsls	r3, r3, #23
 8013124:	4313      	orrs	r3, r2
 8013126:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801312a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 801312e:	ea83 0300 	eor.w	r3, r3, r0
 8013132:	ea84 0401 	eor.w	r4, r4, r1
 8013136:	4619      	mov	r1, r3
 8013138:	4622      	mov	r2, r4
 801313a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 801313e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013142:	18cd      	adds	r5, r1, r3
 8013144:	eb42 0604 	adc.w	r6, r2, r4
 8013148:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801314c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013150:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8013154:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013158:	ea81 0803 	eor.w	r8, r1, r3
 801315c:	ea82 0904 	eor.w	r9, r2, r4
 8013160:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8013164:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013168:	ea08 0103 	and.w	r1, r8, r3
 801316c:	ea09 0204 	and.w	r2, r9, r4
 8013170:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8013174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013178:	ea83 0801 	eor.w	r8, r3, r1
 801317c:	ea84 0902 	eor.w	r9, r4, r2
 8013180:	eb15 0a08 	adds.w	sl, r5, r8
 8013184:	eb46 0b09 	adc.w	fp, r6, r9
 8013188:	4acf      	ldr	r2, [pc, #828]	; (80134c8 <mbedtls_internal_sha512_process+0x10e8>)
 801318a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801318e:	00db      	lsls	r3, r3, #3
 8013190:	4413      	add	r3, r2
 8013192:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013196:	eb1a 0003 	adds.w	r0, sl, r3
 801319a:	eb4b 0104 	adc.w	r1, fp, r4
 801319e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80131a2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80131a6:	00db      	lsls	r3, r3, #3
 80131a8:	4413      	add	r3, r2
 80131aa:	e9d3 5600 	ldrd	r5, r6, [r3]
 80131ae:	182b      	adds	r3, r5, r0
 80131b0:	eb46 0401 	adc.w	r4, r6, r1
 80131b4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80131b8:	e9c2 3400 	strd	r3, r4, [r2]
 80131bc:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80131c0:	011a      	lsls	r2, r3, #4
 80131c2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80131c6:	0f1b      	lsrs	r3, r3, #28
 80131c8:	4313      	orrs	r3, r2
 80131ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80131ce:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80131d2:	011a      	lsls	r2, r3, #4
 80131d4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80131d8:	0f1b      	lsrs	r3, r3, #28
 80131da:	4313      	orrs	r3, r2
 80131dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80131e0:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80131e4:	089a      	lsrs	r2, r3, #2
 80131e6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80131ea:	079b      	lsls	r3, r3, #30
 80131ec:	4313      	orrs	r3, r2
 80131ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80131f2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80131f6:	089a      	lsrs	r2, r3, #2
 80131f8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80131fc:	079b      	lsls	r3, r3, #30
 80131fe:	4313      	orrs	r3, r2
 8013200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013204:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8013208:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 801320c:	ea80 0003 	eor.w	r0, r0, r3
 8013210:	ea81 0104 	eor.w	r1, r1, r4
 8013214:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8013218:	09da      	lsrs	r2, r3, #7
 801321a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801321e:	065b      	lsls	r3, r3, #25
 8013220:	4313      	orrs	r3, r2
 8013222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013226:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801322a:	09da      	lsrs	r2, r3, #7
 801322c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8013230:	065b      	lsls	r3, r3, #25
 8013232:	4313      	orrs	r3, r2
 8013234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013238:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 801323c:	ea88 0800 	eor.w	r8, r8, r0
 8013240:	ea89 0901 	eor.w	r9, r9, r1
 8013244:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8013248:	e9d3 1200 	ldrd	r1, r2, [r3]
 801324c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8013250:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013254:	ea01 0503 	and.w	r5, r1, r3
 8013258:	ea02 0604 	and.w	r6, r2, r4
 801325c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8013260:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013264:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8013268:	e9d3 3400 	ldrd	r3, r4, [r3]
 801326c:	ea41 0a03 	orr.w	sl, r1, r3
 8013270:	ea42 0b04 	orr.w	fp, r2, r4
 8013274:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8013278:	e9d3 3400 	ldrd	r3, r4, [r3]
 801327c:	ea03 010a 	and.w	r1, r3, sl
 8013280:	ea04 020b 	and.w	r2, r4, fp
 8013284:	ea41 0a05 	orr.w	sl, r1, r5
 8013288:	ea42 0b06 	orr.w	fp, r2, r6
 801328c:	eb1a 0308 	adds.w	r3, sl, r8
 8013290:	eb4b 0409 	adc.w	r4, fp, r9
 8013294:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8013298:	e9c2 3400 	strd	r3, r4, [r2]
 801329c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80132a0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80132a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80132a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80132ac:	185d      	adds	r5, r3, r1
 80132ae:	eb44 0602 	adc.w	r6, r4, r2
 80132b2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80132b6:	e9c3 5600 	strd	r5, r6, [r3]
 80132ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80132be:	e9d3 1200 	ldrd	r1, r2, [r3]
 80132c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80132c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80132ca:	185d      	adds	r5, r3, r1
 80132cc:	eb44 0602 	adc.w	r6, r4, r2
 80132d0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80132d4:	e9c3 5600 	strd	r5, r6, [r3]
 80132d8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80132dc:	3301      	adds	r3, #1
 80132de:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80132e2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80132e6:	049a      	lsls	r2, r3, #18
 80132e8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80132ec:	0b9b      	lsrs	r3, r3, #14
 80132ee:	4313      	orrs	r3, r2
 80132f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80132f4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80132f8:	049a      	lsls	r2, r3, #18
 80132fa:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80132fe:	0b9b      	lsrs	r3, r3, #14
 8013300:	4313      	orrs	r3, r2
 8013302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013306:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 801330a:	039a      	lsls	r2, r3, #14
 801330c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8013310:	0c9b      	lsrs	r3, r3, #18
 8013312:	4313      	orrs	r3, r2
 8013314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013318:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 801331c:	039a      	lsls	r2, r3, #14
 801331e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8013322:	0c9b      	lsrs	r3, r3, #18
 8013324:	4313      	orrs	r3, r2
 8013326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801332a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801332e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8013332:	ea80 0003 	eor.w	r0, r0, r3
 8013336:	ea81 0104 	eor.w	r1, r1, r4
 801333a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 801333e:	0a5a      	lsrs	r2, r3, #9
 8013340:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8013344:	05db      	lsls	r3, r3, #23
 8013346:	4313      	orrs	r3, r2
 8013348:	67fb      	str	r3, [r7, #124]	; 0x7c
 801334a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 801334e:	0a5a      	lsrs	r2, r3, #9
 8013350:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8013354:	05db      	lsls	r3, r3, #23
 8013356:	4313      	orrs	r3, r2
 8013358:	67bb      	str	r3, [r7, #120]	; 0x78
 801335a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 801335e:	ea83 0300 	eor.w	r3, r3, r0
 8013362:	ea84 0401 	eor.w	r4, r4, r1
 8013366:	4619      	mov	r1, r3
 8013368:	4622      	mov	r2, r4
 801336a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 801336e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013372:	18cd      	adds	r5, r1, r3
 8013374:	eb42 0604 	adc.w	r6, r2, r4
 8013378:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801337c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013380:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8013384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013388:	ea81 0803 	eor.w	r8, r1, r3
 801338c:	ea82 0904 	eor.w	r9, r2, r4
 8013390:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8013394:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013398:	ea08 0103 	and.w	r1, r8, r3
 801339c:	ea09 0204 	and.w	r2, r9, r4
 80133a0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80133a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80133a8:	ea83 0801 	eor.w	r8, r3, r1
 80133ac:	ea84 0902 	eor.w	r9, r4, r2
 80133b0:	eb15 0a08 	adds.w	sl, r5, r8
 80133b4:	eb46 0b09 	adc.w	fp, r6, r9
 80133b8:	4a43      	ldr	r2, [pc, #268]	; (80134c8 <mbedtls_internal_sha512_process+0x10e8>)
 80133ba:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80133be:	00db      	lsls	r3, r3, #3
 80133c0:	4413      	add	r3, r2
 80133c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80133c6:	eb1a 0003 	adds.w	r0, sl, r3
 80133ca:	eb4b 0104 	adc.w	r1, fp, r4
 80133ce:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80133d2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	4413      	add	r3, r2
 80133da:	e9d3 5600 	ldrd	r5, r6, [r3]
 80133de:	182b      	adds	r3, r5, r0
 80133e0:	eb46 0401 	adc.w	r4, r6, r1
 80133e4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80133e8:	e9c2 3400 	strd	r3, r4, [r2]
 80133ec:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80133f0:	011a      	lsls	r2, r3, #4
 80133f2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80133f6:	0f1b      	lsrs	r3, r3, #28
 80133f8:	4313      	orrs	r3, r2
 80133fa:	673b      	str	r3, [r7, #112]	; 0x70
 80133fc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8013400:	011a      	lsls	r2, r3, #4
 8013402:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8013406:	0f1b      	lsrs	r3, r3, #28
 8013408:	4313      	orrs	r3, r2
 801340a:	677b      	str	r3, [r7, #116]	; 0x74
 801340c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8013410:	089a      	lsrs	r2, r3, #2
 8013412:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8013416:	079b      	lsls	r3, r3, #30
 8013418:	4313      	orrs	r3, r2
 801341a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801341c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8013420:	089a      	lsrs	r2, r3, #2
 8013422:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8013426:	079b      	lsls	r3, r3, #30
 8013428:	4313      	orrs	r3, r2
 801342a:	66bb      	str	r3, [r7, #104]	; 0x68
 801342c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8013430:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8013434:	ea80 0003 	eor.w	r0, r0, r3
 8013438:	ea81 0104 	eor.w	r1, r1, r4
 801343c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8013440:	09da      	lsrs	r2, r3, #7
 8013442:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8013446:	065b      	lsls	r3, r3, #25
 8013448:	4313      	orrs	r3, r2
 801344a:	667b      	str	r3, [r7, #100]	; 0x64
 801344c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8013450:	09da      	lsrs	r2, r3, #7
 8013452:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8013456:	065b      	lsls	r3, r3, #25
 8013458:	4313      	orrs	r3, r2
 801345a:	663b      	str	r3, [r7, #96]	; 0x60
 801345c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013460:	ea88 0800 	eor.w	r8, r8, r0
 8013464:	ea89 0901 	eor.w	r9, r9, r1
 8013468:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 801346c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013470:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8013474:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013478:	ea01 0503 	and.w	r5, r1, r3
 801347c:	ea02 0604 	and.w	r6, r2, r4
 8013480:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8013484:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013488:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801348c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013490:	ea41 0a03 	orr.w	sl, r1, r3
 8013494:	ea42 0b04 	orr.w	fp, r2, r4
 8013498:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 801349c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134a0:	ea03 010a 	and.w	r1, r3, sl
 80134a4:	ea04 020b 	and.w	r2, r4, fp
 80134a8:	ea41 0a05 	orr.w	sl, r1, r5
 80134ac:	ea42 0b06 	orr.w	fp, r2, r6
 80134b0:	eb1a 0308 	adds.w	r3, sl, r8
 80134b4:	eb4b 0409 	adc.w	r4, fp, r9
 80134b8:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80134bc:	e9c2 3400 	strd	r3, r4, [r2]
 80134c0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80134c4:	e002      	b.n	80134cc <mbedtls_internal_sha512_process+0x10ec>
 80134c6:	bf00      	nop
 80134c8:	08019c90 	.word	0x08019c90
 80134cc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80134d0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80134d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134d8:	185d      	adds	r5, r3, r1
 80134da:	eb44 0602 	adc.w	r6, r4, r2
 80134de:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80134e2:	e9c3 5600 	strd	r5, r6, [r3]
 80134e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80134ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80134ee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80134f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134f6:	185d      	adds	r5, r3, r1
 80134f8:	eb44 0602 	adc.w	r6, r4, r2
 80134fc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8013500:	e9c3 5600 	strd	r5, r6, [r3]
 8013504:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013508:	3301      	adds	r3, #1
 801350a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 801350e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8013512:	049a      	lsls	r2, r3, #18
 8013514:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013518:	0b9b      	lsrs	r3, r3, #14
 801351a:	4313      	orrs	r3, r2
 801351c:	65bb      	str	r3, [r7, #88]	; 0x58
 801351e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013522:	049a      	lsls	r2, r3, #18
 8013524:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8013528:	0b9b      	lsrs	r3, r3, #14
 801352a:	4313      	orrs	r3, r2
 801352c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801352e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8013532:	039a      	lsls	r2, r3, #14
 8013534:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013538:	0c9b      	lsrs	r3, r3, #18
 801353a:	4313      	orrs	r3, r2
 801353c:	653b      	str	r3, [r7, #80]	; 0x50
 801353e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013542:	039a      	lsls	r2, r3, #14
 8013544:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8013548:	0c9b      	lsrs	r3, r3, #18
 801354a:	4313      	orrs	r3, r2
 801354c:	657b      	str	r3, [r7, #84]	; 0x54
 801354e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8013552:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8013556:	ea80 0003 	eor.w	r0, r0, r3
 801355a:	ea81 0104 	eor.w	r1, r1, r4
 801355e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013562:	0a5a      	lsrs	r2, r3, #9
 8013564:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8013568:	05db      	lsls	r3, r3, #23
 801356a:	4313      	orrs	r3, r2
 801356c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801356e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8013572:	0a5a      	lsrs	r2, r3, #9
 8013574:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013578:	05db      	lsls	r3, r3, #23
 801357a:	4313      	orrs	r3, r2
 801357c:	64bb      	str	r3, [r7, #72]	; 0x48
 801357e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013582:	ea83 0300 	eor.w	r3, r3, r0
 8013586:	ea84 0401 	eor.w	r4, r4, r1
 801358a:	4619      	mov	r1, r3
 801358c:	4622      	mov	r2, r4
 801358e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8013592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013596:	18cd      	adds	r5, r1, r3
 8013598:	eb42 0604 	adc.w	r6, r2, r4
 801359c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80135a0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80135a4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80135a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80135ac:	ea81 0803 	eor.w	r8, r1, r3
 80135b0:	ea82 0904 	eor.w	r9, r2, r4
 80135b4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80135b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80135bc:	ea08 0103 	and.w	r1, r8, r3
 80135c0:	ea09 0204 	and.w	r2, r9, r4
 80135c4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80135c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80135cc:	ea83 0801 	eor.w	r8, r3, r1
 80135d0:	ea84 0902 	eor.w	r9, r4, r2
 80135d4:	eb15 0a08 	adds.w	sl, r5, r8
 80135d8:	eb46 0b09 	adc.w	fp, r6, r9
 80135dc:	4aca      	ldr	r2, [pc, #808]	; (8013908 <mbedtls_internal_sha512_process+0x1528>)
 80135de:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135e2:	00db      	lsls	r3, r3, #3
 80135e4:	4413      	add	r3, r2
 80135e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80135ea:	eb1a 0003 	adds.w	r0, sl, r3
 80135ee:	eb4b 0104 	adc.w	r1, fp, r4
 80135f2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80135f6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135fa:	00db      	lsls	r3, r3, #3
 80135fc:	4413      	add	r3, r2
 80135fe:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013602:	182b      	adds	r3, r5, r0
 8013604:	eb46 0401 	adc.w	r4, r6, r1
 8013608:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 801360c:	e9c2 3400 	strd	r3, r4, [r2]
 8013610:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8013614:	011a      	lsls	r2, r3, #4
 8013616:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801361a:	0f1b      	lsrs	r3, r3, #28
 801361c:	4313      	orrs	r3, r2
 801361e:	643b      	str	r3, [r7, #64]	; 0x40
 8013620:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8013624:	011a      	lsls	r2, r3, #4
 8013626:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801362a:	0f1b      	lsrs	r3, r3, #28
 801362c:	4313      	orrs	r3, r2
 801362e:	647b      	str	r3, [r7, #68]	; 0x44
 8013630:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8013634:	089a      	lsrs	r2, r3, #2
 8013636:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801363a:	079b      	lsls	r3, r3, #30
 801363c:	4313      	orrs	r3, r2
 801363e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013640:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8013644:	089a      	lsrs	r2, r3, #2
 8013646:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801364a:	079b      	lsls	r3, r3, #30
 801364c:	4313      	orrs	r3, r2
 801364e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013650:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8013654:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8013658:	ea80 0003 	eor.w	r0, r0, r3
 801365c:	ea81 0104 	eor.w	r1, r1, r4
 8013660:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8013664:	09da      	lsrs	r2, r3, #7
 8013666:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801366a:	065b      	lsls	r3, r3, #25
 801366c:	4313      	orrs	r3, r2
 801366e:	637b      	str	r3, [r7, #52]	; 0x34
 8013670:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8013674:	09da      	lsrs	r2, r3, #7
 8013676:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801367a:	065b      	lsls	r3, r3, #25
 801367c:	4313      	orrs	r3, r2
 801367e:	633b      	str	r3, [r7, #48]	; 0x30
 8013680:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8013684:	ea88 0800 	eor.w	r8, r8, r0
 8013688:	ea89 0901 	eor.w	r9, r9, r1
 801368c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8013690:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013694:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8013698:	e9d3 3400 	ldrd	r3, r4, [r3]
 801369c:	ea01 0503 	and.w	r5, r1, r3
 80136a0:	ea02 0604 	and.w	r6, r2, r4
 80136a4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80136a8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80136ac:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80136b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80136b4:	ea41 0a03 	orr.w	sl, r1, r3
 80136b8:	ea42 0b04 	orr.w	fp, r2, r4
 80136bc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80136c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80136c4:	ea03 010a 	and.w	r1, r3, sl
 80136c8:	ea04 020b 	and.w	r2, r4, fp
 80136cc:	ea41 0a05 	orr.w	sl, r1, r5
 80136d0:	ea42 0b06 	orr.w	fp, r2, r6
 80136d4:	eb1a 0308 	adds.w	r3, sl, r8
 80136d8:	eb4b 0409 	adc.w	r4, fp, r9
 80136dc:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80136e0:	e9c2 3400 	strd	r3, r4, [r2]
 80136e4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80136e8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80136ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80136f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80136f4:	185d      	adds	r5, r3, r1
 80136f6:	eb44 0602 	adc.w	r6, r4, r2
 80136fa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80136fe:	e9c3 5600 	strd	r5, r6, [r3]
 8013702:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8013706:	e9d3 1200 	ldrd	r1, r2, [r3]
 801370a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 801370e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013712:	185d      	adds	r5, r3, r1
 8013714:	eb44 0602 	adc.w	r6, r4, r2
 8013718:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801371c:	e9c3 5600 	strd	r5, r6, [r3]
 8013720:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013724:	3301      	adds	r3, #1
 8013726:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 801372a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801372e:	049a      	lsls	r2, r3, #18
 8013730:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8013734:	0b9b      	lsrs	r3, r3, #14
 8013736:	4313      	orrs	r3, r2
 8013738:	62bb      	str	r3, [r7, #40]	; 0x28
 801373a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801373e:	049a      	lsls	r2, r3, #18
 8013740:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8013744:	0b9b      	lsrs	r3, r3, #14
 8013746:	4313      	orrs	r3, r2
 8013748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801374a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801374e:	039a      	lsls	r2, r3, #14
 8013750:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8013754:	0c9b      	lsrs	r3, r3, #18
 8013756:	4313      	orrs	r3, r2
 8013758:	623b      	str	r3, [r7, #32]
 801375a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801375e:	039a      	lsls	r2, r3, #14
 8013760:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8013764:	0c9b      	lsrs	r3, r3, #18
 8013766:	4313      	orrs	r3, r2
 8013768:	627b      	str	r3, [r7, #36]	; 0x24
 801376a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801376e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013772:	ea80 0003 	eor.w	r0, r0, r3
 8013776:	ea81 0104 	eor.w	r1, r1, r4
 801377a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801377e:	0a5a      	lsrs	r2, r3, #9
 8013780:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8013784:	05db      	lsls	r3, r3, #23
 8013786:	4313      	orrs	r3, r2
 8013788:	61fb      	str	r3, [r7, #28]
 801378a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801378e:	0a5a      	lsrs	r2, r3, #9
 8013790:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8013794:	05db      	lsls	r3, r3, #23
 8013796:	4313      	orrs	r3, r2
 8013798:	61bb      	str	r3, [r7, #24]
 801379a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801379e:	ea83 0300 	eor.w	r3, r3, r0
 80137a2:	ea84 0401 	eor.w	r4, r4, r1
 80137a6:	4619      	mov	r1, r3
 80137a8:	4622      	mov	r2, r4
 80137aa:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80137ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137b2:	18cd      	adds	r5, r1, r3
 80137b4:	eb42 0604 	adc.w	r6, r2, r4
 80137b8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80137bc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80137c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80137c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137c8:	ea81 0803 	eor.w	r8, r1, r3
 80137cc:	ea82 0904 	eor.w	r9, r2, r4
 80137d0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80137d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137d8:	ea08 0103 	and.w	r1, r8, r3
 80137dc:	ea09 0204 	and.w	r2, r9, r4
 80137e0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80137e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137e8:	ea83 0801 	eor.w	r8, r3, r1
 80137ec:	ea84 0902 	eor.w	r9, r4, r2
 80137f0:	eb15 0a08 	adds.w	sl, r5, r8
 80137f4:	eb46 0b09 	adc.w	fp, r6, r9
 80137f8:	4a43      	ldr	r2, [pc, #268]	; (8013908 <mbedtls_internal_sha512_process+0x1528>)
 80137fa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80137fe:	00db      	lsls	r3, r3, #3
 8013800:	4413      	add	r3, r2
 8013802:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013806:	eb1a 0003 	adds.w	r0, sl, r3
 801380a:	eb4b 0104 	adc.w	r1, fp, r4
 801380e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8013812:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013816:	00db      	lsls	r3, r3, #3
 8013818:	4413      	add	r3, r2
 801381a:	e9d3 5600 	ldrd	r5, r6, [r3]
 801381e:	182b      	adds	r3, r5, r0
 8013820:	eb46 0401 	adc.w	r4, r6, r1
 8013824:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8013828:	e9c2 3400 	strd	r3, r4, [r2]
 801382c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8013830:	011a      	lsls	r2, r3, #4
 8013832:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8013836:	0f1b      	lsrs	r3, r3, #28
 8013838:	4313      	orrs	r3, r2
 801383a:	613b      	str	r3, [r7, #16]
 801383c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8013840:	011a      	lsls	r2, r3, #4
 8013842:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8013846:	0f1b      	lsrs	r3, r3, #28
 8013848:	4313      	orrs	r3, r2
 801384a:	617b      	str	r3, [r7, #20]
 801384c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8013850:	089a      	lsrs	r2, r3, #2
 8013852:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8013856:	079b      	lsls	r3, r3, #30
 8013858:	4313      	orrs	r3, r2
 801385a:	60fb      	str	r3, [r7, #12]
 801385c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8013860:	089a      	lsrs	r2, r3, #2
 8013862:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8013866:	079b      	lsls	r3, r3, #30
 8013868:	4313      	orrs	r3, r2
 801386a:	60bb      	str	r3, [r7, #8]
 801386c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013870:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013874:	ea80 0003 	eor.w	r0, r0, r3
 8013878:	ea81 0104 	eor.w	r1, r1, r4
 801387c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8013880:	09da      	lsrs	r2, r3, #7
 8013882:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8013886:	065b      	lsls	r3, r3, #25
 8013888:	4313      	orrs	r3, r2
 801388a:	607b      	str	r3, [r7, #4]
 801388c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8013890:	09da      	lsrs	r2, r3, #7
 8013892:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8013896:	065b      	lsls	r3, r3, #25
 8013898:	4313      	orrs	r3, r2
 801389a:	603b      	str	r3, [r7, #0]
 801389c:	e9d7 8900 	ldrd	r8, r9, [r7]
 80138a0:	ea88 0800 	eor.w	r8, r8, r0
 80138a4:	ea89 0901 	eor.w	r9, r9, r1
 80138a8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80138ac:	e9d3 1200 	ldrd	r1, r2, [r3]
 80138b0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80138b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80138b8:	ea01 0503 	and.w	r5, r1, r3
 80138bc:	ea02 0604 	and.w	r6, r2, r4
 80138c0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80138c4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80138c8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80138cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80138d0:	ea41 0a03 	orr.w	sl, r1, r3
 80138d4:	ea42 0b04 	orr.w	fp, r2, r4
 80138d8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80138dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80138e0:	ea03 010a 	and.w	r1, r3, sl
 80138e4:	ea04 020b 	and.w	r2, r4, fp
 80138e8:	ea41 0a05 	orr.w	sl, r1, r5
 80138ec:	ea42 0b06 	orr.w	fp, r2, r6
 80138f0:	eb1a 0308 	adds.w	r3, sl, r8
 80138f4:	eb4b 0409 	adc.w	r4, fp, r9
 80138f8:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80138fc:	e9c2 3400 	strd	r3, r4, [r2]
 8013900:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8013904:	e002      	b.n	801390c <mbedtls_internal_sha512_process+0x152c>
 8013906:	bf00      	nop
 8013908:	08019c90 	.word	0x08019c90
 801390c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013910:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8013914:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013918:	185d      	adds	r5, r3, r1
 801391a:	eb44 0602 	adc.w	r6, r4, r2
 801391e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8013922:	e9c3 5600 	strd	r5, r6, [r3]
 8013926:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801392a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801392e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8013932:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013936:	185d      	adds	r5, r3, r1
 8013938:	eb44 0602 	adc.w	r6, r4, r2
 801393c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8013940:	e9c3 5600 	strd	r5, r6, [r3]
 8013944:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013948:	3301      	adds	r3, #1
 801394a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
    }
    while( i < 80 );
 801394e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013952:	2b4f      	cmp	r3, #79	; 0x4f
 8013954:	f77e af1c 	ble.w	8012790 <mbedtls_internal_sha512_process+0x3b0>

    ctx->state[0] += A;
 8013958:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013962:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8013966:	e9d3 3400 	ldrd	r3, r4, [r3]
 801396a:	185d      	adds	r5, r3, r1
 801396c:	eb44 0602 	adc.w	r6, r4, r2
 8013970:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8013974:	6812      	ldr	r2, [r2, #0]
 8013976:	e9c2 5604 	strd	r5, r6, [r2, #16]
    ctx->state[1] += B;
 801397a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013984:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8013988:	e9d3 3400 	ldrd	r3, r4, [r3]
 801398c:	185d      	adds	r5, r3, r1
 801398e:	eb44 0602 	adc.w	r6, r4, r2
 8013992:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8013996:	6812      	ldr	r2, [r2, #0]
 8013998:	e9c2 5606 	strd	r5, r6, [r2, #24]
    ctx->state[2] += C;
 801399c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 80139a6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80139aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80139ae:	185d      	adds	r5, r3, r1
 80139b0:	eb44 0602 	adc.w	r6, r4, r2
 80139b4:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80139b8:	6812      	ldr	r2, [r2, #0]
 80139ba:	e9c2 5608 	strd	r5, r6, [r2, #32]
    ctx->state[3] += D;
 80139be:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80139c8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80139cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80139d0:	185d      	adds	r5, r3, r1
 80139d2:	eb44 0602 	adc.w	r6, r4, r2
 80139d6:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80139da:	6812      	ldr	r2, [r2, #0]
 80139dc:	e9c2 560a 	strd	r5, r6, [r2, #40]	; 0x28
    ctx->state[4] += E;
 80139e0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80139ea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80139ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80139f2:	185d      	adds	r5, r3, r1
 80139f4:	eb44 0602 	adc.w	r6, r4, r2
 80139f8:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80139fc:	6812      	ldr	r2, [r2, #0]
 80139fe:	e9c2 560c 	strd	r5, r6, [r2, #48]	; 0x30
    ctx->state[5] += F;
 8013a02:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013a0c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8013a10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a14:	185d      	adds	r5, r3, r1
 8013a16:	eb44 0602 	adc.w	r6, r4, r2
 8013a1a:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8013a1e:	6812      	ldr	r2, [r2, #0]
 8013a20:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
    ctx->state[6] += G;
 8013a24:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8013a2e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8013a32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a36:	185d      	adds	r5, r3, r1
 8013a38:	eb44 0602 	adc.w	r6, r4, r2
 8013a3c:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8013a40:	6812      	ldr	r2, [r2, #0]
 8013a42:	e9c2 5610 	strd	r5, r6, [r2, #64]	; 0x40
    ctx->state[7] += H;
 8013a46:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8013a50:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8013a54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a58:	185d      	adds	r5, r3, r1
 8013a5a:	eb44 0602 	adc.w	r6, r4, r2
 8013a5e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8013a62:	6812      	ldr	r2, [r2, #0]
 8013a64:	e9c2 5612 	strd	r5, r6, [r2, #72]	; 0x48

    return( 0 );
 8013a68:	2300      	movs	r3, #0
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 8013a70:	46bd      	mov	sp, r7
 8013a72:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013a76:	4770      	bx	lr

08013a78 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8013a78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8013a7c:	b088      	sub	sp, #32
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	60f8      	str	r0, [r7, #12]
 8013a82:	60b9      	str	r1, [r7, #8]
 8013a84:	607a      	str	r2, [r7, #4]
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d101      	bne.n	8013a90 <mbedtls_sha512_update_ret+0x18>
        return( 0 );
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	e073      	b.n	8013b78 <mbedtls_sha512_update_ret+0x100>

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a9a:	61fb      	str	r3, [r7, #28]
    fill = 128 - left;
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8013aa2:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint64_t) ilen;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	469b      	mov	fp, r3
 8013aae:	f04f 0c00 	mov.w	ip, #0
 8013ab2:	eb1b 0301 	adds.w	r3, fp, r1
 8013ab6:	eb4c 0402 	adc.w	r4, ip, r2
 8013aba:	68fa      	ldr	r2, [r7, #12]
 8013abc:	e9c2 3400 	strd	r3, r4, [r2]

    if( ctx->total[0] < (uint64_t) ilen )
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f04f 0400 	mov.w	r4, #0
 8013acc:	42a2      	cmp	r2, r4
 8013ace:	bf08      	it	eq
 8013ad0:	4299      	cmpeq	r1, r3
 8013ad2:	d208      	bcs.n	8013ae6 <mbedtls_sha512_update_ret+0x6e>
        ctx->total[1]++;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8013ada:	1c4b      	adds	r3, r1, #1
 8013adc:	f142 0400 	adc.w	r4, r2, #0
 8013ae0:	68fa      	ldr	r2, [r7, #12]
 8013ae2:	e9c2 3402 	strd	r3, r4, [r2, #8]

    if( left && ilen >= fill )
 8013ae6:	69fb      	ldr	r3, [r7, #28]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d034      	beq.n	8013b56 <mbedtls_sha512_update_ret+0xde>
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d330      	bcc.n	8013b56 <mbedtls_sha512_update_ret+0xde>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	4413      	add	r3, r2
 8013afe:	69ba      	ldr	r2, [r7, #24]
 8013b00:	68b9      	ldr	r1, [r7, #8]
 8013b02:	4618      	mov	r0, r3
 8013b04:	f000 fd4d 	bl	80145a2 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	3350      	adds	r3, #80	; 0x50
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f7fe fc66 	bl	80123e0 <mbedtls_internal_sha512_process>
 8013b14:	6178      	str	r0, [r7, #20]
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d001      	beq.n	8013b20 <mbedtls_sha512_update_ret+0xa8>
            return( ret );
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	e02b      	b.n	8013b78 <mbedtls_sha512_update_ret+0x100>

        input += fill;
 8013b20:	68ba      	ldr	r2, [r7, #8]
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	4413      	add	r3, r2
 8013b26:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	1ad3      	subs	r3, r2, r3
 8013b2e:	607b      	str	r3, [r7, #4]
        left = 0;
 8013b30:	2300      	movs	r3, #0
 8013b32:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 128 )
 8013b34:	e00f      	b.n	8013b56 <mbedtls_sha512_update_ret+0xde>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 8013b36:	68b9      	ldr	r1, [r7, #8]
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f7fe fc51 	bl	80123e0 <mbedtls_internal_sha512_process>
 8013b3e:	6178      	str	r0, [r7, #20]
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d001      	beq.n	8013b4a <mbedtls_sha512_update_ret+0xd2>
            return( ret );
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	e016      	b.n	8013b78 <mbedtls_sha512_update_ret+0x100>

        input += 128;
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	3380      	adds	r3, #128	; 0x80
 8013b4e:	60bb      	str	r3, [r7, #8]
        ilen  -= 128;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	3b80      	subs	r3, #128	; 0x80
 8013b54:	607b      	str	r3, [r7, #4]
    while( ilen >= 128 )
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2b7f      	cmp	r3, #127	; 0x7f
 8013b5a:	d8ec      	bhi.n	8013b36 <mbedtls_sha512_update_ret+0xbe>
    }

    if( ilen > 0 )
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d009      	beq.n	8013b76 <mbedtls_sha512_update_ret+0xfe>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	68b9      	ldr	r1, [r7, #8]
 8013b70:	4618      	mov	r0, r3
 8013b72:	f000 fd16 	bl	80145a2 <memcpy>

    return( 0 );
 8013b76:	2300      	movs	r3, #0
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3720      	adds	r7, #32
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08013b82 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 8013b82:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013b86:	b088      	sub	sp, #32
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b98:	61fb      	str	r3, [r7, #28]

    ctx->buffer[used++] = 0x80;
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	1c5a      	adds	r2, r3, #1
 8013b9e:	61fa      	str	r2, [r7, #28]
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	2280      	movs	r2, #128	; 0x80
 8013ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    if( used <= 112 )
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	2b70      	cmp	r3, #112	; 0x70
 8013bae:	d80c      	bhi.n	8013bca <mbedtls_sha512_finish_ret+0x48>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	18d0      	adds	r0, r2, r3
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	f000 fd11 	bl	80145ea <memset>
 8013bc8:	e01f      	b.n	8013c0a <mbedtls_sha512_finish_ret+0x88>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	18d0      	adds	r0, r2, r3
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8013bda:	461a      	mov	r2, r3
 8013bdc:	2100      	movs	r1, #0
 8013bde:	f000 fd04 	bl	80145ea <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	3350      	adds	r3, #80	; 0x50
 8013be6:	4619      	mov	r1, r3
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f7fe fbf9 	bl	80123e0 <mbedtls_internal_sha512_process>
 8013bee:	61b8      	str	r0, [r7, #24]
 8013bf0:	69bb      	ldr	r3, [r7, #24]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d002      	beq.n	8013bfc <mbedtls_sha512_finish_ret+0x7a>
            return( ret );
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	f000 bc3e 	b.w	8014478 <mbedtls_sha512_finish_ret+0x8f6>

        memset( ctx->buffer, 0, 112 );
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	3350      	adds	r3, #80	; 0x50
 8013c00:	2270      	movs	r2, #112	; 0x70
 8013c02:	2100      	movs	r1, #0
 8013c04:	4618      	mov	r0, r3
 8013c06:	f000 fcf0 	bl	80145ea <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013c10:	f04f 0500 	mov.w	r5, #0
 8013c14:	f04f 0600 	mov.w	r6, #0
 8013c18:	0f65      	lsrs	r5, r4, #29
 8013c1a:	2600      	movs	r6, #0
         | ( ctx->total[1] <<  3 );
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8013c22:	f04f 0b00 	mov.w	fp, #0
 8013c26:	f04f 0c00 	mov.w	ip, #0
 8013c2a:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8013c2e:	ea4c 7c51 	orr.w	ip, ip, r1, lsr #29
 8013c32:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    high = ( ctx->total[0] >> 61 )
 8013c36:	ea4b 0305 	orr.w	r3, fp, r5
 8013c3a:	ea4c 0406 	orr.w	r4, ip, r6
 8013c3e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    low  = ( ctx->total[0] <<  3 );
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013c48:	f04f 0300 	mov.w	r3, #0
 8013c4c:	f04f 0400 	mov.w	r4, #0
 8013c50:	00d4      	lsls	r4, r2, #3
 8013c52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013c56:	00cb      	lsls	r3, r1, #3
 8013c58:	e9c7 3402 	strd	r3, r4, [r7, #8]

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 8013c5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013c60:	f04f 0300 	mov.w	r3, #0
 8013c64:	f04f 0400 	mov.w	r4, #0
 8013c68:	0e13      	lsrs	r3, r2, #24
 8013c6a:	2400      	movs	r4, #0
 8013c6c:	b2da      	uxtb	r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8013c74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013c78:	f04f 0300 	mov.w	r3, #0
 8013c7c:	f04f 0400 	mov.w	r4, #0
 8013c80:	0c13      	lsrs	r3, r2, #16
 8013c82:	2400      	movs	r4, #0
 8013c84:	b2da      	uxtb	r2, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8013c8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013c90:	f04f 0300 	mov.w	r3, #0
 8013c94:	f04f 0400 	mov.w	r4, #0
 8013c98:	0a13      	lsrs	r3, r2, #8
 8013c9a:	2400      	movs	r4, #0
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8013ca4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013ca8:	f04f 0300 	mov.w	r3, #0
 8013cac:	f04f 0400 	mov.w	r4, #0
 8013cb0:	0013      	movs	r3, r2
 8013cb2:	2400      	movs	r4, #0
 8013cb4:	b2da      	uxtb	r2, r3
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8013cbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013cc0:	f04f 0300 	mov.w	r3, #0
 8013cc4:	f04f 0400 	mov.w	r4, #0
 8013cc8:	0e0b      	lsrs	r3, r1, #24
 8013cca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013cce:	0e14      	lsrs	r4, r2, #24
 8013cd0:	b2da      	uxtb	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8013cd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013cdc:	f04f 0300 	mov.w	r3, #0
 8013ce0:	f04f 0400 	mov.w	r4, #0
 8013ce4:	0c0b      	lsrs	r3, r1, #16
 8013ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013cea:	0c14      	lsrs	r4, r2, #16
 8013cec:	b2da      	uxtb	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8013cf4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013cf8:	f04f 0300 	mov.w	r3, #0
 8013cfc:	f04f 0400 	mov.w	r4, #0
 8013d00:	0a0b      	lsrs	r3, r1, #8
 8013d02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013d06:	0a14      	lsrs	r4, r2, #8
 8013d08:	b2da      	uxtb	r2, r3
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8013d10:	7c3a      	ldrb	r2, [r7, #16]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 8013d18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013d1c:	f04f 0300 	mov.w	r3, #0
 8013d20:	f04f 0400 	mov.w	r4, #0
 8013d24:	0e13      	lsrs	r3, r2, #24
 8013d26:	2400      	movs	r4, #0
 8013d28:	b2da      	uxtb	r2, r3
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8013d30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013d34:	f04f 0300 	mov.w	r3, #0
 8013d38:	f04f 0400 	mov.w	r4, #0
 8013d3c:	0c13      	lsrs	r3, r2, #16
 8013d3e:	2400      	movs	r4, #0
 8013d40:	b2da      	uxtb	r2, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8013d48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013d4c:	f04f 0300 	mov.w	r3, #0
 8013d50:	f04f 0400 	mov.w	r4, #0
 8013d54:	0a13      	lsrs	r3, r2, #8
 8013d56:	2400      	movs	r4, #0
 8013d58:	b2da      	uxtb	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8013d60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013d64:	f04f 0300 	mov.w	r3, #0
 8013d68:	f04f 0400 	mov.w	r4, #0
 8013d6c:	0013      	movs	r3, r2
 8013d6e:	2400      	movs	r4, #0
 8013d70:	b2da      	uxtb	r2, r3
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8013d78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013d7c:	f04f 0300 	mov.w	r3, #0
 8013d80:	f04f 0400 	mov.w	r4, #0
 8013d84:	0e0b      	lsrs	r3, r1, #24
 8013d86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d8a:	0e14      	lsrs	r4, r2, #24
 8013d8c:	b2da      	uxtb	r2, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8013d94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013d98:	f04f 0300 	mov.w	r3, #0
 8013d9c:	f04f 0400 	mov.w	r4, #0
 8013da0:	0c0b      	lsrs	r3, r1, #16
 8013da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013da6:	0c14      	lsrs	r4, r2, #16
 8013da8:	b2da      	uxtb	r2, r3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8013db0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013db4:	f04f 0300 	mov.w	r3, #0
 8013db8:	f04f 0400 	mov.w	r4, #0
 8013dbc:	0a0b      	lsrs	r3, r1, #8
 8013dbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013dc2:	0a14      	lsrs	r4, r2, #8
 8013dc4:	b2da      	uxtb	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8013dcc:	7a3a      	ldrb	r2, [r7, #8]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	3350      	adds	r3, #80	; 0x50
 8013dd8:	4619      	mov	r1, r3
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f7fe fb00 	bl	80123e0 <mbedtls_internal_sha512_process>
 8013de0:	61b8      	str	r0, [r7, #24]
 8013de2:	69bb      	ldr	r3, [r7, #24]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d001      	beq.n	8013dec <mbedtls_sha512_finish_ret+0x26a>
        return( ret );
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	e345      	b.n	8014478 <mbedtls_sha512_finish_ret+0x8f6>

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013df2:	f04f 0300 	mov.w	r3, #0
 8013df6:	f04f 0400 	mov.w	r4, #0
 8013dfa:	0e13      	lsrs	r3, r2, #24
 8013dfc:	2400      	movs	r4, #0
 8013dfe:	b2da      	uxtb	r2, r3
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	701a      	strb	r2, [r3, #0]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013e0a:	f04f 0300 	mov.w	r3, #0
 8013e0e:	f04f 0400 	mov.w	r4, #0
 8013e12:	0c13      	lsrs	r3, r2, #16
 8013e14:	2400      	movs	r4, #0
 8013e16:	683a      	ldr	r2, [r7, #0]
 8013e18:	3201      	adds	r2, #1
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	7013      	strb	r3, [r2, #0]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013e24:	f04f 0300 	mov.w	r3, #0
 8013e28:	f04f 0400 	mov.w	r4, #0
 8013e2c:	0a13      	lsrs	r3, r2, #8
 8013e2e:	2400      	movs	r4, #0
 8013e30:	683a      	ldr	r2, [r7, #0]
 8013e32:	3202      	adds	r2, #2
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	7013      	strb	r3, [r2, #0]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013e3e:	f04f 0300 	mov.w	r3, #0
 8013e42:	f04f 0400 	mov.w	r4, #0
 8013e46:	0013      	movs	r3, r2
 8013e48:	2400      	movs	r4, #0
 8013e4a:	683a      	ldr	r2, [r7, #0]
 8013e4c:	3203      	adds	r2, #3
 8013e4e:	b2db      	uxtb	r3, r3
 8013e50:	7013      	strb	r3, [r2, #0]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013e58:	f04f 0300 	mov.w	r3, #0
 8013e5c:	f04f 0400 	mov.w	r4, #0
 8013e60:	0e0b      	lsrs	r3, r1, #24
 8013e62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013e66:	0e14      	lsrs	r4, r2, #24
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	3204      	adds	r2, #4
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	7013      	strb	r3, [r2, #0]
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013e76:	f04f 0300 	mov.w	r3, #0
 8013e7a:	f04f 0400 	mov.w	r4, #0
 8013e7e:	0c0b      	lsrs	r3, r1, #16
 8013e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e84:	0c14      	lsrs	r4, r2, #16
 8013e86:	683a      	ldr	r2, [r7, #0]
 8013e88:	3205      	adds	r2, #5
 8013e8a:	b2db      	uxtb	r3, r3
 8013e8c:	7013      	strb	r3, [r2, #0]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013e94:	f04f 0300 	mov.w	r3, #0
 8013e98:	f04f 0400 	mov.w	r4, #0
 8013e9c:	0a0b      	lsrs	r3, r1, #8
 8013e9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013ea2:	0a14      	lsrs	r4, r2, #8
 8013ea4:	683a      	ldr	r2, [r7, #0]
 8013ea6:	3206      	adds	r2, #6
 8013ea8:	b2db      	uxtb	r3, r3
 8013eaa:	7013      	strb	r3, [r2, #0]
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013eb2:	683a      	ldr	r2, [r7, #0]
 8013eb4:	3207      	adds	r2, #7
 8013eb6:	b2db      	uxtb	r3, r3
 8013eb8:	7013      	strb	r3, [r2, #0]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013ec0:	f04f 0300 	mov.w	r3, #0
 8013ec4:	f04f 0400 	mov.w	r4, #0
 8013ec8:	0e13      	lsrs	r3, r2, #24
 8013eca:	2400      	movs	r4, #0
 8013ecc:	683a      	ldr	r2, [r7, #0]
 8013ece:	3208      	adds	r2, #8
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	7013      	strb	r3, [r2, #0]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013eda:	f04f 0300 	mov.w	r3, #0
 8013ede:	f04f 0400 	mov.w	r4, #0
 8013ee2:	0c13      	lsrs	r3, r2, #16
 8013ee4:	2400      	movs	r4, #0
 8013ee6:	683a      	ldr	r2, [r7, #0]
 8013ee8:	3209      	adds	r2, #9
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	7013      	strb	r3, [r2, #0]
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013ef4:	f04f 0300 	mov.w	r3, #0
 8013ef8:	f04f 0400 	mov.w	r4, #0
 8013efc:	0a13      	lsrs	r3, r2, #8
 8013efe:	2400      	movs	r4, #0
 8013f00:	683a      	ldr	r2, [r7, #0]
 8013f02:	320a      	adds	r2, #10
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	7013      	strb	r3, [r2, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013f0e:	f04f 0300 	mov.w	r3, #0
 8013f12:	f04f 0400 	mov.w	r4, #0
 8013f16:	0013      	movs	r3, r2
 8013f18:	2400      	movs	r4, #0
 8013f1a:	683a      	ldr	r2, [r7, #0]
 8013f1c:	320b      	adds	r2, #11
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	7013      	strb	r3, [r2, #0]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013f28:	f04f 0300 	mov.w	r3, #0
 8013f2c:	f04f 0400 	mov.w	r4, #0
 8013f30:	0e0b      	lsrs	r3, r1, #24
 8013f32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013f36:	0e14      	lsrs	r4, r2, #24
 8013f38:	683a      	ldr	r2, [r7, #0]
 8013f3a:	320c      	adds	r2, #12
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	7013      	strb	r3, [r2, #0]
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013f46:	f04f 0300 	mov.w	r3, #0
 8013f4a:	f04f 0400 	mov.w	r4, #0
 8013f4e:	0c0b      	lsrs	r3, r1, #16
 8013f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f54:	0c14      	lsrs	r4, r2, #16
 8013f56:	683a      	ldr	r2, [r7, #0]
 8013f58:	320d      	adds	r2, #13
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	7013      	strb	r3, [r2, #0]
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8013f64:	f04f 0300 	mov.w	r3, #0
 8013f68:	f04f 0400 	mov.w	r4, #0
 8013f6c:	0a0b      	lsrs	r3, r1, #8
 8013f6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013f72:	0a14      	lsrs	r4, r2, #8
 8013f74:	683a      	ldr	r2, [r7, #0]
 8013f76:	320e      	adds	r2, #14
 8013f78:	b2db      	uxtb	r3, r3
 8013f7a:	7013      	strb	r3, [r2, #0]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8013f82:	683a      	ldr	r2, [r7, #0]
 8013f84:	320f      	adds	r2, #15
 8013f86:	b2db      	uxtb	r3, r3
 8013f88:	7013      	strb	r3, [r2, #0]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8013f90:	f04f 0300 	mov.w	r3, #0
 8013f94:	f04f 0400 	mov.w	r4, #0
 8013f98:	0e13      	lsrs	r3, r2, #24
 8013f9a:	2400      	movs	r4, #0
 8013f9c:	683a      	ldr	r2, [r7, #0]
 8013f9e:	3210      	adds	r2, #16
 8013fa0:	b2db      	uxtb	r3, r3
 8013fa2:	7013      	strb	r3, [r2, #0]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8013faa:	f04f 0300 	mov.w	r3, #0
 8013fae:	f04f 0400 	mov.w	r4, #0
 8013fb2:	0c13      	lsrs	r3, r2, #16
 8013fb4:	2400      	movs	r4, #0
 8013fb6:	683a      	ldr	r2, [r7, #0]
 8013fb8:	3211      	adds	r2, #17
 8013fba:	b2db      	uxtb	r3, r3
 8013fbc:	7013      	strb	r3, [r2, #0]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8013fc4:	f04f 0300 	mov.w	r3, #0
 8013fc8:	f04f 0400 	mov.w	r4, #0
 8013fcc:	0a13      	lsrs	r3, r2, #8
 8013fce:	2400      	movs	r4, #0
 8013fd0:	683a      	ldr	r2, [r7, #0]
 8013fd2:	3212      	adds	r2, #18
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	7013      	strb	r3, [r2, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8013fde:	f04f 0300 	mov.w	r3, #0
 8013fe2:	f04f 0400 	mov.w	r4, #0
 8013fe6:	0013      	movs	r3, r2
 8013fe8:	2400      	movs	r4, #0
 8013fea:	683a      	ldr	r2, [r7, #0]
 8013fec:	3213      	adds	r2, #19
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	7013      	strb	r3, [r2, #0]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8013ff8:	f04f 0300 	mov.w	r3, #0
 8013ffc:	f04f 0400 	mov.w	r4, #0
 8014000:	0e0b      	lsrs	r3, r1, #24
 8014002:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014006:	0e14      	lsrs	r4, r2, #24
 8014008:	683a      	ldr	r2, [r7, #0]
 801400a:	3214      	adds	r2, #20
 801400c:	b2db      	uxtb	r3, r3
 801400e:	7013      	strb	r3, [r2, #0]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8014016:	f04f 0300 	mov.w	r3, #0
 801401a:	f04f 0400 	mov.w	r4, #0
 801401e:	0c0b      	lsrs	r3, r1, #16
 8014020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014024:	0c14      	lsrs	r4, r2, #16
 8014026:	683a      	ldr	r2, [r7, #0]
 8014028:	3215      	adds	r2, #21
 801402a:	b2db      	uxtb	r3, r3
 801402c:	7013      	strb	r3, [r2, #0]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8014034:	f04f 0300 	mov.w	r3, #0
 8014038:	f04f 0400 	mov.w	r4, #0
 801403c:	0a0b      	lsrs	r3, r1, #8
 801403e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014042:	0a14      	lsrs	r4, r2, #8
 8014044:	683a      	ldr	r2, [r7, #0]
 8014046:	3216      	adds	r2, #22
 8014048:	b2db      	uxtb	r3, r3
 801404a:	7013      	strb	r3, [r2, #0]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	3217      	adds	r2, #23
 8014056:	b2db      	uxtb	r3, r3
 8014058:	7013      	strb	r3, [r2, #0]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8014060:	f04f 0300 	mov.w	r3, #0
 8014064:	f04f 0400 	mov.w	r4, #0
 8014068:	0e13      	lsrs	r3, r2, #24
 801406a:	2400      	movs	r4, #0
 801406c:	683a      	ldr	r2, [r7, #0]
 801406e:	3218      	adds	r2, #24
 8014070:	b2db      	uxtb	r3, r3
 8014072:	7013      	strb	r3, [r2, #0]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 801407a:	f04f 0300 	mov.w	r3, #0
 801407e:	f04f 0400 	mov.w	r4, #0
 8014082:	0c13      	lsrs	r3, r2, #16
 8014084:	2400      	movs	r4, #0
 8014086:	683a      	ldr	r2, [r7, #0]
 8014088:	3219      	adds	r2, #25
 801408a:	b2db      	uxtb	r3, r3
 801408c:	7013      	strb	r3, [r2, #0]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8014094:	f04f 0300 	mov.w	r3, #0
 8014098:	f04f 0400 	mov.w	r4, #0
 801409c:	0a13      	lsrs	r3, r2, #8
 801409e:	2400      	movs	r4, #0
 80140a0:	683a      	ldr	r2, [r7, #0]
 80140a2:	321a      	adds	r2, #26
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	7013      	strb	r3, [r2, #0]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80140ae:	f04f 0300 	mov.w	r3, #0
 80140b2:	f04f 0400 	mov.w	r4, #0
 80140b6:	0013      	movs	r3, r2
 80140b8:	2400      	movs	r4, #0
 80140ba:	683a      	ldr	r2, [r7, #0]
 80140bc:	321b      	adds	r2, #27
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	7013      	strb	r3, [r2, #0]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80140c8:	f04f 0300 	mov.w	r3, #0
 80140cc:	f04f 0400 	mov.w	r4, #0
 80140d0:	0e0b      	lsrs	r3, r1, #24
 80140d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80140d6:	0e14      	lsrs	r4, r2, #24
 80140d8:	683a      	ldr	r2, [r7, #0]
 80140da:	321c      	adds	r2, #28
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	7013      	strb	r3, [r2, #0]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80140e6:	f04f 0300 	mov.w	r3, #0
 80140ea:	f04f 0400 	mov.w	r4, #0
 80140ee:	0c0b      	lsrs	r3, r1, #16
 80140f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140f4:	0c14      	lsrs	r4, r2, #16
 80140f6:	683a      	ldr	r2, [r7, #0]
 80140f8:	321d      	adds	r2, #29
 80140fa:	b2db      	uxtb	r3, r3
 80140fc:	7013      	strb	r3, [r2, #0]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8014104:	f04f 0300 	mov.w	r3, #0
 8014108:	f04f 0400 	mov.w	r4, #0
 801410c:	0a0b      	lsrs	r3, r1, #8
 801410e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014112:	0a14      	lsrs	r4, r2, #8
 8014114:	683a      	ldr	r2, [r7, #0]
 8014116:	321e      	adds	r2, #30
 8014118:	b2db      	uxtb	r3, r3
 801411a:	7013      	strb	r3, [r2, #0]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	321f      	adds	r2, #31
 8014126:	b2db      	uxtb	r3, r3
 8014128:	7013      	strb	r3, [r2, #0]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8014130:	f04f 0300 	mov.w	r3, #0
 8014134:	f04f 0400 	mov.w	r4, #0
 8014138:	0e13      	lsrs	r3, r2, #24
 801413a:	2400      	movs	r4, #0
 801413c:	683a      	ldr	r2, [r7, #0]
 801413e:	3220      	adds	r2, #32
 8014140:	b2db      	uxtb	r3, r3
 8014142:	7013      	strb	r3, [r2, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 801414a:	f04f 0300 	mov.w	r3, #0
 801414e:	f04f 0400 	mov.w	r4, #0
 8014152:	0c13      	lsrs	r3, r2, #16
 8014154:	2400      	movs	r4, #0
 8014156:	683a      	ldr	r2, [r7, #0]
 8014158:	3221      	adds	r2, #33	; 0x21
 801415a:	b2db      	uxtb	r3, r3
 801415c:	7013      	strb	r3, [r2, #0]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8014164:	f04f 0300 	mov.w	r3, #0
 8014168:	f04f 0400 	mov.w	r4, #0
 801416c:	0a13      	lsrs	r3, r2, #8
 801416e:	2400      	movs	r4, #0
 8014170:	683a      	ldr	r2, [r7, #0]
 8014172:	3222      	adds	r2, #34	; 0x22
 8014174:	b2db      	uxtb	r3, r3
 8014176:	7013      	strb	r3, [r2, #0]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 801417e:	f04f 0300 	mov.w	r3, #0
 8014182:	f04f 0400 	mov.w	r4, #0
 8014186:	0013      	movs	r3, r2
 8014188:	2400      	movs	r4, #0
 801418a:	683a      	ldr	r2, [r7, #0]
 801418c:	3223      	adds	r2, #35	; 0x23
 801418e:	b2db      	uxtb	r3, r3
 8014190:	7013      	strb	r3, [r2, #0]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8014198:	f04f 0300 	mov.w	r3, #0
 801419c:	f04f 0400 	mov.w	r4, #0
 80141a0:	0e0b      	lsrs	r3, r1, #24
 80141a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80141a6:	0e14      	lsrs	r4, r2, #24
 80141a8:	683a      	ldr	r2, [r7, #0]
 80141aa:	3224      	adds	r2, #36	; 0x24
 80141ac:	b2db      	uxtb	r3, r3
 80141ae:	7013      	strb	r3, [r2, #0]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80141b6:	f04f 0300 	mov.w	r3, #0
 80141ba:	f04f 0400 	mov.w	r4, #0
 80141be:	0c0b      	lsrs	r3, r1, #16
 80141c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141c4:	0c14      	lsrs	r4, r2, #16
 80141c6:	683a      	ldr	r2, [r7, #0]
 80141c8:	3225      	adds	r2, #37	; 0x25
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	7013      	strb	r3, [r2, #0]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80141d4:	f04f 0300 	mov.w	r3, #0
 80141d8:	f04f 0400 	mov.w	r4, #0
 80141dc:	0a0b      	lsrs	r3, r1, #8
 80141de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80141e2:	0a14      	lsrs	r4, r2, #8
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	3226      	adds	r2, #38	; 0x26
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	7013      	strb	r3, [r2, #0]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80141f2:	683a      	ldr	r2, [r7, #0]
 80141f4:	3227      	adds	r2, #39	; 0x27
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	7013      	strb	r3, [r2, #0]
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014200:	f04f 0300 	mov.w	r3, #0
 8014204:	f04f 0400 	mov.w	r4, #0
 8014208:	0e13      	lsrs	r3, r2, #24
 801420a:	2400      	movs	r4, #0
 801420c:	683a      	ldr	r2, [r7, #0]
 801420e:	3228      	adds	r2, #40	; 0x28
 8014210:	b2db      	uxtb	r3, r3
 8014212:	7013      	strb	r3, [r2, #0]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801421a:	f04f 0300 	mov.w	r3, #0
 801421e:	f04f 0400 	mov.w	r4, #0
 8014222:	0c13      	lsrs	r3, r2, #16
 8014224:	2400      	movs	r4, #0
 8014226:	683a      	ldr	r2, [r7, #0]
 8014228:	3229      	adds	r2, #41	; 0x29
 801422a:	b2db      	uxtb	r3, r3
 801422c:	7013      	strb	r3, [r2, #0]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014234:	f04f 0300 	mov.w	r3, #0
 8014238:	f04f 0400 	mov.w	r4, #0
 801423c:	0a13      	lsrs	r3, r2, #8
 801423e:	2400      	movs	r4, #0
 8014240:	683a      	ldr	r2, [r7, #0]
 8014242:	322a      	adds	r2, #42	; 0x2a
 8014244:	b2db      	uxtb	r3, r3
 8014246:	7013      	strb	r3, [r2, #0]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801424e:	f04f 0300 	mov.w	r3, #0
 8014252:	f04f 0400 	mov.w	r4, #0
 8014256:	0013      	movs	r3, r2
 8014258:	2400      	movs	r4, #0
 801425a:	683a      	ldr	r2, [r7, #0]
 801425c:	322b      	adds	r2, #43	; 0x2b
 801425e:	b2db      	uxtb	r3, r3
 8014260:	7013      	strb	r3, [r2, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014268:	f04f 0300 	mov.w	r3, #0
 801426c:	f04f 0400 	mov.w	r4, #0
 8014270:	0e0b      	lsrs	r3, r1, #24
 8014272:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014276:	0e14      	lsrs	r4, r2, #24
 8014278:	683a      	ldr	r2, [r7, #0]
 801427a:	322c      	adds	r2, #44	; 0x2c
 801427c:	b2db      	uxtb	r3, r3
 801427e:	7013      	strb	r3, [r2, #0]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014286:	f04f 0300 	mov.w	r3, #0
 801428a:	f04f 0400 	mov.w	r4, #0
 801428e:	0c0b      	lsrs	r3, r1, #16
 8014290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014294:	0c14      	lsrs	r4, r2, #16
 8014296:	683a      	ldr	r2, [r7, #0]
 8014298:	322d      	adds	r2, #45	; 0x2d
 801429a:	b2db      	uxtb	r3, r3
 801429c:	7013      	strb	r3, [r2, #0]
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80142a4:	f04f 0300 	mov.w	r3, #0
 80142a8:	f04f 0400 	mov.w	r4, #0
 80142ac:	0a0b      	lsrs	r3, r1, #8
 80142ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80142b2:	0a14      	lsrs	r4, r2, #8
 80142b4:	683a      	ldr	r2, [r7, #0]
 80142b6:	322e      	adds	r2, #46	; 0x2e
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	7013      	strb	r3, [r2, #0]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80142c2:	683a      	ldr	r2, [r7, #0]
 80142c4:	322f      	adds	r2, #47	; 0x2f
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	7013      	strb	r3, [r2, #0]

    if( ctx->is384 == 0 )
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	f040 80d0 	bne.w	8014476 <mbedtls_sha512_finish_ret+0x8f4>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 80142dc:	f04f 0300 	mov.w	r3, #0
 80142e0:	f04f 0400 	mov.w	r4, #0
 80142e4:	0e13      	lsrs	r3, r2, #24
 80142e6:	2400      	movs	r4, #0
 80142e8:	683a      	ldr	r2, [r7, #0]
 80142ea:	3230      	adds	r2, #48	; 0x30
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	7013      	strb	r3, [r2, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 80142f6:	f04f 0300 	mov.w	r3, #0
 80142fa:	f04f 0400 	mov.w	r4, #0
 80142fe:	0c13      	lsrs	r3, r2, #16
 8014300:	2400      	movs	r4, #0
 8014302:	683a      	ldr	r2, [r7, #0]
 8014304:	3231      	adds	r2, #49	; 0x31
 8014306:	b2db      	uxtb	r3, r3
 8014308:	7013      	strb	r3, [r2, #0]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8014310:	f04f 0300 	mov.w	r3, #0
 8014314:	f04f 0400 	mov.w	r4, #0
 8014318:	0a13      	lsrs	r3, r2, #8
 801431a:	2400      	movs	r4, #0
 801431c:	683a      	ldr	r2, [r7, #0]
 801431e:	3232      	adds	r2, #50	; 0x32
 8014320:	b2db      	uxtb	r3, r3
 8014322:	7013      	strb	r3, [r2, #0]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 801432a:	f04f 0300 	mov.w	r3, #0
 801432e:	f04f 0400 	mov.w	r4, #0
 8014332:	0013      	movs	r3, r2
 8014334:	2400      	movs	r4, #0
 8014336:	683a      	ldr	r2, [r7, #0]
 8014338:	3233      	adds	r2, #51	; 0x33
 801433a:	b2db      	uxtb	r3, r3
 801433c:	7013      	strb	r3, [r2, #0]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8014344:	f04f 0300 	mov.w	r3, #0
 8014348:	f04f 0400 	mov.w	r4, #0
 801434c:	0e0b      	lsrs	r3, r1, #24
 801434e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014352:	0e14      	lsrs	r4, r2, #24
 8014354:	683a      	ldr	r2, [r7, #0]
 8014356:	3234      	adds	r2, #52	; 0x34
 8014358:	b2db      	uxtb	r3, r3
 801435a:	7013      	strb	r3, [r2, #0]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8014362:	f04f 0300 	mov.w	r3, #0
 8014366:	f04f 0400 	mov.w	r4, #0
 801436a:	0c0b      	lsrs	r3, r1, #16
 801436c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014370:	0c14      	lsrs	r4, r2, #16
 8014372:	683a      	ldr	r2, [r7, #0]
 8014374:	3235      	adds	r2, #53	; 0x35
 8014376:	b2db      	uxtb	r3, r3
 8014378:	7013      	strb	r3, [r2, #0]
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8014380:	f04f 0300 	mov.w	r3, #0
 8014384:	f04f 0400 	mov.w	r4, #0
 8014388:	0a0b      	lsrs	r3, r1, #8
 801438a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801438e:	0a14      	lsrs	r4, r2, #8
 8014390:	683a      	ldr	r2, [r7, #0]
 8014392:	3236      	adds	r2, #54	; 0x36
 8014394:	b2db      	uxtb	r3, r3
 8014396:	7013      	strb	r3, [r2, #0]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 801439e:	683a      	ldr	r2, [r7, #0]
 80143a0:	3237      	adds	r2, #55	; 0x37
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	7013      	strb	r3, [r2, #0]
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80143ac:	f04f 0300 	mov.w	r3, #0
 80143b0:	f04f 0400 	mov.w	r4, #0
 80143b4:	0e13      	lsrs	r3, r2, #24
 80143b6:	2400      	movs	r4, #0
 80143b8:	683a      	ldr	r2, [r7, #0]
 80143ba:	3238      	adds	r2, #56	; 0x38
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	7013      	strb	r3, [r2, #0]
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80143c6:	f04f 0300 	mov.w	r3, #0
 80143ca:	f04f 0400 	mov.w	r4, #0
 80143ce:	0c13      	lsrs	r3, r2, #16
 80143d0:	2400      	movs	r4, #0
 80143d2:	683a      	ldr	r2, [r7, #0]
 80143d4:	3239      	adds	r2, #57	; 0x39
 80143d6:	b2db      	uxtb	r3, r3
 80143d8:	7013      	strb	r3, [r2, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80143e0:	f04f 0300 	mov.w	r3, #0
 80143e4:	f04f 0400 	mov.w	r4, #0
 80143e8:	0a13      	lsrs	r3, r2, #8
 80143ea:	2400      	movs	r4, #0
 80143ec:	683a      	ldr	r2, [r7, #0]
 80143ee:	323a      	adds	r2, #58	; 0x3a
 80143f0:	b2db      	uxtb	r3, r3
 80143f2:	7013      	strb	r3, [r2, #0]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80143fa:	f04f 0300 	mov.w	r3, #0
 80143fe:	f04f 0400 	mov.w	r4, #0
 8014402:	0013      	movs	r3, r2
 8014404:	2400      	movs	r4, #0
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	323b      	adds	r2, #59	; 0x3b
 801440a:	b2db      	uxtb	r3, r3
 801440c:	7013      	strb	r3, [r2, #0]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8014414:	f04f 0300 	mov.w	r3, #0
 8014418:	f04f 0400 	mov.w	r4, #0
 801441c:	0e0b      	lsrs	r3, r1, #24
 801441e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014422:	0e14      	lsrs	r4, r2, #24
 8014424:	683a      	ldr	r2, [r7, #0]
 8014426:	323c      	adds	r2, #60	; 0x3c
 8014428:	b2db      	uxtb	r3, r3
 801442a:	7013      	strb	r3, [r2, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8014432:	f04f 0300 	mov.w	r3, #0
 8014436:	f04f 0400 	mov.w	r4, #0
 801443a:	0c0b      	lsrs	r3, r1, #16
 801443c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014440:	0c14      	lsrs	r4, r2, #16
 8014442:	683a      	ldr	r2, [r7, #0]
 8014444:	323d      	adds	r2, #61	; 0x3d
 8014446:	b2db      	uxtb	r3, r3
 8014448:	7013      	strb	r3, [r2, #0]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8014450:	f04f 0300 	mov.w	r3, #0
 8014454:	f04f 0400 	mov.w	r4, #0
 8014458:	0a0b      	lsrs	r3, r1, #8
 801445a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801445e:	0a14      	lsrs	r4, r2, #8
 8014460:	683a      	ldr	r2, [r7, #0]
 8014462:	323e      	adds	r2, #62	; 0x3e
 8014464:	b2db      	uxtb	r3, r3
 8014466:	7013      	strb	r3, [r2, #0]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 801446e:	683a      	ldr	r2, [r7, #0]
 8014470:	323f      	adds	r2, #63	; 0x3f
 8014472:	b2db      	uxtb	r3, r3
 8014474:	7013      	strb	r3, [r2, #0]
    }

    return( 0 );
 8014476:	2300      	movs	r3, #0
}
 8014478:	4618      	mov	r0, r3
 801447a:	3720      	adds	r7, #32
 801447c:	46bd      	mov	sp, r7
 801447e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

08014482 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 8014482:	b580      	push	{r7, lr}
 8014484:	b0bc      	sub	sp, #240	; 0xf0
 8014486:	af00      	add	r7, sp, #0
 8014488:	60f8      	str	r0, [r7, #12]
 801448a:	60b9      	str	r1, [r7, #8]
 801448c:	607a      	str	r2, [r7, #4]
 801448e:	603b      	str	r3, [r7, #0]

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 8014490:	f107 0310 	add.w	r3, r7, #16
 8014494:	4618      	mov	r0, r3
 8014496:	f7fd feaf 	bl	80121f8 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 801449a:	f107 0310 	add.w	r3, r7, #16
 801449e:	6839      	ldr	r1, [r7, #0]
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7fd fed9 	bl	8012258 <mbedtls_sha512_starts_ret>
 80144a6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80144aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d118      	bne.n	80144e4 <mbedtls_sha512_ret+0x62>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 80144b2:	f107 0310 	add.w	r3, r7, #16
 80144b6:	68ba      	ldr	r2, [r7, #8]
 80144b8:	68f9      	ldr	r1, [r7, #12]
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7ff fadc 	bl	8013a78 <mbedtls_sha512_update_ret>
 80144c0:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80144c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d10d      	bne.n	80144e8 <mbedtls_sha512_ret+0x66>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 80144cc:	f107 0310 	add.w	r3, r7, #16
 80144d0:	6879      	ldr	r1, [r7, #4]
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7ff fb55 	bl	8013b82 <mbedtls_sha512_finish_ret>
 80144d8:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80144dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144e0:	2b00      	cmp	r3, #0
        goto exit;

exit:
 80144e2:	e002      	b.n	80144ea <mbedtls_sha512_ret+0x68>
        goto exit;
 80144e4:	bf00      	nop
 80144e6:	e000      	b.n	80144ea <mbedtls_sha512_ret+0x68>
        goto exit;
 80144e8:	bf00      	nop
    mbedtls_sha512_free( &ctx );
 80144ea:	f107 0310 	add.w	r3, r7, #16
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fd fe8f 	bl	8012212 <mbedtls_sha512_free>

    return( ret );
 80144f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	37f0      	adds	r7, #240	; 0xf0
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <calloc>:
 8014500:	4b02      	ldr	r3, [pc, #8]	; (801450c <calloc+0xc>)
 8014502:	460a      	mov	r2, r1
 8014504:	4601      	mov	r1, r0
 8014506:	6818      	ldr	r0, [r3, #0]
 8014508:	f000 b877 	b.w	80145fa <_calloc_r>
 801450c:	2000062c 	.word	0x2000062c

08014510 <__errno>:
 8014510:	4b01      	ldr	r3, [pc, #4]	; (8014518 <__errno+0x8>)
 8014512:	6818      	ldr	r0, [r3, #0]
 8014514:	4770      	bx	lr
 8014516:	bf00      	nop
 8014518:	2000062c 	.word	0x2000062c

0801451c <__libc_init_array>:
 801451c:	b570      	push	{r4, r5, r6, lr}
 801451e:	4e0d      	ldr	r6, [pc, #52]	; (8014554 <__libc_init_array+0x38>)
 8014520:	4c0d      	ldr	r4, [pc, #52]	; (8014558 <__libc_init_array+0x3c>)
 8014522:	1ba4      	subs	r4, r4, r6
 8014524:	10a4      	asrs	r4, r4, #2
 8014526:	2500      	movs	r5, #0
 8014528:	42a5      	cmp	r5, r4
 801452a:	d109      	bne.n	8014540 <__libc_init_array+0x24>
 801452c:	4e0b      	ldr	r6, [pc, #44]	; (801455c <__libc_init_array+0x40>)
 801452e:	4c0c      	ldr	r4, [pc, #48]	; (8014560 <__libc_init_array+0x44>)
 8014530:	f000 fce4 	bl	8014efc <_init>
 8014534:	1ba4      	subs	r4, r4, r6
 8014536:	10a4      	asrs	r4, r4, #2
 8014538:	2500      	movs	r5, #0
 801453a:	42a5      	cmp	r5, r4
 801453c:	d105      	bne.n	801454a <__libc_init_array+0x2e>
 801453e:	bd70      	pop	{r4, r5, r6, pc}
 8014540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014544:	4798      	blx	r3
 8014546:	3501      	adds	r5, #1
 8014548:	e7ee      	b.n	8014528 <__libc_init_array+0xc>
 801454a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801454e:	4798      	blx	r3
 8014550:	3501      	adds	r5, #1
 8014552:	e7f2      	b.n	801453a <__libc_init_array+0x1e>
 8014554:	08019f4c 	.word	0x08019f4c
 8014558:	08019f4c 	.word	0x08019f4c
 801455c:	08019f4c 	.word	0x08019f4c
 8014560:	08019f50 	.word	0x08019f50

08014564 <malloc>:
 8014564:	4b02      	ldr	r3, [pc, #8]	; (8014570 <malloc+0xc>)
 8014566:	4601      	mov	r1, r0
 8014568:	6818      	ldr	r0, [r3, #0]
 801456a:	f000 b8a3 	b.w	80146b4 <_malloc_r>
 801456e:	bf00      	nop
 8014570:	2000062c 	.word	0x2000062c

08014574 <free>:
 8014574:	4b02      	ldr	r3, [pc, #8]	; (8014580 <free+0xc>)
 8014576:	4601      	mov	r1, r0
 8014578:	6818      	ldr	r0, [r3, #0]
 801457a:	f000 b84d 	b.w	8014618 <_free_r>
 801457e:	bf00      	nop
 8014580:	2000062c 	.word	0x2000062c

08014584 <memcmp>:
 8014584:	b530      	push	{r4, r5, lr}
 8014586:	2400      	movs	r4, #0
 8014588:	42a2      	cmp	r2, r4
 801458a:	d101      	bne.n	8014590 <memcmp+0xc>
 801458c:	2000      	movs	r0, #0
 801458e:	e007      	b.n	80145a0 <memcmp+0x1c>
 8014590:	5d03      	ldrb	r3, [r0, r4]
 8014592:	3401      	adds	r4, #1
 8014594:	190d      	adds	r5, r1, r4
 8014596:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801459a:	42ab      	cmp	r3, r5
 801459c:	d0f4      	beq.n	8014588 <memcmp+0x4>
 801459e:	1b58      	subs	r0, r3, r5
 80145a0:	bd30      	pop	{r4, r5, pc}

080145a2 <memcpy>:
 80145a2:	b510      	push	{r4, lr}
 80145a4:	1e43      	subs	r3, r0, #1
 80145a6:	440a      	add	r2, r1
 80145a8:	4291      	cmp	r1, r2
 80145aa:	d100      	bne.n	80145ae <memcpy+0xc>
 80145ac:	bd10      	pop	{r4, pc}
 80145ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145b6:	e7f7      	b.n	80145a8 <memcpy+0x6>

080145b8 <memmove>:
 80145b8:	4288      	cmp	r0, r1
 80145ba:	b510      	push	{r4, lr}
 80145bc:	eb01 0302 	add.w	r3, r1, r2
 80145c0:	d807      	bhi.n	80145d2 <memmove+0x1a>
 80145c2:	1e42      	subs	r2, r0, #1
 80145c4:	4299      	cmp	r1, r3
 80145c6:	d00a      	beq.n	80145de <memmove+0x26>
 80145c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80145d0:	e7f8      	b.n	80145c4 <memmove+0xc>
 80145d2:	4283      	cmp	r3, r0
 80145d4:	d9f5      	bls.n	80145c2 <memmove+0xa>
 80145d6:	1881      	adds	r1, r0, r2
 80145d8:	1ad2      	subs	r2, r2, r3
 80145da:	42d3      	cmn	r3, r2
 80145dc:	d100      	bne.n	80145e0 <memmove+0x28>
 80145de:	bd10      	pop	{r4, pc}
 80145e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80145e8:	e7f7      	b.n	80145da <memmove+0x22>

080145ea <memset>:
 80145ea:	4402      	add	r2, r0
 80145ec:	4603      	mov	r3, r0
 80145ee:	4293      	cmp	r3, r2
 80145f0:	d100      	bne.n	80145f4 <memset+0xa>
 80145f2:	4770      	bx	lr
 80145f4:	f803 1b01 	strb.w	r1, [r3], #1
 80145f8:	e7f9      	b.n	80145ee <memset+0x4>

080145fa <_calloc_r>:
 80145fa:	b538      	push	{r3, r4, r5, lr}
 80145fc:	fb02 f401 	mul.w	r4, r2, r1
 8014600:	4621      	mov	r1, r4
 8014602:	f000 f857 	bl	80146b4 <_malloc_r>
 8014606:	4605      	mov	r5, r0
 8014608:	b118      	cbz	r0, 8014612 <_calloc_r+0x18>
 801460a:	4622      	mov	r2, r4
 801460c:	2100      	movs	r1, #0
 801460e:	f7ff ffec 	bl	80145ea <memset>
 8014612:	4628      	mov	r0, r5
 8014614:	bd38      	pop	{r3, r4, r5, pc}
	...

08014618 <_free_r>:
 8014618:	b538      	push	{r3, r4, r5, lr}
 801461a:	4605      	mov	r5, r0
 801461c:	2900      	cmp	r1, #0
 801461e:	d045      	beq.n	80146ac <_free_r+0x94>
 8014620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014624:	1f0c      	subs	r4, r1, #4
 8014626:	2b00      	cmp	r3, #0
 8014628:	bfb8      	it	lt
 801462a:	18e4      	addlt	r4, r4, r3
 801462c:	f000 f954 	bl	80148d8 <__malloc_lock>
 8014630:	4a1f      	ldr	r2, [pc, #124]	; (80146b0 <_free_r+0x98>)
 8014632:	6813      	ldr	r3, [r2, #0]
 8014634:	4610      	mov	r0, r2
 8014636:	b933      	cbnz	r3, 8014646 <_free_r+0x2e>
 8014638:	6063      	str	r3, [r4, #4]
 801463a:	6014      	str	r4, [r2, #0]
 801463c:	4628      	mov	r0, r5
 801463e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014642:	f000 b94a 	b.w	80148da <__malloc_unlock>
 8014646:	42a3      	cmp	r3, r4
 8014648:	d90c      	bls.n	8014664 <_free_r+0x4c>
 801464a:	6821      	ldr	r1, [r4, #0]
 801464c:	1862      	adds	r2, r4, r1
 801464e:	4293      	cmp	r3, r2
 8014650:	bf04      	itt	eq
 8014652:	681a      	ldreq	r2, [r3, #0]
 8014654:	685b      	ldreq	r3, [r3, #4]
 8014656:	6063      	str	r3, [r4, #4]
 8014658:	bf04      	itt	eq
 801465a:	1852      	addeq	r2, r2, r1
 801465c:	6022      	streq	r2, [r4, #0]
 801465e:	6004      	str	r4, [r0, #0]
 8014660:	e7ec      	b.n	801463c <_free_r+0x24>
 8014662:	4613      	mov	r3, r2
 8014664:	685a      	ldr	r2, [r3, #4]
 8014666:	b10a      	cbz	r2, 801466c <_free_r+0x54>
 8014668:	42a2      	cmp	r2, r4
 801466a:	d9fa      	bls.n	8014662 <_free_r+0x4a>
 801466c:	6819      	ldr	r1, [r3, #0]
 801466e:	1858      	adds	r0, r3, r1
 8014670:	42a0      	cmp	r0, r4
 8014672:	d10b      	bne.n	801468c <_free_r+0x74>
 8014674:	6820      	ldr	r0, [r4, #0]
 8014676:	4401      	add	r1, r0
 8014678:	1858      	adds	r0, r3, r1
 801467a:	4282      	cmp	r2, r0
 801467c:	6019      	str	r1, [r3, #0]
 801467e:	d1dd      	bne.n	801463c <_free_r+0x24>
 8014680:	6810      	ldr	r0, [r2, #0]
 8014682:	6852      	ldr	r2, [r2, #4]
 8014684:	605a      	str	r2, [r3, #4]
 8014686:	4401      	add	r1, r0
 8014688:	6019      	str	r1, [r3, #0]
 801468a:	e7d7      	b.n	801463c <_free_r+0x24>
 801468c:	d902      	bls.n	8014694 <_free_r+0x7c>
 801468e:	230c      	movs	r3, #12
 8014690:	602b      	str	r3, [r5, #0]
 8014692:	e7d3      	b.n	801463c <_free_r+0x24>
 8014694:	6820      	ldr	r0, [r4, #0]
 8014696:	1821      	adds	r1, r4, r0
 8014698:	428a      	cmp	r2, r1
 801469a:	bf04      	itt	eq
 801469c:	6811      	ldreq	r1, [r2, #0]
 801469e:	6852      	ldreq	r2, [r2, #4]
 80146a0:	6062      	str	r2, [r4, #4]
 80146a2:	bf04      	itt	eq
 80146a4:	1809      	addeq	r1, r1, r0
 80146a6:	6021      	streq	r1, [r4, #0]
 80146a8:	605c      	str	r4, [r3, #4]
 80146aa:	e7c7      	b.n	801463c <_free_r+0x24>
 80146ac:	bd38      	pop	{r3, r4, r5, pc}
 80146ae:	bf00      	nop
 80146b0:	2000077c 	.word	0x2000077c

080146b4 <_malloc_r>:
 80146b4:	b570      	push	{r4, r5, r6, lr}
 80146b6:	1ccd      	adds	r5, r1, #3
 80146b8:	f025 0503 	bic.w	r5, r5, #3
 80146bc:	3508      	adds	r5, #8
 80146be:	2d0c      	cmp	r5, #12
 80146c0:	bf38      	it	cc
 80146c2:	250c      	movcc	r5, #12
 80146c4:	2d00      	cmp	r5, #0
 80146c6:	4606      	mov	r6, r0
 80146c8:	db01      	blt.n	80146ce <_malloc_r+0x1a>
 80146ca:	42a9      	cmp	r1, r5
 80146cc:	d903      	bls.n	80146d6 <_malloc_r+0x22>
 80146ce:	230c      	movs	r3, #12
 80146d0:	6033      	str	r3, [r6, #0]
 80146d2:	2000      	movs	r0, #0
 80146d4:	bd70      	pop	{r4, r5, r6, pc}
 80146d6:	f000 f8ff 	bl	80148d8 <__malloc_lock>
 80146da:	4a21      	ldr	r2, [pc, #132]	; (8014760 <_malloc_r+0xac>)
 80146dc:	6814      	ldr	r4, [r2, #0]
 80146de:	4621      	mov	r1, r4
 80146e0:	b991      	cbnz	r1, 8014708 <_malloc_r+0x54>
 80146e2:	4c20      	ldr	r4, [pc, #128]	; (8014764 <_malloc_r+0xb0>)
 80146e4:	6823      	ldr	r3, [r4, #0]
 80146e6:	b91b      	cbnz	r3, 80146f0 <_malloc_r+0x3c>
 80146e8:	4630      	mov	r0, r6
 80146ea:	f000 f83d 	bl	8014768 <_sbrk_r>
 80146ee:	6020      	str	r0, [r4, #0]
 80146f0:	4629      	mov	r1, r5
 80146f2:	4630      	mov	r0, r6
 80146f4:	f000 f838 	bl	8014768 <_sbrk_r>
 80146f8:	1c43      	adds	r3, r0, #1
 80146fa:	d124      	bne.n	8014746 <_malloc_r+0x92>
 80146fc:	230c      	movs	r3, #12
 80146fe:	6033      	str	r3, [r6, #0]
 8014700:	4630      	mov	r0, r6
 8014702:	f000 f8ea 	bl	80148da <__malloc_unlock>
 8014706:	e7e4      	b.n	80146d2 <_malloc_r+0x1e>
 8014708:	680b      	ldr	r3, [r1, #0]
 801470a:	1b5b      	subs	r3, r3, r5
 801470c:	d418      	bmi.n	8014740 <_malloc_r+0x8c>
 801470e:	2b0b      	cmp	r3, #11
 8014710:	d90f      	bls.n	8014732 <_malloc_r+0x7e>
 8014712:	600b      	str	r3, [r1, #0]
 8014714:	50cd      	str	r5, [r1, r3]
 8014716:	18cc      	adds	r4, r1, r3
 8014718:	4630      	mov	r0, r6
 801471a:	f000 f8de 	bl	80148da <__malloc_unlock>
 801471e:	f104 000b 	add.w	r0, r4, #11
 8014722:	1d23      	adds	r3, r4, #4
 8014724:	f020 0007 	bic.w	r0, r0, #7
 8014728:	1ac3      	subs	r3, r0, r3
 801472a:	d0d3      	beq.n	80146d4 <_malloc_r+0x20>
 801472c:	425a      	negs	r2, r3
 801472e:	50e2      	str	r2, [r4, r3]
 8014730:	e7d0      	b.n	80146d4 <_malloc_r+0x20>
 8014732:	428c      	cmp	r4, r1
 8014734:	684b      	ldr	r3, [r1, #4]
 8014736:	bf16      	itet	ne
 8014738:	6063      	strne	r3, [r4, #4]
 801473a:	6013      	streq	r3, [r2, #0]
 801473c:	460c      	movne	r4, r1
 801473e:	e7eb      	b.n	8014718 <_malloc_r+0x64>
 8014740:	460c      	mov	r4, r1
 8014742:	6849      	ldr	r1, [r1, #4]
 8014744:	e7cc      	b.n	80146e0 <_malloc_r+0x2c>
 8014746:	1cc4      	adds	r4, r0, #3
 8014748:	f024 0403 	bic.w	r4, r4, #3
 801474c:	42a0      	cmp	r0, r4
 801474e:	d005      	beq.n	801475c <_malloc_r+0xa8>
 8014750:	1a21      	subs	r1, r4, r0
 8014752:	4630      	mov	r0, r6
 8014754:	f000 f808 	bl	8014768 <_sbrk_r>
 8014758:	3001      	adds	r0, #1
 801475a:	d0cf      	beq.n	80146fc <_malloc_r+0x48>
 801475c:	6025      	str	r5, [r4, #0]
 801475e:	e7db      	b.n	8014718 <_malloc_r+0x64>
 8014760:	2000077c 	.word	0x2000077c
 8014764:	20000780 	.word	0x20000780

08014768 <_sbrk_r>:
 8014768:	b538      	push	{r3, r4, r5, lr}
 801476a:	4c06      	ldr	r4, [pc, #24]	; (8014784 <_sbrk_r+0x1c>)
 801476c:	2300      	movs	r3, #0
 801476e:	4605      	mov	r5, r0
 8014770:	4608      	mov	r0, r1
 8014772:	6023      	str	r3, [r4, #0]
 8014774:	f7ec ff46 	bl	8001604 <_sbrk>
 8014778:	1c43      	adds	r3, r0, #1
 801477a:	d102      	bne.n	8014782 <_sbrk_r+0x1a>
 801477c:	6823      	ldr	r3, [r4, #0]
 801477e:	b103      	cbz	r3, 8014782 <_sbrk_r+0x1a>
 8014780:	602b      	str	r3, [r5, #0]
 8014782:	bd38      	pop	{r3, r4, r5, pc}
 8014784:	2000256c 	.word	0x2000256c

08014788 <sniprintf>:
 8014788:	b40c      	push	{r2, r3}
 801478a:	b530      	push	{r4, r5, lr}
 801478c:	4b17      	ldr	r3, [pc, #92]	; (80147ec <sniprintf+0x64>)
 801478e:	1e0c      	subs	r4, r1, #0
 8014790:	b09d      	sub	sp, #116	; 0x74
 8014792:	681d      	ldr	r5, [r3, #0]
 8014794:	da08      	bge.n	80147a8 <sniprintf+0x20>
 8014796:	238b      	movs	r3, #139	; 0x8b
 8014798:	602b      	str	r3, [r5, #0]
 801479a:	f04f 30ff 	mov.w	r0, #4294967295
 801479e:	b01d      	add	sp, #116	; 0x74
 80147a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147a4:	b002      	add	sp, #8
 80147a6:	4770      	bx	lr
 80147a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80147ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80147b0:	bf14      	ite	ne
 80147b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80147b6:	4623      	moveq	r3, r4
 80147b8:	9304      	str	r3, [sp, #16]
 80147ba:	9307      	str	r3, [sp, #28]
 80147bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147c0:	9002      	str	r0, [sp, #8]
 80147c2:	9006      	str	r0, [sp, #24]
 80147c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80147c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80147ca:	ab21      	add	r3, sp, #132	; 0x84
 80147cc:	a902      	add	r1, sp, #8
 80147ce:	4628      	mov	r0, r5
 80147d0:	9301      	str	r3, [sp, #4]
 80147d2:	f000 f8dd 	bl	8014990 <_svfiprintf_r>
 80147d6:	1c43      	adds	r3, r0, #1
 80147d8:	bfbc      	itt	lt
 80147da:	238b      	movlt	r3, #139	; 0x8b
 80147dc:	602b      	strlt	r3, [r5, #0]
 80147de:	2c00      	cmp	r4, #0
 80147e0:	d0dd      	beq.n	801479e <sniprintf+0x16>
 80147e2:	9b02      	ldr	r3, [sp, #8]
 80147e4:	2200      	movs	r2, #0
 80147e6:	701a      	strb	r2, [r3, #0]
 80147e8:	e7d9      	b.n	801479e <sniprintf+0x16>
 80147ea:	bf00      	nop
 80147ec:	2000062c 	.word	0x2000062c

080147f0 <siprintf>:
 80147f0:	b40e      	push	{r1, r2, r3}
 80147f2:	b500      	push	{lr}
 80147f4:	b09c      	sub	sp, #112	; 0x70
 80147f6:	ab1d      	add	r3, sp, #116	; 0x74
 80147f8:	9002      	str	r0, [sp, #8]
 80147fa:	9006      	str	r0, [sp, #24]
 80147fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014800:	4809      	ldr	r0, [pc, #36]	; (8014828 <siprintf+0x38>)
 8014802:	9107      	str	r1, [sp, #28]
 8014804:	9104      	str	r1, [sp, #16]
 8014806:	4909      	ldr	r1, [pc, #36]	; (801482c <siprintf+0x3c>)
 8014808:	f853 2b04 	ldr.w	r2, [r3], #4
 801480c:	9105      	str	r1, [sp, #20]
 801480e:	6800      	ldr	r0, [r0, #0]
 8014810:	9301      	str	r3, [sp, #4]
 8014812:	a902      	add	r1, sp, #8
 8014814:	f000 f8bc 	bl	8014990 <_svfiprintf_r>
 8014818:	9b02      	ldr	r3, [sp, #8]
 801481a:	2200      	movs	r2, #0
 801481c:	701a      	strb	r2, [r3, #0]
 801481e:	b01c      	add	sp, #112	; 0x70
 8014820:	f85d eb04 	ldr.w	lr, [sp], #4
 8014824:	b003      	add	sp, #12
 8014826:	4770      	bx	lr
 8014828:	2000062c 	.word	0x2000062c
 801482c:	ffff0208 	.word	0xffff0208

08014830 <strchr>:
 8014830:	b2c9      	uxtb	r1, r1
 8014832:	4603      	mov	r3, r0
 8014834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014838:	b11a      	cbz	r2, 8014842 <strchr+0x12>
 801483a:	428a      	cmp	r2, r1
 801483c:	d1f9      	bne.n	8014832 <strchr+0x2>
 801483e:	4618      	mov	r0, r3
 8014840:	4770      	bx	lr
 8014842:	2900      	cmp	r1, #0
 8014844:	bf18      	it	ne
 8014846:	2300      	movne	r3, #0
 8014848:	e7f9      	b.n	801483e <strchr+0xe>

0801484a <strstr>:
 801484a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801484c:	7803      	ldrb	r3, [r0, #0]
 801484e:	b17b      	cbz	r3, 8014870 <strstr+0x26>
 8014850:	4604      	mov	r4, r0
 8014852:	7823      	ldrb	r3, [r4, #0]
 8014854:	4620      	mov	r0, r4
 8014856:	1c66      	adds	r6, r4, #1
 8014858:	b17b      	cbz	r3, 801487a <strstr+0x30>
 801485a:	1e4a      	subs	r2, r1, #1
 801485c:	1e63      	subs	r3, r4, #1
 801485e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8014862:	b14d      	cbz	r5, 8014878 <strstr+0x2e>
 8014864:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8014868:	42af      	cmp	r7, r5
 801486a:	4634      	mov	r4, r6
 801486c:	d0f7      	beq.n	801485e <strstr+0x14>
 801486e:	e7f0      	b.n	8014852 <strstr+0x8>
 8014870:	780b      	ldrb	r3, [r1, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	bf18      	it	ne
 8014876:	2000      	movne	r0, #0
 8014878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801487a:	4618      	mov	r0, r3
 801487c:	e7fc      	b.n	8014878 <strstr+0x2e>
	...

08014880 <time>:
 8014880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014882:	4b0b      	ldr	r3, [pc, #44]	; (80148b0 <time+0x30>)
 8014884:	4604      	mov	r4, r0
 8014886:	2200      	movs	r2, #0
 8014888:	4669      	mov	r1, sp
 801488a:	6818      	ldr	r0, [r3, #0]
 801488c:	f000 f812 	bl	80148b4 <_gettimeofday_r>
 8014890:	2800      	cmp	r0, #0
 8014892:	da05      	bge.n	80148a0 <time+0x20>
 8014894:	f04f 32ff 	mov.w	r2, #4294967295
 8014898:	f04f 33ff 	mov.w	r3, #4294967295
 801489c:	e9cd 2300 	strd	r2, r3, [sp]
 80148a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148a4:	b10c      	cbz	r4, 80148aa <time+0x2a>
 80148a6:	e9c4 0100 	strd	r0, r1, [r4]
 80148aa:	b004      	add	sp, #16
 80148ac:	bd10      	pop	{r4, pc}
 80148ae:	bf00      	nop
 80148b0:	2000062c 	.word	0x2000062c

080148b4 <_gettimeofday_r>:
 80148b4:	b538      	push	{r3, r4, r5, lr}
 80148b6:	4c07      	ldr	r4, [pc, #28]	; (80148d4 <_gettimeofday_r+0x20>)
 80148b8:	2300      	movs	r3, #0
 80148ba:	4605      	mov	r5, r0
 80148bc:	4608      	mov	r0, r1
 80148be:	4611      	mov	r1, r2
 80148c0:	6023      	str	r3, [r4, #0]
 80148c2:	f000 fb13 	bl	8014eec <_gettimeofday>
 80148c6:	1c43      	adds	r3, r0, #1
 80148c8:	d102      	bne.n	80148d0 <_gettimeofday_r+0x1c>
 80148ca:	6823      	ldr	r3, [r4, #0]
 80148cc:	b103      	cbz	r3, 80148d0 <_gettimeofday_r+0x1c>
 80148ce:	602b      	str	r3, [r5, #0]
 80148d0:	bd38      	pop	{r3, r4, r5, pc}
 80148d2:	bf00      	nop
 80148d4:	2000256c 	.word	0x2000256c

080148d8 <__malloc_lock>:
 80148d8:	4770      	bx	lr

080148da <__malloc_unlock>:
 80148da:	4770      	bx	lr

080148dc <__ssputs_r>:
 80148dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e0:	688e      	ldr	r6, [r1, #8]
 80148e2:	429e      	cmp	r6, r3
 80148e4:	4682      	mov	sl, r0
 80148e6:	460c      	mov	r4, r1
 80148e8:	4690      	mov	r8, r2
 80148ea:	4699      	mov	r9, r3
 80148ec:	d837      	bhi.n	801495e <__ssputs_r+0x82>
 80148ee:	898a      	ldrh	r2, [r1, #12]
 80148f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80148f4:	d031      	beq.n	801495a <__ssputs_r+0x7e>
 80148f6:	6825      	ldr	r5, [r4, #0]
 80148f8:	6909      	ldr	r1, [r1, #16]
 80148fa:	1a6f      	subs	r7, r5, r1
 80148fc:	6965      	ldr	r5, [r4, #20]
 80148fe:	2302      	movs	r3, #2
 8014900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014904:	fb95 f5f3 	sdiv	r5, r5, r3
 8014908:	f109 0301 	add.w	r3, r9, #1
 801490c:	443b      	add	r3, r7
 801490e:	429d      	cmp	r5, r3
 8014910:	bf38      	it	cc
 8014912:	461d      	movcc	r5, r3
 8014914:	0553      	lsls	r3, r2, #21
 8014916:	d530      	bpl.n	801497a <__ssputs_r+0x9e>
 8014918:	4629      	mov	r1, r5
 801491a:	f7ff fecb 	bl	80146b4 <_malloc_r>
 801491e:	4606      	mov	r6, r0
 8014920:	b950      	cbnz	r0, 8014938 <__ssputs_r+0x5c>
 8014922:	230c      	movs	r3, #12
 8014924:	f8ca 3000 	str.w	r3, [sl]
 8014928:	89a3      	ldrh	r3, [r4, #12]
 801492a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801492e:	81a3      	strh	r3, [r4, #12]
 8014930:	f04f 30ff 	mov.w	r0, #4294967295
 8014934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014938:	463a      	mov	r2, r7
 801493a:	6921      	ldr	r1, [r4, #16]
 801493c:	f7ff fe31 	bl	80145a2 <memcpy>
 8014940:	89a3      	ldrh	r3, [r4, #12]
 8014942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801494a:	81a3      	strh	r3, [r4, #12]
 801494c:	6126      	str	r6, [r4, #16]
 801494e:	6165      	str	r5, [r4, #20]
 8014950:	443e      	add	r6, r7
 8014952:	1bed      	subs	r5, r5, r7
 8014954:	6026      	str	r6, [r4, #0]
 8014956:	60a5      	str	r5, [r4, #8]
 8014958:	464e      	mov	r6, r9
 801495a:	454e      	cmp	r6, r9
 801495c:	d900      	bls.n	8014960 <__ssputs_r+0x84>
 801495e:	464e      	mov	r6, r9
 8014960:	4632      	mov	r2, r6
 8014962:	4641      	mov	r1, r8
 8014964:	6820      	ldr	r0, [r4, #0]
 8014966:	f7ff fe27 	bl	80145b8 <memmove>
 801496a:	68a3      	ldr	r3, [r4, #8]
 801496c:	1b9b      	subs	r3, r3, r6
 801496e:	60a3      	str	r3, [r4, #8]
 8014970:	6823      	ldr	r3, [r4, #0]
 8014972:	441e      	add	r6, r3
 8014974:	6026      	str	r6, [r4, #0]
 8014976:	2000      	movs	r0, #0
 8014978:	e7dc      	b.n	8014934 <__ssputs_r+0x58>
 801497a:	462a      	mov	r2, r5
 801497c:	f000 fa88 	bl	8014e90 <_realloc_r>
 8014980:	4606      	mov	r6, r0
 8014982:	2800      	cmp	r0, #0
 8014984:	d1e2      	bne.n	801494c <__ssputs_r+0x70>
 8014986:	6921      	ldr	r1, [r4, #16]
 8014988:	4650      	mov	r0, sl
 801498a:	f7ff fe45 	bl	8014618 <_free_r>
 801498e:	e7c8      	b.n	8014922 <__ssputs_r+0x46>

08014990 <_svfiprintf_r>:
 8014990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014994:	461d      	mov	r5, r3
 8014996:	898b      	ldrh	r3, [r1, #12]
 8014998:	061f      	lsls	r7, r3, #24
 801499a:	b09d      	sub	sp, #116	; 0x74
 801499c:	4680      	mov	r8, r0
 801499e:	460c      	mov	r4, r1
 80149a0:	4616      	mov	r6, r2
 80149a2:	d50f      	bpl.n	80149c4 <_svfiprintf_r+0x34>
 80149a4:	690b      	ldr	r3, [r1, #16]
 80149a6:	b96b      	cbnz	r3, 80149c4 <_svfiprintf_r+0x34>
 80149a8:	2140      	movs	r1, #64	; 0x40
 80149aa:	f7ff fe83 	bl	80146b4 <_malloc_r>
 80149ae:	6020      	str	r0, [r4, #0]
 80149b0:	6120      	str	r0, [r4, #16]
 80149b2:	b928      	cbnz	r0, 80149c0 <_svfiprintf_r+0x30>
 80149b4:	230c      	movs	r3, #12
 80149b6:	f8c8 3000 	str.w	r3, [r8]
 80149ba:	f04f 30ff 	mov.w	r0, #4294967295
 80149be:	e0c8      	b.n	8014b52 <_svfiprintf_r+0x1c2>
 80149c0:	2340      	movs	r3, #64	; 0x40
 80149c2:	6163      	str	r3, [r4, #20]
 80149c4:	2300      	movs	r3, #0
 80149c6:	9309      	str	r3, [sp, #36]	; 0x24
 80149c8:	2320      	movs	r3, #32
 80149ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149ce:	2330      	movs	r3, #48	; 0x30
 80149d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149d4:	9503      	str	r5, [sp, #12]
 80149d6:	f04f 0b01 	mov.w	fp, #1
 80149da:	4637      	mov	r7, r6
 80149dc:	463d      	mov	r5, r7
 80149de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80149e2:	b10b      	cbz	r3, 80149e8 <_svfiprintf_r+0x58>
 80149e4:	2b25      	cmp	r3, #37	; 0x25
 80149e6:	d13e      	bne.n	8014a66 <_svfiprintf_r+0xd6>
 80149e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80149ec:	d00b      	beq.n	8014a06 <_svfiprintf_r+0x76>
 80149ee:	4653      	mov	r3, sl
 80149f0:	4632      	mov	r2, r6
 80149f2:	4621      	mov	r1, r4
 80149f4:	4640      	mov	r0, r8
 80149f6:	f7ff ff71 	bl	80148dc <__ssputs_r>
 80149fa:	3001      	adds	r0, #1
 80149fc:	f000 80a4 	beq.w	8014b48 <_svfiprintf_r+0x1b8>
 8014a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a02:	4453      	add	r3, sl
 8014a04:	9309      	str	r3, [sp, #36]	; 0x24
 8014a06:	783b      	ldrb	r3, [r7, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f000 809d 	beq.w	8014b48 <_svfiprintf_r+0x1b8>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	f04f 32ff 	mov.w	r2, #4294967295
 8014a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a18:	9304      	str	r3, [sp, #16]
 8014a1a:	9307      	str	r3, [sp, #28]
 8014a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a20:	931a      	str	r3, [sp, #104]	; 0x68
 8014a22:	462f      	mov	r7, r5
 8014a24:	2205      	movs	r2, #5
 8014a26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014a2a:	4850      	ldr	r0, [pc, #320]	; (8014b6c <_svfiprintf_r+0x1dc>)
 8014a2c:	f7eb fbe0 	bl	80001f0 <memchr>
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	b9d0      	cbnz	r0, 8014a6a <_svfiprintf_r+0xda>
 8014a34:	06d9      	lsls	r1, r3, #27
 8014a36:	bf44      	itt	mi
 8014a38:	2220      	movmi	r2, #32
 8014a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a3e:	071a      	lsls	r2, r3, #28
 8014a40:	bf44      	itt	mi
 8014a42:	222b      	movmi	r2, #43	; 0x2b
 8014a44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a48:	782a      	ldrb	r2, [r5, #0]
 8014a4a:	2a2a      	cmp	r2, #42	; 0x2a
 8014a4c:	d015      	beq.n	8014a7a <_svfiprintf_r+0xea>
 8014a4e:	9a07      	ldr	r2, [sp, #28]
 8014a50:	462f      	mov	r7, r5
 8014a52:	2000      	movs	r0, #0
 8014a54:	250a      	movs	r5, #10
 8014a56:	4639      	mov	r1, r7
 8014a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a5c:	3b30      	subs	r3, #48	; 0x30
 8014a5e:	2b09      	cmp	r3, #9
 8014a60:	d94d      	bls.n	8014afe <_svfiprintf_r+0x16e>
 8014a62:	b1b8      	cbz	r0, 8014a94 <_svfiprintf_r+0x104>
 8014a64:	e00f      	b.n	8014a86 <_svfiprintf_r+0xf6>
 8014a66:	462f      	mov	r7, r5
 8014a68:	e7b8      	b.n	80149dc <_svfiprintf_r+0x4c>
 8014a6a:	4a40      	ldr	r2, [pc, #256]	; (8014b6c <_svfiprintf_r+0x1dc>)
 8014a6c:	1a80      	subs	r0, r0, r2
 8014a6e:	fa0b f000 	lsl.w	r0, fp, r0
 8014a72:	4318      	orrs	r0, r3
 8014a74:	9004      	str	r0, [sp, #16]
 8014a76:	463d      	mov	r5, r7
 8014a78:	e7d3      	b.n	8014a22 <_svfiprintf_r+0x92>
 8014a7a:	9a03      	ldr	r2, [sp, #12]
 8014a7c:	1d11      	adds	r1, r2, #4
 8014a7e:	6812      	ldr	r2, [r2, #0]
 8014a80:	9103      	str	r1, [sp, #12]
 8014a82:	2a00      	cmp	r2, #0
 8014a84:	db01      	blt.n	8014a8a <_svfiprintf_r+0xfa>
 8014a86:	9207      	str	r2, [sp, #28]
 8014a88:	e004      	b.n	8014a94 <_svfiprintf_r+0x104>
 8014a8a:	4252      	negs	r2, r2
 8014a8c:	f043 0302 	orr.w	r3, r3, #2
 8014a90:	9207      	str	r2, [sp, #28]
 8014a92:	9304      	str	r3, [sp, #16]
 8014a94:	783b      	ldrb	r3, [r7, #0]
 8014a96:	2b2e      	cmp	r3, #46	; 0x2e
 8014a98:	d10c      	bne.n	8014ab4 <_svfiprintf_r+0x124>
 8014a9a:	787b      	ldrb	r3, [r7, #1]
 8014a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8014a9e:	d133      	bne.n	8014b08 <_svfiprintf_r+0x178>
 8014aa0:	9b03      	ldr	r3, [sp, #12]
 8014aa2:	1d1a      	adds	r2, r3, #4
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	9203      	str	r2, [sp, #12]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	bfb8      	it	lt
 8014aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ab0:	3702      	adds	r7, #2
 8014ab2:	9305      	str	r3, [sp, #20]
 8014ab4:	4d2e      	ldr	r5, [pc, #184]	; (8014b70 <_svfiprintf_r+0x1e0>)
 8014ab6:	7839      	ldrb	r1, [r7, #0]
 8014ab8:	2203      	movs	r2, #3
 8014aba:	4628      	mov	r0, r5
 8014abc:	f7eb fb98 	bl	80001f0 <memchr>
 8014ac0:	b138      	cbz	r0, 8014ad2 <_svfiprintf_r+0x142>
 8014ac2:	2340      	movs	r3, #64	; 0x40
 8014ac4:	1b40      	subs	r0, r0, r5
 8014ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8014aca:	9b04      	ldr	r3, [sp, #16]
 8014acc:	4303      	orrs	r3, r0
 8014ace:	3701      	adds	r7, #1
 8014ad0:	9304      	str	r3, [sp, #16]
 8014ad2:	7839      	ldrb	r1, [r7, #0]
 8014ad4:	4827      	ldr	r0, [pc, #156]	; (8014b74 <_svfiprintf_r+0x1e4>)
 8014ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ada:	2206      	movs	r2, #6
 8014adc:	1c7e      	adds	r6, r7, #1
 8014ade:	f7eb fb87 	bl	80001f0 <memchr>
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d038      	beq.n	8014b58 <_svfiprintf_r+0x1c8>
 8014ae6:	4b24      	ldr	r3, [pc, #144]	; (8014b78 <_svfiprintf_r+0x1e8>)
 8014ae8:	bb13      	cbnz	r3, 8014b30 <_svfiprintf_r+0x1a0>
 8014aea:	9b03      	ldr	r3, [sp, #12]
 8014aec:	3307      	adds	r3, #7
 8014aee:	f023 0307 	bic.w	r3, r3, #7
 8014af2:	3308      	adds	r3, #8
 8014af4:	9303      	str	r3, [sp, #12]
 8014af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014af8:	444b      	add	r3, r9
 8014afa:	9309      	str	r3, [sp, #36]	; 0x24
 8014afc:	e76d      	b.n	80149da <_svfiprintf_r+0x4a>
 8014afe:	fb05 3202 	mla	r2, r5, r2, r3
 8014b02:	2001      	movs	r0, #1
 8014b04:	460f      	mov	r7, r1
 8014b06:	e7a6      	b.n	8014a56 <_svfiprintf_r+0xc6>
 8014b08:	2300      	movs	r3, #0
 8014b0a:	3701      	adds	r7, #1
 8014b0c:	9305      	str	r3, [sp, #20]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	250a      	movs	r5, #10
 8014b12:	4638      	mov	r0, r7
 8014b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b18:	3a30      	subs	r2, #48	; 0x30
 8014b1a:	2a09      	cmp	r2, #9
 8014b1c:	d903      	bls.n	8014b26 <_svfiprintf_r+0x196>
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d0c8      	beq.n	8014ab4 <_svfiprintf_r+0x124>
 8014b22:	9105      	str	r1, [sp, #20]
 8014b24:	e7c6      	b.n	8014ab4 <_svfiprintf_r+0x124>
 8014b26:	fb05 2101 	mla	r1, r5, r1, r2
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	4607      	mov	r7, r0
 8014b2e:	e7f0      	b.n	8014b12 <_svfiprintf_r+0x182>
 8014b30:	ab03      	add	r3, sp, #12
 8014b32:	9300      	str	r3, [sp, #0]
 8014b34:	4622      	mov	r2, r4
 8014b36:	4b11      	ldr	r3, [pc, #68]	; (8014b7c <_svfiprintf_r+0x1ec>)
 8014b38:	a904      	add	r1, sp, #16
 8014b3a:	4640      	mov	r0, r8
 8014b3c:	f3af 8000 	nop.w
 8014b40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014b44:	4681      	mov	r9, r0
 8014b46:	d1d6      	bne.n	8014af6 <_svfiprintf_r+0x166>
 8014b48:	89a3      	ldrh	r3, [r4, #12]
 8014b4a:	065b      	lsls	r3, r3, #25
 8014b4c:	f53f af35 	bmi.w	80149ba <_svfiprintf_r+0x2a>
 8014b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b52:	b01d      	add	sp, #116	; 0x74
 8014b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b58:	ab03      	add	r3, sp, #12
 8014b5a:	9300      	str	r3, [sp, #0]
 8014b5c:	4622      	mov	r2, r4
 8014b5e:	4b07      	ldr	r3, [pc, #28]	; (8014b7c <_svfiprintf_r+0x1ec>)
 8014b60:	a904      	add	r1, sp, #16
 8014b62:	4640      	mov	r0, r8
 8014b64:	f000 f882 	bl	8014c6c <_printf_i>
 8014b68:	e7ea      	b.n	8014b40 <_svfiprintf_r+0x1b0>
 8014b6a:	bf00      	nop
 8014b6c:	08019f10 	.word	0x08019f10
 8014b70:	08019f16 	.word	0x08019f16
 8014b74:	08019f1a 	.word	0x08019f1a
 8014b78:	00000000 	.word	0x00000000
 8014b7c:	080148dd 	.word	0x080148dd

08014b80 <_printf_common>:
 8014b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b84:	4691      	mov	r9, r2
 8014b86:	461f      	mov	r7, r3
 8014b88:	688a      	ldr	r2, [r1, #8]
 8014b8a:	690b      	ldr	r3, [r1, #16]
 8014b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b90:	4293      	cmp	r3, r2
 8014b92:	bfb8      	it	lt
 8014b94:	4613      	movlt	r3, r2
 8014b96:	f8c9 3000 	str.w	r3, [r9]
 8014b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	460c      	mov	r4, r1
 8014ba2:	b112      	cbz	r2, 8014baa <_printf_common+0x2a>
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	f8c9 3000 	str.w	r3, [r9]
 8014baa:	6823      	ldr	r3, [r4, #0]
 8014bac:	0699      	lsls	r1, r3, #26
 8014bae:	bf42      	ittt	mi
 8014bb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014bb4:	3302      	addmi	r3, #2
 8014bb6:	f8c9 3000 	strmi.w	r3, [r9]
 8014bba:	6825      	ldr	r5, [r4, #0]
 8014bbc:	f015 0506 	ands.w	r5, r5, #6
 8014bc0:	d107      	bne.n	8014bd2 <_printf_common+0x52>
 8014bc2:	f104 0a19 	add.w	sl, r4, #25
 8014bc6:	68e3      	ldr	r3, [r4, #12]
 8014bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8014bcc:	1a9b      	subs	r3, r3, r2
 8014bce:	42ab      	cmp	r3, r5
 8014bd0:	dc28      	bgt.n	8014c24 <_printf_common+0xa4>
 8014bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014bd6:	6822      	ldr	r2, [r4, #0]
 8014bd8:	3300      	adds	r3, #0
 8014bda:	bf18      	it	ne
 8014bdc:	2301      	movne	r3, #1
 8014bde:	0692      	lsls	r2, r2, #26
 8014be0:	d42d      	bmi.n	8014c3e <_printf_common+0xbe>
 8014be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014be6:	4639      	mov	r1, r7
 8014be8:	4630      	mov	r0, r6
 8014bea:	47c0      	blx	r8
 8014bec:	3001      	adds	r0, #1
 8014bee:	d020      	beq.n	8014c32 <_printf_common+0xb2>
 8014bf0:	6823      	ldr	r3, [r4, #0]
 8014bf2:	68e5      	ldr	r5, [r4, #12]
 8014bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8014bf8:	f003 0306 	and.w	r3, r3, #6
 8014bfc:	2b04      	cmp	r3, #4
 8014bfe:	bf08      	it	eq
 8014c00:	1aad      	subeq	r5, r5, r2
 8014c02:	68a3      	ldr	r3, [r4, #8]
 8014c04:	6922      	ldr	r2, [r4, #16]
 8014c06:	bf0c      	ite	eq
 8014c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c0c:	2500      	movne	r5, #0
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	bfc4      	itt	gt
 8014c12:	1a9b      	subgt	r3, r3, r2
 8014c14:	18ed      	addgt	r5, r5, r3
 8014c16:	f04f 0900 	mov.w	r9, #0
 8014c1a:	341a      	adds	r4, #26
 8014c1c:	454d      	cmp	r5, r9
 8014c1e:	d11a      	bne.n	8014c56 <_printf_common+0xd6>
 8014c20:	2000      	movs	r0, #0
 8014c22:	e008      	b.n	8014c36 <_printf_common+0xb6>
 8014c24:	2301      	movs	r3, #1
 8014c26:	4652      	mov	r2, sl
 8014c28:	4639      	mov	r1, r7
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	47c0      	blx	r8
 8014c2e:	3001      	adds	r0, #1
 8014c30:	d103      	bne.n	8014c3a <_printf_common+0xba>
 8014c32:	f04f 30ff 	mov.w	r0, #4294967295
 8014c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c3a:	3501      	adds	r5, #1
 8014c3c:	e7c3      	b.n	8014bc6 <_printf_common+0x46>
 8014c3e:	18e1      	adds	r1, r4, r3
 8014c40:	1c5a      	adds	r2, r3, #1
 8014c42:	2030      	movs	r0, #48	; 0x30
 8014c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c48:	4422      	add	r2, r4
 8014c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c52:	3302      	adds	r3, #2
 8014c54:	e7c5      	b.n	8014be2 <_printf_common+0x62>
 8014c56:	2301      	movs	r3, #1
 8014c58:	4622      	mov	r2, r4
 8014c5a:	4639      	mov	r1, r7
 8014c5c:	4630      	mov	r0, r6
 8014c5e:	47c0      	blx	r8
 8014c60:	3001      	adds	r0, #1
 8014c62:	d0e6      	beq.n	8014c32 <_printf_common+0xb2>
 8014c64:	f109 0901 	add.w	r9, r9, #1
 8014c68:	e7d8      	b.n	8014c1c <_printf_common+0x9c>
	...

08014c6c <_printf_i>:
 8014c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014c74:	460c      	mov	r4, r1
 8014c76:	7e09      	ldrb	r1, [r1, #24]
 8014c78:	b085      	sub	sp, #20
 8014c7a:	296e      	cmp	r1, #110	; 0x6e
 8014c7c:	4617      	mov	r7, r2
 8014c7e:	4606      	mov	r6, r0
 8014c80:	4698      	mov	r8, r3
 8014c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c84:	f000 80b3 	beq.w	8014dee <_printf_i+0x182>
 8014c88:	d822      	bhi.n	8014cd0 <_printf_i+0x64>
 8014c8a:	2963      	cmp	r1, #99	; 0x63
 8014c8c:	d036      	beq.n	8014cfc <_printf_i+0x90>
 8014c8e:	d80a      	bhi.n	8014ca6 <_printf_i+0x3a>
 8014c90:	2900      	cmp	r1, #0
 8014c92:	f000 80b9 	beq.w	8014e08 <_printf_i+0x19c>
 8014c96:	2958      	cmp	r1, #88	; 0x58
 8014c98:	f000 8083 	beq.w	8014da2 <_printf_i+0x136>
 8014c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ca0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014ca4:	e032      	b.n	8014d0c <_printf_i+0xa0>
 8014ca6:	2964      	cmp	r1, #100	; 0x64
 8014ca8:	d001      	beq.n	8014cae <_printf_i+0x42>
 8014caa:	2969      	cmp	r1, #105	; 0x69
 8014cac:	d1f6      	bne.n	8014c9c <_printf_i+0x30>
 8014cae:	6820      	ldr	r0, [r4, #0]
 8014cb0:	6813      	ldr	r3, [r2, #0]
 8014cb2:	0605      	lsls	r5, r0, #24
 8014cb4:	f103 0104 	add.w	r1, r3, #4
 8014cb8:	d52a      	bpl.n	8014d10 <_printf_i+0xa4>
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	6011      	str	r1, [r2, #0]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	da03      	bge.n	8014cca <_printf_i+0x5e>
 8014cc2:	222d      	movs	r2, #45	; 0x2d
 8014cc4:	425b      	negs	r3, r3
 8014cc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014cca:	486f      	ldr	r0, [pc, #444]	; (8014e88 <_printf_i+0x21c>)
 8014ccc:	220a      	movs	r2, #10
 8014cce:	e039      	b.n	8014d44 <_printf_i+0xd8>
 8014cd0:	2973      	cmp	r1, #115	; 0x73
 8014cd2:	f000 809d 	beq.w	8014e10 <_printf_i+0x1a4>
 8014cd6:	d808      	bhi.n	8014cea <_printf_i+0x7e>
 8014cd8:	296f      	cmp	r1, #111	; 0x6f
 8014cda:	d020      	beq.n	8014d1e <_printf_i+0xb2>
 8014cdc:	2970      	cmp	r1, #112	; 0x70
 8014cde:	d1dd      	bne.n	8014c9c <_printf_i+0x30>
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	f043 0320 	orr.w	r3, r3, #32
 8014ce6:	6023      	str	r3, [r4, #0]
 8014ce8:	e003      	b.n	8014cf2 <_printf_i+0x86>
 8014cea:	2975      	cmp	r1, #117	; 0x75
 8014cec:	d017      	beq.n	8014d1e <_printf_i+0xb2>
 8014cee:	2978      	cmp	r1, #120	; 0x78
 8014cf0:	d1d4      	bne.n	8014c9c <_printf_i+0x30>
 8014cf2:	2378      	movs	r3, #120	; 0x78
 8014cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014cf8:	4864      	ldr	r0, [pc, #400]	; (8014e8c <_printf_i+0x220>)
 8014cfa:	e055      	b.n	8014da8 <_printf_i+0x13c>
 8014cfc:	6813      	ldr	r3, [r2, #0]
 8014cfe:	1d19      	adds	r1, r3, #4
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	6011      	str	r1, [r2, #0]
 8014d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	e08c      	b.n	8014e2a <_printf_i+0x1be>
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	6011      	str	r1, [r2, #0]
 8014d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d18:	bf18      	it	ne
 8014d1a:	b21b      	sxthne	r3, r3
 8014d1c:	e7cf      	b.n	8014cbe <_printf_i+0x52>
 8014d1e:	6813      	ldr	r3, [r2, #0]
 8014d20:	6825      	ldr	r5, [r4, #0]
 8014d22:	1d18      	adds	r0, r3, #4
 8014d24:	6010      	str	r0, [r2, #0]
 8014d26:	0628      	lsls	r0, r5, #24
 8014d28:	d501      	bpl.n	8014d2e <_printf_i+0xc2>
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	e002      	b.n	8014d34 <_printf_i+0xc8>
 8014d2e:	0668      	lsls	r0, r5, #25
 8014d30:	d5fb      	bpl.n	8014d2a <_printf_i+0xbe>
 8014d32:	881b      	ldrh	r3, [r3, #0]
 8014d34:	4854      	ldr	r0, [pc, #336]	; (8014e88 <_printf_i+0x21c>)
 8014d36:	296f      	cmp	r1, #111	; 0x6f
 8014d38:	bf14      	ite	ne
 8014d3a:	220a      	movne	r2, #10
 8014d3c:	2208      	moveq	r2, #8
 8014d3e:	2100      	movs	r1, #0
 8014d40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d44:	6865      	ldr	r5, [r4, #4]
 8014d46:	60a5      	str	r5, [r4, #8]
 8014d48:	2d00      	cmp	r5, #0
 8014d4a:	f2c0 8095 	blt.w	8014e78 <_printf_i+0x20c>
 8014d4e:	6821      	ldr	r1, [r4, #0]
 8014d50:	f021 0104 	bic.w	r1, r1, #4
 8014d54:	6021      	str	r1, [r4, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d13d      	bne.n	8014dd6 <_printf_i+0x16a>
 8014d5a:	2d00      	cmp	r5, #0
 8014d5c:	f040 808e 	bne.w	8014e7c <_printf_i+0x210>
 8014d60:	4665      	mov	r5, ip
 8014d62:	2a08      	cmp	r2, #8
 8014d64:	d10b      	bne.n	8014d7e <_printf_i+0x112>
 8014d66:	6823      	ldr	r3, [r4, #0]
 8014d68:	07db      	lsls	r3, r3, #31
 8014d6a:	d508      	bpl.n	8014d7e <_printf_i+0x112>
 8014d6c:	6923      	ldr	r3, [r4, #16]
 8014d6e:	6862      	ldr	r2, [r4, #4]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	bfde      	ittt	le
 8014d74:	2330      	movle	r3, #48	; 0x30
 8014d76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014d7e:	ebac 0305 	sub.w	r3, ip, r5
 8014d82:	6123      	str	r3, [r4, #16]
 8014d84:	f8cd 8000 	str.w	r8, [sp]
 8014d88:	463b      	mov	r3, r7
 8014d8a:	aa03      	add	r2, sp, #12
 8014d8c:	4621      	mov	r1, r4
 8014d8e:	4630      	mov	r0, r6
 8014d90:	f7ff fef6 	bl	8014b80 <_printf_common>
 8014d94:	3001      	adds	r0, #1
 8014d96:	d14d      	bne.n	8014e34 <_printf_i+0x1c8>
 8014d98:	f04f 30ff 	mov.w	r0, #4294967295
 8014d9c:	b005      	add	sp, #20
 8014d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014da2:	4839      	ldr	r0, [pc, #228]	; (8014e88 <_printf_i+0x21c>)
 8014da4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014da8:	6813      	ldr	r3, [r2, #0]
 8014daa:	6821      	ldr	r1, [r4, #0]
 8014dac:	1d1d      	adds	r5, r3, #4
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	6015      	str	r5, [r2, #0]
 8014db2:	060a      	lsls	r2, r1, #24
 8014db4:	d50b      	bpl.n	8014dce <_printf_i+0x162>
 8014db6:	07ca      	lsls	r2, r1, #31
 8014db8:	bf44      	itt	mi
 8014dba:	f041 0120 	orrmi.w	r1, r1, #32
 8014dbe:	6021      	strmi	r1, [r4, #0]
 8014dc0:	b91b      	cbnz	r3, 8014dca <_printf_i+0x15e>
 8014dc2:	6822      	ldr	r2, [r4, #0]
 8014dc4:	f022 0220 	bic.w	r2, r2, #32
 8014dc8:	6022      	str	r2, [r4, #0]
 8014dca:	2210      	movs	r2, #16
 8014dcc:	e7b7      	b.n	8014d3e <_printf_i+0xd2>
 8014dce:	064d      	lsls	r5, r1, #25
 8014dd0:	bf48      	it	mi
 8014dd2:	b29b      	uxthmi	r3, r3
 8014dd4:	e7ef      	b.n	8014db6 <_printf_i+0x14a>
 8014dd6:	4665      	mov	r5, ip
 8014dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ddc:	fb02 3311 	mls	r3, r2, r1, r3
 8014de0:	5cc3      	ldrb	r3, [r0, r3]
 8014de2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014de6:	460b      	mov	r3, r1
 8014de8:	2900      	cmp	r1, #0
 8014dea:	d1f5      	bne.n	8014dd8 <_printf_i+0x16c>
 8014dec:	e7b9      	b.n	8014d62 <_printf_i+0xf6>
 8014dee:	6813      	ldr	r3, [r2, #0]
 8014df0:	6825      	ldr	r5, [r4, #0]
 8014df2:	6961      	ldr	r1, [r4, #20]
 8014df4:	1d18      	adds	r0, r3, #4
 8014df6:	6010      	str	r0, [r2, #0]
 8014df8:	0628      	lsls	r0, r5, #24
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	d501      	bpl.n	8014e02 <_printf_i+0x196>
 8014dfe:	6019      	str	r1, [r3, #0]
 8014e00:	e002      	b.n	8014e08 <_printf_i+0x19c>
 8014e02:	066a      	lsls	r2, r5, #25
 8014e04:	d5fb      	bpl.n	8014dfe <_printf_i+0x192>
 8014e06:	8019      	strh	r1, [r3, #0]
 8014e08:	2300      	movs	r3, #0
 8014e0a:	6123      	str	r3, [r4, #16]
 8014e0c:	4665      	mov	r5, ip
 8014e0e:	e7b9      	b.n	8014d84 <_printf_i+0x118>
 8014e10:	6813      	ldr	r3, [r2, #0]
 8014e12:	1d19      	adds	r1, r3, #4
 8014e14:	6011      	str	r1, [r2, #0]
 8014e16:	681d      	ldr	r5, [r3, #0]
 8014e18:	6862      	ldr	r2, [r4, #4]
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	f7eb f9e7 	bl	80001f0 <memchr>
 8014e22:	b108      	cbz	r0, 8014e28 <_printf_i+0x1bc>
 8014e24:	1b40      	subs	r0, r0, r5
 8014e26:	6060      	str	r0, [r4, #4]
 8014e28:	6863      	ldr	r3, [r4, #4]
 8014e2a:	6123      	str	r3, [r4, #16]
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e32:	e7a7      	b.n	8014d84 <_printf_i+0x118>
 8014e34:	6923      	ldr	r3, [r4, #16]
 8014e36:	462a      	mov	r2, r5
 8014e38:	4639      	mov	r1, r7
 8014e3a:	4630      	mov	r0, r6
 8014e3c:	47c0      	blx	r8
 8014e3e:	3001      	adds	r0, #1
 8014e40:	d0aa      	beq.n	8014d98 <_printf_i+0x12c>
 8014e42:	6823      	ldr	r3, [r4, #0]
 8014e44:	079b      	lsls	r3, r3, #30
 8014e46:	d413      	bmi.n	8014e70 <_printf_i+0x204>
 8014e48:	68e0      	ldr	r0, [r4, #12]
 8014e4a:	9b03      	ldr	r3, [sp, #12]
 8014e4c:	4298      	cmp	r0, r3
 8014e4e:	bfb8      	it	lt
 8014e50:	4618      	movlt	r0, r3
 8014e52:	e7a3      	b.n	8014d9c <_printf_i+0x130>
 8014e54:	2301      	movs	r3, #1
 8014e56:	464a      	mov	r2, r9
 8014e58:	4639      	mov	r1, r7
 8014e5a:	4630      	mov	r0, r6
 8014e5c:	47c0      	blx	r8
 8014e5e:	3001      	adds	r0, #1
 8014e60:	d09a      	beq.n	8014d98 <_printf_i+0x12c>
 8014e62:	3501      	adds	r5, #1
 8014e64:	68e3      	ldr	r3, [r4, #12]
 8014e66:	9a03      	ldr	r2, [sp, #12]
 8014e68:	1a9b      	subs	r3, r3, r2
 8014e6a:	42ab      	cmp	r3, r5
 8014e6c:	dcf2      	bgt.n	8014e54 <_printf_i+0x1e8>
 8014e6e:	e7eb      	b.n	8014e48 <_printf_i+0x1dc>
 8014e70:	2500      	movs	r5, #0
 8014e72:	f104 0919 	add.w	r9, r4, #25
 8014e76:	e7f5      	b.n	8014e64 <_printf_i+0x1f8>
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d1ac      	bne.n	8014dd6 <_printf_i+0x16a>
 8014e7c:	7803      	ldrb	r3, [r0, #0]
 8014e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e86:	e76c      	b.n	8014d62 <_printf_i+0xf6>
 8014e88:	08019f21 	.word	0x08019f21
 8014e8c:	08019f32 	.word	0x08019f32

08014e90 <_realloc_r>:
 8014e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e92:	4607      	mov	r7, r0
 8014e94:	4614      	mov	r4, r2
 8014e96:	460e      	mov	r6, r1
 8014e98:	b921      	cbnz	r1, 8014ea4 <_realloc_r+0x14>
 8014e9a:	4611      	mov	r1, r2
 8014e9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014ea0:	f7ff bc08 	b.w	80146b4 <_malloc_r>
 8014ea4:	b922      	cbnz	r2, 8014eb0 <_realloc_r+0x20>
 8014ea6:	f7ff fbb7 	bl	8014618 <_free_r>
 8014eaa:	4625      	mov	r5, r4
 8014eac:	4628      	mov	r0, r5
 8014eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eb0:	f000 f814 	bl	8014edc <_malloc_usable_size_r>
 8014eb4:	42a0      	cmp	r0, r4
 8014eb6:	d20f      	bcs.n	8014ed8 <_realloc_r+0x48>
 8014eb8:	4621      	mov	r1, r4
 8014eba:	4638      	mov	r0, r7
 8014ebc:	f7ff fbfa 	bl	80146b4 <_malloc_r>
 8014ec0:	4605      	mov	r5, r0
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d0f2      	beq.n	8014eac <_realloc_r+0x1c>
 8014ec6:	4631      	mov	r1, r6
 8014ec8:	4622      	mov	r2, r4
 8014eca:	f7ff fb6a 	bl	80145a2 <memcpy>
 8014ece:	4631      	mov	r1, r6
 8014ed0:	4638      	mov	r0, r7
 8014ed2:	f7ff fba1 	bl	8014618 <_free_r>
 8014ed6:	e7e9      	b.n	8014eac <_realloc_r+0x1c>
 8014ed8:	4635      	mov	r5, r6
 8014eda:	e7e7      	b.n	8014eac <_realloc_r+0x1c>

08014edc <_malloc_usable_size_r>:
 8014edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ee0:	1f18      	subs	r0, r3, #4
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	bfbc      	itt	lt
 8014ee6:	580b      	ldrlt	r3, [r1, r0]
 8014ee8:	18c0      	addlt	r0, r0, r3
 8014eea:	4770      	bx	lr

08014eec <_gettimeofday>:
 8014eec:	4b02      	ldr	r3, [pc, #8]	; (8014ef8 <_gettimeofday+0xc>)
 8014eee:	2258      	movs	r2, #88	; 0x58
 8014ef0:	601a      	str	r2, [r3, #0]
 8014ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ef6:	4770      	bx	lr
 8014ef8:	2000256c 	.word	0x2000256c

08014efc <_init>:
 8014efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014efe:	bf00      	nop
 8014f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f02:	bc08      	pop	{r3}
 8014f04:	469e      	mov	lr, r3
 8014f06:	4770      	bx	lr

08014f08 <_fini>:
 8014f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f0a:	bf00      	nop
 8014f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f0e:	bc08      	pop	{r3}
 8014f10:	469e      	mov	lr, r3
 8014f12:	4770      	bx	lr
